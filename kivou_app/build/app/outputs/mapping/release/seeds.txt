org.webrtc.PeerConnection$TcpCandidatePolicy
com.cloudwebrtc.webrtc.SurfaceTextureRenderer
org.webrtc.CameraCapturer$5
org.webrtc.ContextUtils
org.webrtc.EglBase14$Context
org.webrtc.audio.LowLatencyAudioBufferManager
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback
org.webrtc.NetEqFactoryFactory
org.webrtc.WebRtcClassLoader
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer
org.webrtc.SoftwareVideoDecoderFactory
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService
org.webrtc.SimulcastVideoEncoder
org.webrtc.VideoTrack
org.webrtc.DataChannel$Observer
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode
com.google.android.gms.common.api.Scope
android.support.v4.media.session.PlaybackStateCompat$CustomAction
com.google.firebase.iid.Registrar
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer
org.webrtc.SessionDescription$Type
org.webrtc.video.CustomVideoDecoderFactory
org.webrtc.VideoDecoderFactory
org.webrtc.Predicate
org.webrtc.EglRenderer$EglSurfaceCreation
org.webrtc.EncodedImage$FrameType
org.webrtc.HardwareVideoEncoder
com.baseflow.permissionhandler.PermissionHandlerPlugin
org.webrtc.Size
org.webrtc.Camera2Session$CameraCaptureCallback
org.webrtc.BaseBitrateAdjuster
io.flutter.plugins.urllauncher.WebViewActivity
org.webrtc.LibaomAv1Encoder
io.flutter.plugin.text.ProcessTextPlugin
com.cloudwebrtc.webrtc.PeerConnectionObserver$1
com.google.android.gms.common.util.DynamiteApi
com.google.firebase.messaging.FirebaseMessagingRegistrar
androidx.window.extensions.core.util.function.Function
org.webrtc.RtpParameters$Codec
com.dexterous.flutterlocalnotifications.models.BitmapSource
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
org.webrtc.VideoEncoder$EncodeInfo
org.webrtc.EglBase$Context
androidx.core.app.RemoteActionCompatParcelizer
org.webrtc.VideoFrameBufferType
com.google.android.gms.location.LocationResult
org.webrtc.NetworkChangeDetector$ConnectionType
com.cloudwebrtc.webrtc.record.MediaRecorderImpl
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback
org.webrtc.EglBase14Impl
com.baseflow.geolocator.GeolocatorPlugin
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1
org.webrtc.FileVideoCapturer$VideoReaderY4M
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState
org.webrtc.AudioProcessingFactory
org.webrtc.VideoEncoder$CodecSpecificInfoAV1
com.cloudwebrtc.webrtc.utils.Utils$1
org.webrtc.WrappedNativeVideoDecoder
com.google.firebase.provider.FirebaseInitProvider
org.webrtc.EglRenderer
org.webrtc.PeerConnection$AdapterType
org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements
org.webrtc.EglThread$HandlerWithExceptionCallbacks
org.webrtc.CameraCapturer$2
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException
com.cloudwebrtc.webrtc.StateProvider
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService
io.flutter.embedding.engine.FlutterJNI
org.webrtc.PeerConnection$RTCConfiguration
org.webrtc.SessionDescription
org.webrtc.audio.WebRtcAudioUtils
com.baseflow.geolocator.GeolocatorLocationService
org.webrtc.CameraCapturer$SwitchState
org.webrtc.VideoProcessor$FrameAdaptationParameters
org.webrtc.Logging$Severity
org.webrtc.HardwareVideoDecoderFactory
org.webrtc.PeerConnection$IceConnectionState
org.webrtc.CapturerObserver
org.webrtc.VideoEncoder$Callback
org.webrtc.NetworkChangeDetector$IPAddress
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1
org.webrtc.VideoDecoderWrapper
org.webrtc.CameraCapturer
org.webrtc.PeerConnectionDependencies$Builder
org.webrtc.SoftwareVideoEncoderFactory
org.webrtc.CameraEnumerator
android.support.v4.media.MediaBrowserCompat$MediaItem
org.webrtc.VideoEncoder$EncoderInfo
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation
org.webrtc.video.CustomVideoEncoderFactory
org.webrtc.NetworkPreference
androidx.lifecycle.ProcessLifecycleInitializer
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation
io.flutter.plugins.googlemaps.GoogleMapsPlugin
org.webrtc.AudioSource
com.google.android.gms.location.LocationAvailability
org.webrtc.NetworkMonitorAutoDetect
org.webrtc.audio.WebRtcAudioRecord$1
org.webrtc.FrameCryptorKeyProvider
org.webrtc.AudioTrack
org.webrtc.VideoFileRenderer$1
org.webrtc.EglRenderer$ErrorCallback
org.webrtc.TurnCustomizer
org.webrtc.CameraVideoCapturer$CameraSwitchHandler
org.webrtc.AndroidVideoDecoder
org.webrtc.RTCStatsReport
com.google.firebase.iid.FirebaseInstanceIdReceiver
androidx.media.AudioAttributesImplApi26
org.webrtc.PeerConnection$BundlePolicy
org.webrtc.ThreadUtils$BlockingOperation
org.webrtc.HardwareVideoEncoderFactory
org.webrtc.EglThread$RenderUpdate
com.cloudwebrtc.webrtc.GetUserMediaImpl$2
org.webrtc.EglBase10Impl
org.webrtc.MediaStreamTrack
org.webrtc.SurfaceEglRenderer
org.webrtc.ThreadUtils$3
org.webrtc.Camera1Enumerator
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin
org.webrtc.VideoEncoder
org.webrtc.EglBase14$EglConnection
org.webrtc.RendererCommon
android.support.v4.media.session.PlaybackStateCompat
org.webrtc.MediaCodecUtils
org.webrtc.EglRenderer$FrameListener
org.webrtc.RendererCommon$VideoLayoutMeasure
com.dexterous.flutterlocalnotifications.models.RepeatInterval
io.flutter.plugins.imagepicker.ImagePickerPlugin
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
org.webrtc.SurfaceTextureHelper$FrameRefMonitor
org.webrtc.Predicate$3
com.cloudwebrtc.webrtc.utils.ConstraintsMap
com.cloudwebrtc.webrtc.utils.PermissionUtils
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2
com.dexterous.flutterlocalnotifications.utils.StringUtils
org.webrtc.CameraEnumerationAndroid
com.cloudwebrtc.webrtc.record.AudioChannel
org.webrtc.AndroidVideoDecoder$FrameInfo
org.webrtc.IceCandidateErrorEvent
org.webrtc.VideoDecoder$Callback
com.cloudwebrtc.webrtc.utils.AnyThreadSink
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements
org.webrtc.ExternalAudioProcessingFactory
org.webrtc.BitrateAdjuster
org.webrtc.NV21Buffer
org.webrtc.CameraCapturer$9
androidx.versionedparcelable.ParcelImpl
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1
com.cloudwebrtc.webrtc.audio.AudioUtils
org.webrtc.CameraVideoCapturer
com.cloudwebrtc.webrtc.utils.ConstraintsArray
com.google.firebase.components.ComponentRegistrar
org.webrtc.RtpParameters$HeaderExtension
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback
org.webrtc.GlRectDrawer$ShaderCallbacks
org.webrtc.Predicate$2
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$1
org.webrtc.TextureBufferImpl
org.webrtc.RtpParameters$Rtcp
org.webrtc.DataChannel$State
org.webrtc.Camera2Session$SessionState
org.webrtc.StatsReport
org.webrtc.PeerConnection$ContinualGatheringPolicy
com.google.android.gms.maps.model.CameraPosition
org.webrtc.BuiltinAudioEncoderFactoryFactory
org.webrtc.VideoFrameDrawer$YuvUploader
org.webrtc.VideoEncoderFactory
com.google.android.gms.maps.model.LatLngBounds
org.webrtc.Logging$1
org.webrtc.VideoEncoder$BitrateAllocation
org.webrtc.DefaultVideoDecoderFactory
org.webrtc.VideoFrameDrawer$1
org.webrtc.VideoDecoder
org.webrtc.NetworkStatePredictorFactoryFactory
org.webrtc.Logging
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor
org.webrtc.LibvpxVp8Decoder
com.google.android.gms.common.internal.ReflectedParcelable
com.google.firebase.installations.FirebaseInstallationsRegistrar
io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin
org.webrtc.audio.WebRtcAudioRecord
org.webrtc.VideoEncoder$ResolutionBitrateLimits
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment
android.support.v4.media.MediaBrowserCompat$ItemReceiver
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode
org.webrtc.CameraSession$FailureType
android.support.v4.media.MediaMetadataCompat
org.webrtc.VideoEncoder$CodecSpecificInfo
com.cloudwebrtc.webrtc.CameraEventsHandler
org.webrtc.WrappedNativeVideoEncoder
org.webrtc.NetworkControllerFactoryFactory
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException
org.webrtc.EglBase10
org.webrtc.CameraCapturer$8
kotlinx.coroutines.internal.StackTraceRecoveryKt
org.webrtc.VideoCapturer
org.webrtc.TimestampAligner
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread
org.webrtc.DefaultVideoEncoderFactory
org.webrtc.CameraEnumerationAndroid$2
org.webrtc.DataChannel$Init
org.webrtc.VideoFrame$TextureBuffer$Type
org.webrtc.NetworkMonitor
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry
org.webrtc.RtpCapabilities$CodecCapability
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver
org.webrtc.EglBase14
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder
org.webrtc.EglBase14Impl$EglConnection
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver
com.google.android.gms.common.api.Status
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver
org.webrtc.audio.WebRtcAudioManager
org.webrtc.VideoCodecMimeType
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
org.webrtc.MediaConstraints$KeyValuePair
org.webrtc.CameraSession$Events
org.webrtc.WebrtcBuildVersion
org.webrtc.ThreadUtils$ThreadChecker
org.webrtc.HardwareVideoEncoder$1
androidx.media.AudioAttributesImplApi21
org.webrtc.SSLCertificateVerifier
android.support.v4.graphics.drawable.IconCompatParcelizer
org.webrtc.VideoSource$AspectRatio
com.dexterous.flutterlocalnotifications.models.NotificationDetails
org.webrtc.RtpReceiver
org.webrtc.YuvConverter$ShaderCallbacks
com.google.firebase.messaging.ktx.FirebaseMessagingKtxRegistrar
org.webrtc.JavaI420Buffer
org.webrtc.CandidatePairChangeEvent
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment
org.webrtc.Metrics
android.support.v4.media.AudioAttributesImplApi21Parcelizer
org.webrtc.EglBase10Impl$1FakeSurfaceHolder
org.webrtc.RTCStatsCollectorCallback
org.webrtc.RenderSynchronizer$Listener
com.google.firebase.installations.ktx.FirebaseInstallationsKtxRegistrar
org.webrtc.DataChannel$Buffer
com.cloudwebrtc.webrtc.GetUserMediaImpl$3
kotlin.coroutines.jvm.internal.BaseContinuationImpl
org.webrtc.JniHelper
org.webrtc.MediaCodecWrapperFactoryImpl
com.google.android.gms.common.api.internal.zzd
org.webrtc.GlUtil
org.webrtc.PeerConnection$IceServer
org.webrtc.PeerConnection$RtcpMuxPolicy
org.webrtc.RenderSynchronizer
org.webrtc.RtpTransceiver$RtpTransceiverInit
org.webrtc.AndroidVideoDecoder$1
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
org.webrtc.LibvpxVp9Decoder
org.webrtc.VideoEncoder$Capabilities
org.webrtc.EglBase$ConfigBuilder
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback
io.flutter.plugin.platform.SingleViewPresentation
androidx.fragment.app.DialogFragment
org.webrtc.AudioDecoderFactoryFactory
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils
org.webrtc.DataChannel
org.webrtc.Camera1Session$2
com.google.firebase.datatransport.TransportRegistrar
org.webrtc.RtpSender
org.webrtc.FrameEncryptor
org.webrtc.NativePeerConnectionFactory
org.webrtc.NetworkChangeDetector
org.webrtc.SurfaceViewRenderer
org.webrtc.StatsObserver
org.webrtc.MediaSource
org.webrtc.VideoFileRenderer
io.flutter.embedding.engine.FlutterOverlaySurface
org.webrtc.Camera2Session$CaptureSessionCallback
org.webrtc.AudioTrackSink
org.webrtc.RefCountDelegate
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper
com.cloudwebrtc.webrtc.GetUserMediaImpl$6
org.webrtc.Camera1Session$SessionState
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5
org.webrtc.NetworkMonitor$InstanceHolder
com.cloudwebrtc.webrtc.audio.AudioDeviceKind
org.webrtc.GlRectDrawer
org.webrtc.PlatformSoftwareVideoDecoderFactory$1
android.support.v4.media.session.MediaSessionCompat$QueueItem
io.flutter.plugins.urllauncher.UrlLauncherPlugin
com.dexterous.flutterlocalnotifications.models.NotificationAction
org.webrtc.PeerConnection$Observer
com.google.android.gms.maps.model.LatLng
androidx.browser.browseractions.BrowserActionsFallbackMenuView
org.webrtc.PeerConnection$PeerConnectionState
org.webrtc.PeerConnection$TlsCertPolicy
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
org.webrtc.JNILogging
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService
org.webrtc.RtpCapabilities$HeaderExtensionCapability
com.example.kivou_app.MainActivity
org.webrtc.MediaSource$State
org.webrtc.CameraEnumerationAndroid$1
org.webrtc.RtpTransceiver
org.webrtc.EglBase10Impl$EglConnection
org.webrtc.RendererCommon$1
org.webrtc.VideoEncoder$CodecSpecificInfoVP9
org.webrtc.RtpReceiver$Observer
org.webrtc.Camera1Helper
org.webrtc.VideoProcessor
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor
io.flutter.view.TextureRegistry$ImageTextureEntry
org.webrtc.Camera1Capturer
com.google.maps.android.ui.RotationLayout
org.webrtc.PeerConnectionFactory$Options
org.webrtc.ScreenCapturerAndroid
com.cloudwebrtc.webrtc.GetUserMediaImpl$5
org.webrtc.AudioEncoderFactoryFactory
com.cloudwebrtc.webrtc.utils.PermissionUtils$1
android.support.v4.media.RatingCompat
androidx.startup.InitializationProvider
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples
org.webrtc.SurfaceTextureHelper$3
org.webrtc.EglThread$ReleaseMonitor
com.cloudwebrtc.webrtc.DataChannelObserver$1
org.webrtc.PeerConnection$KeyType
org.webrtc.audio.WebRtcAudioEffects
androidx.media.AudioAttributesCompatParcelizer
org.webrtc.EglBase
org.webrtc.NetworkMonitor$2
com.tekartik.sqflite.SqflitePlugin
org.webrtc.PeerConnection$CandidateNetworkPolicy
com.google.android.gms.maps.GoogleMapOptions
org.webrtc.LibvpxVp9Encoder
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback
org.webrtc.CalledByNativeUnchecked
org.webrtc.NV12Buffer
org.webrtc.NetworkChangeDetectorFactory
org.webrtc.VideoEncoderFactory$VideoEncoderSelector
org.webrtc.MediaCodecWrapper
org.webrtc.CryptoOptions$Builder
org.webrtc.VideoCodecInfo
com.cloudwebrtc.webrtc.utils.Utils
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate
org.webrtc.VideoSource$1
android.support.v4.media.session.MediaSessionCompat$Token
org.webrtc.TextureBufferImpl$1
org.webrtc.GlGenericDrawer$ShaderType
com.cloudwebrtc.webrtc.record.FrameCapturer
org.webrtc.VideoCodecStatus
org.webrtc.VideoDecoderFallback
org.webrtc.MediaStreamTrack$State
org.webrtc.RTCStats
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider
org.webrtc.VideoSource
org.webrtc.NativeAndroidVideoTrackSource
com.google.android.gms.location.LocationRequest
org.webrtc.CallSessionFileRotatingLogSink
org.webrtc.Camera2Session$CameraStateCallback
org.webrtc.ScreenCapturerAndroid$1
com.google.firebase.components.ComponentDiscoveryService
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer
org.webrtc.Camera2Session
org.webrtc.IceCandidate
io.flutter.view.TextureRegistry$GLTextureConsumer
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback
org.webrtc.JniCommon
org.webrtc.MediaCodecUtils$1
com.google.firebase.installations.FirebaseInstallationsKtxRegistrar
org.webrtc.PeerConnectionDependencies
org.webrtc.audio.WebRtcAudioTrackUtils
org.webrtc.VideoEncoderFallback
org.webrtc.EglBase10$Context
org.webrtc.CryptoOptions$Srtp
org.webrtc.CryptoOptions$SFrame
org.webrtc.FrameCryptor$Observer
org.webrtc.PeerConnection$SignalingState
androidx.media.AudioAttributesImplBaseParcelizer
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver
org.webrtc.EncodedImage$Builder
org.webrtc.Camera1Session$1
org.webrtc.PeerConnectionFactory
org.webrtc.WrappedVideoDecoderFactory
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2
org.webrtc.PeerConnectionFactory$Builder
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
com.dexterous.flutterlocalnotifications.models.IconSource
org.webrtc.NativeLibrary$DefaultLoader
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor
io.flutter.view.FlutterCallbackInformation
androidx.lifecycle.DefaultLifecycleObserver
com.dexterous.flutterlocalnotifications.models.PersonDetails
org.webrtc.Camera2Capturer
androidx.core.app.CoreComponentFactory
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver
org.webrtc.ThreadUtils$2
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails
io.flutter.view.TextureRegistry$SurfaceProducer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3
org.webrtc.VideoEncoder$CodecSpecificInfoH264
org.webrtc.VideoEncoder$ScalingSettings
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor
org.webrtc.RtpCapabilities
org.webrtc.PeerConnectionFactory$ThreadInfo
com.dexterous.flutterlocalnotifications.utils.BooleanUtils
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory
org.webrtc.audio.JavaAudioDeviceModule$Builder
com.cloudwebrtc.webrtc.PeerConnectionObserver
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3
androidx.media.AudioAttributesImplApi21Parcelizer
org.webrtc.FileVideoCapturer
androidx.window.extensions.core.util.function.Consumer
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
org.webrtc.ThreadUtils
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper
com.cloudwebrtc.webrtc.utils.AnyThreadResult
org.webrtc.VideoFrame
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback
com.google.android.gms.auth.api.signin.GoogleSignInAccount
androidx.core.app.RemoteActionCompat
com.cloudwebrtc.webrtc.utils.ObjectType
org.webrtc.EglBase14Impl$Context
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException
org.webrtc.EglBase10$EglConnection
org.webrtc.CameraVideoCapturer$CameraEventsHandler
org.webrtc.CameraCapturer$7
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin
org.webrtc.CameraVideoCapturer$MediaRecorderHandler
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory
org.webrtc.NetworkMonitorAutoDetect$NetworkState
org.webrtc.VideoEncoderWrapper
org.webrtc.CameraVideoCapturer$CameraStatistics
androidx.media.AudioAttributesImplApi26Parcelizer
org.webrtc.EglRenderer$FrameListenerAndParams
org.webrtc.NetworkChangeDetector$Observer
org.webrtc.RendererCommon$RendererEvents
org.webrtc.EncodedImage
org.webrtc.RtpTransceiver$RtpTransceiverDirection
org.webrtc.DynamicBitrateAdjuster
org.webrtc.Camera2Enumerator
org.webrtc.PeerConnection$SdpSemantics
org.webrtc.CameraSession
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
org.webrtc.FrameDecryptor
com.google.firebase.messaging.FirebaseMessagingKtxRegistrar
io.flutter.plugins.pathprovider.PathProviderPlugin
org.webrtc.R
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingPlugin
org.webrtc.MediaStreamTrack$MediaType
org.webrtc.NetworkMonitor$NetworkObserver
org.webrtc.SurfaceTextureHelper$1
com.google.android.gms.common.annotation.KeepName
org.webrtc.NativeCapturerObserver
org.webrtc.VideoEncoder$RateControlParameters
com.google.android.gms.common.api.internal.BasePendingResult
org.webrtc.BuiltinAudioDecoderFactoryFactory
org.webrtc.Camera2Helper
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback
kotlinx.coroutines.android.AndroidDispatcherFactory
org.webrtc.RtcCertificatePem
org.webrtc.RefCounted
org.webrtc.RtpParameters$Encoding
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction
org.webrtc.VideoDecoder$Settings
org.webrtc.MediaCodecVideoDecoderFactory
com.google.firebase.concurrent.ExecutorsRegistrar
org.webrtc.GlShader
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4
org.webrtc.audio.AudioDeviceModule
org.webrtc.SurfaceTextureHelper$2
android.support.v4.media.AudioAttributesImplApi26Parcelizer
android.support.v4.media.AudioAttributesImplBaseParcelizer
android.support.v4.media.session.ParcelableVolumeInfo
org.webrtc.VideoEncoder$CodecSpecificInfoVP8
org.webrtc.CameraCapturer$1
org.webrtc.MediaCodecWrapperFactory
com.dexterous.flutterlocalnotifications.models.SoundSource
org.webrtc.WrappedNativeI420Buffer
com.cloudwebrtc.webrtc.MethodCallHandlerImpl
org.webrtc.PeerConnection$IceTransportsType
com.cloudwebrtc.webrtc.DataChannelObserver
com.google.android.datatransport.cct.CctBackendFactory
org.webrtc.EglRenderer$1
org.webrtc.VideoEncoder$Settings
org.webrtc.TextureBufferImpl$RefCountMonitor
org.webrtc.Logging$TraceLevel
org.webrtc.SoftwareVideoEncoderFactory$1
com.google.android.gms.common.api.internal.LifecycleCallback
com.cloudwebrtc.webrtc.GetUserMediaImpl$7
com.google.android.gms.common.GooglePlayServicesManifestException
com.cloudwebrtc.webrtc.GetUserMediaImpl
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar
com.google.android.gms.common.SupportErrorDialogFragment
org.webrtc.Histogram
com.dexterous.flutterlocalnotifications.models.Time
com.cloudwebrtc.webrtc.record.VideoFileRenderer
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
org.webrtc.Metrics$HistogramInfo
androidx.profileinstaller.ProfileInstallerInitializer
org.webrtc.HardwareVideoDecoderFactory$1
com.google.firebase.ktx.FirebaseCommonKtxRegistrar
org.webrtc.CalledByNative
org.webrtc.HardwareVideoEncoderFactory$1
org.webrtc.FrameCryptorFactory
androidx.annotation.Keep
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
org.webrtc.FrameCryptor
androidx.window.extensions.core.util.function.Predicate
org.webrtc.SimulcastVideoEncoderFactory
org.webrtc.RtpParameters
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails
androidx.core.graphics.drawable.IconCompat
com.dexterous.flutterlocalnotifications.models.DateTimeComponents
androidx.media.AudioAttributesImpl
org.webrtc.CameraCapturer$6
org.webrtc.MediaStream
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver
io.flutter.view.AccessibilityViewEmbedder
com.cloudwebrtc.webrtc.utils.EglUtils
android.support.v4.media.AudioAttributesCompatParcelizer
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled
org.webrtc.FecControllerFactoryFactoryInterface
io.flutter.plugins.imagepicker.ImagePickerFileProvider
org.webrtc.FramerateBitrateAdjuster
org.webrtc.YuvHelper
org.webrtc.ThreadUtils$1Result
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1
org.webrtc.GlUtil$GlOutOfMemoryException
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread
com.dexterous.flutterlocalnotifications.models.MessageDetails
com.cloudwebrtc.webrtc.utils.Callback
org.webrtc.Loggable
org.webrtc.RtpParameters$DegradationPreference
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
org.webrtc.EglBase10Impl$Context
com.it_nomads.fluttersecurestorage.FlutterSecureStoragePlugin
org.webrtc.ThreadUtils$1
org.webrtc.VideoFrameDrawer
org.webrtc.CryptoOptions
org.webrtc.VideoSink
com.cloudwebrtc.webrtc.GetUserMediaImpl$1
android.support.v4.media.MediaDescriptionCompat
org.webrtc.audio.JavaAudioDeviceModule
org.webrtc.CameraCapturer$4
androidx.core.graphics.drawable.IconCompatParcelizer
net.jonhanson.flutter_native_splash.FlutterNativeSplashPlugin
androidx.media.AudioAttributesCompat
org.webrtc.PeerConnection$PortPrunePolicy
org.webrtc.YuvConverter
org.webrtc.Predicate$1
org.webrtc.RendererCommon$GlDrawer
org.webrtc.H264Utils
org.webrtc.EglRenderer$2
io.flutter.view.TextureRegistry$SurfaceTextureEntry
org.webrtc.CameraVideoCapturer$CameraStatistics$1
org.webrtc.FileVideoCapturer$1
com.google.firebase.messaging.FirebaseMessaging
org.webrtc.VideoFrame$TextureBuffer
org.webrtc.PeerConnectionFactory$InitializationOptions
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements
com.google.firebase.FirebaseCommonRegistrar
org.webrtc.CameraEnumerationAndroid$ClosestComparator
org.webrtc.ApplicationContextProvider
org.webrtc.SoftwareVideoDecoderFactory$1
org.webrtc.PeerConnection$IceGatheringState
org.webrtc.LibvpxVp8Encoder
org.webrtc.FrameCryptorAlgorithm
com.cloudwebrtc.webrtc.R
org.webrtc.HardwareVideoEncoder$BusyCount
org.webrtc.VideoDecoder$DecodeInfo
org.webrtc.PlatformSoftwareVideoDecoderFactory
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation
org.webrtc.SurfaceTextureHelper
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate
org.webrtc.CameraEnumerationAndroid$CaptureFormat
androidx.versionedparcelable.CustomVersionedParcelable
org.webrtc.audio.VolumeLogger$LogVolumeTask
com.google.firebase.iid.FirebaseInstanceId
com.google.firebase.FirebaseCommonKtxRegistrar
org.webrtc.CameraCapturer$3
com.google.android.gms.common.api.GoogleApiActivity
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata
org.webrtc.FrameCryptor$FrameCryptionState
org.webrtc.MediaConstraints
org.webrtc.EglThread
org.webrtc.Empty
org.webrtc.FileVideoCapturer$VideoReader
org.webrtc.ThreadUtils$4
org.webrtc.GlTextureFrameBuffer
org.webrtc.NetworkMonitor$1
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback
androidx.media.AudioAttributesImplBase
org.webrtc.EglBase$EglConnection
org.webrtc.TextureBufferImpl$2
org.webrtc.RendererCommon$ScalingType
org.webrtc.VideoFrame$I420Buffer
com.cloudwebrtc.webrtc.GetUserMediaImpl$4
org.webrtc.NetworkChangeDetector$NetworkInformation
com.google.firebase.messaging.FirebaseMessagingService
org.webrtc.GlGenericDrawer
org.webrtc.PeerConnection$IceServer$Builder
org.webrtc.SdpObserver
com.dexterous.flutterlocalnotifications.models.NotificationStyle
org.webrtc.PeerConnection
io.flutter.view.TextureRegistry$ImageConsumer
android.support.v4.app.RemoteActionCompatParcelizer
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo
com.cloudwebrtc.webrtc.audio.AudioSwitchManager
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
org.webrtc.Priority
org.webrtc.audio.VolumeLogger
org.webrtc.CameraSession$CreateSessionCallback
org.webrtc.VideoFrame$Buffer
androidx.profileinstaller.ProfileInstallReceiver
org.webrtc.NativeLibrary
org.webrtc.GlGenericDrawer$ShaderCallbacks
io.flutter.plugins.GeneratedPluginRegistrant
org.webrtc.audio.WebRtcAudioTrack
com.dexterous.flutterlocalnotifications.models.ScheduleMode
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange
org.webrtc.NativeLibraryLoader
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate
org.webrtc.AddIceObserver
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements
org.webrtc.Camera1Session
org.webrtc.ThreadUtils$1CaughtException
org.webrtc.DtmfSender
org.webrtc.StatsReport$Value
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation
org.webrtc.Camera2Session: int fpsUnitFactor
org.webrtc.HardwareVideoEncoder: int width
org.webrtc.audio.WebRtcAudioRecord: int audioFormat
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] $VALUES
org.webrtc.AndroidVideoDecoder$FrameInfo: int rotation
org.webrtc.RtpParameters: java.util.List headerExtensions
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer repeatIntervalMilliseconds
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode inexactAllowWhileIdle
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext egl14Context
org.webrtc.PeerConnection: long nativePeerConnection
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatTitle
org.webrtc.audio.WebRtcAudioUtils: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PERSON
org.webrtc.PeerConnection$AdapterType: java.util.Map BY_BITMASK
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_4G
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String username
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_WIFI
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String USES_CHRONOMETER
org.webrtc.VideoFileRenderer: android.os.Handler fileThreadHandler
org.webrtc.SurfaceTextureHelper$2: org.webrtc.SurfaceTextureHelper this$0
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean enableVolumeLogger
org.webrtc.Camera1Session: int cameraId
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_BLUE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_DATE_TIME
org.webrtc.StatsReport: java.lang.String id
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.ThreadUtils$1: java.lang.Thread val$thread
org.webrtc.CameraCapturer: org.webrtc.CameraSession$CreateSessionCallback createSessionCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SILENT
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.io.RandomAccessFile mediaFile
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stunCandidateKeepaliveIntervalMs
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
org.webrtc.YuvConverter$ShaderCallbacks: int coeffsLoc
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] $VALUES
org.webrtc.PeerConnection$IceServer: java.lang.String password
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
com.google.crypto.tink.proto.AesCtrHmacAeadKey: int version_
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: int version_
com.google.crypto.tink.proto.AesCtrKey: int PARAMS_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ADDITIONAL_FLAGS
org.webrtc.SurfaceTextureHelper$3: org.webrtc.SurfaceTextureHelper this$0
org.webrtc.Camera2Capturer: android.hardware.camera2.CameraManager cameraManager
org.webrtc.VideoFileRenderer: java.lang.String outputFileName
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.lang.String frameCryptorId
org.webrtc.VideoFrameDrawer: int renderHeight
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioMode
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType type
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean createNewReader
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder fallback
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MEMORY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_LAUNCHED_APP
com.google.crypto.tink.proto.Keyset: int primaryKeyId_
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions cryptoOptions
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List streamIds
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IDLE
org.webrtc.PeerConnection$RTCConfiguration: boolean enableDscp
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.audio.AudioDeviceModule audioDeviceModule
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
com.google.crypto.tink.proto.KeyData: int TYPE_URL_FIELD_NUMBER
org.webrtc.SurfaceEglRenderer: boolean isFirstFrameRendered
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
org.webrtc.HardwareVideoEncoderFactory: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LARGE_ICON_ERROR_CODE
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.VideoTrack videoTrack
org.webrtc.EglBase$ConfigBuilder: boolean supportsPixelBuffer
org.webrtc.SurfaceViewRenderer: boolean enableFixedSize
org.webrtc.VideoEncoder$ScalingSettings: boolean on
org.webrtc.CryptoOptions$Srtp: boolean enableGcmCryptoSuites
org.webrtc.Logging$1: int[] $SwitchMap$org$webrtc$Logging$Severity
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_SCREEN
com.google.android.gms.location.LocationSettingsStates: android.os.Parcelable$Creator CREATOR
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_HIGH_DIFF_WEIGHT
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.lang.String TAG
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String id
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String EXACT_ALARMS_PERMISSION_ERROR_CODE
org.webrtc.Camera2Session: android.os.Handler cameraThreadHandler
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm AES_CBC
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataY
org.webrtc.Metrics$HistogramInfo: int bucketCount
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: int MUTABLE_FLAG_MASK
org.webrtc.HardwareVideoEncoder: long forcedKeyFrameNs
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String RESULT_RECEIVER
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int TYPE_URL_FIELD_NUMBER
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
org.webrtc.IceCandidateErrorEvent: int errorCode
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: java.lang.String ownerTag
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int DISPLAY_FLAGS
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_FPS
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: java.lang.Integer decodeTimeMs
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_ALPHA
org.webrtc.VideoFrameDrawer: android.graphics.Point renderSize
org.webrtc.CameraVideoCapturer$CameraStatistics: int frameCount
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec encoder
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String groupKey
org.webrtc.JavaI420Buffer: int width
org.webrtc.AndroidVideoDecoder: java.lang.String TAG
org.webrtc.CameraCapturer$9: org.webrtc.CameraSession val$oldSession
org.webrtc.RtpParameters$HeaderExtension: boolean encrypted
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_THRESHOLD
org.webrtc.audio.WebRtcAudioTrack: int BUFFERS_PER_SECOND
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_LINES
org.webrtc.HardwareVideoEncoder: int MAX_VIDEO_FRAMERATE
org.webrtc.audio.JavaAudioDeviceModule$Builder: java.util.concurrent.ScheduledExecutorService scheduler
com.google.crypto.tink.proto.AesCmacKeyFormat: com.google.crypto.tink.proto.AesCmacKeyFormat DEFAULT_INSTANCE
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useLowLatency
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType DISCONNECTED
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback mobileNetworkCallback
com.google.crypto.tink.proto.AesCmacKeyFormat: com.google.crypto.tink.proto.AesCmacParams params_
org.webrtc.EglThread: boolean renderWindowOpen
org.webrtc.VideoDecoder$DecodeInfo: long renderTimeMs
org.webrtc.PeerConnection$RTCConfiguration: int iceBackupCandidatePairPingInterval
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer progress
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $VALUES
org.webrtc.ThreadUtils$ThreadChecker: java.lang.Thread thread
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean playSound
org.webrtc.VideoFrameBufferType: int I010
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
org.webrtc.VideoFileRenderer$1: org.webrtc.EglBase$Context val$sharedContext
com.google.crypto.tink.proto.KmsAeadKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
org.webrtc.EncodedImage: org.webrtc.RefCountDelegate refCountDelegate
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase$Context sharedContext
org.webrtc.PeerConnection: java.util.List localStreams
org.webrtc.EglRenderer: long LOG_INTERVAL_SEC
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: long[] vibrationPattern
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.SurfaceEglRenderer: int frameRotation
org.webrtc.EglBase: java.lang.Object lock
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ID
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLSurface currentSurface
org.webrtc.H264Utils: java.lang.String H264_LEVEL_3_1
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.PermissionRequestListener callback
org.webrtc.EglRenderer: android.graphics.Matrix drawMatrix
org.webrtc.Camera2Enumerator: double NANO_SECONDS_PER_SECOND
org.webrtc.PeerConnection$RTCConfiguration: boolean pruneTurnPorts
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_LOOPBACK
org.webrtc.audio.WebRtcAudioRecord: java.lang.String TAG
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxFramerate
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
org.webrtc.Camera2Enumerator: java.util.Map cachedSupportedFormats
org.webrtc.audio.JavaAudioDeviceModule: android.media.AudioManager audioManager
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState CLOSED
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] $VALUES
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactoryWithoutEglContext
org.webrtc.VideoEncoder$EncoderInfo: int requestedResolutionAlignment
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.HardwareVideoEncoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
org.webrtc.CryptoOptions$Builder: boolean requireFrameEncryption
org.webrtc.VideoFileRenderer: org.webrtc.YuvConverter yuvConverter
org.webrtc.VideoEncoder$Settings: int numberOfCores
org.webrtc.AndroidVideoDecoder: android.view.Surface surface
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DISPATCHER_HANDLE
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_3G
com.google.crypto.tink.proto.AesGcmSivKeyFormat: com.google.crypto.tink.proto.AesGcmSivKeyFormat DEFAULT_INSTANCE
org.webrtc.MediaCodecVideoDecoderFactory: java.lang.String TAG
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$Observer observer
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLConfig eglConfig
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind EARPIECE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.Time repeatTime
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean $assertionsDisabled
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _rotation
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] $VALUES
com.cloudwebrtc.webrtc.utils.PermissionUtils: int requestCode
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Integer titleColor
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TEXT
org.webrtc.RtcCertificatePem: java.lang.String privateKey
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection$Callback mediaProjectionCallback
kotlinx.coroutines.internal.Segment: int cleanedAndPointers
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSIONS
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker decoderThreadChecker
org.webrtc.NetworkMonitorAutoDetect: java.util.Set availableNetworks
org.webrtc.VideoCodecInfo: java.lang.String H264_LEVEL_3_1
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.LowLatencyAudioBufferManager bufferManager
org.webrtc.AndroidVideoDecoder: java.lang.String codecName
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: androidx.lifecycle.ProcessLifecycleOwner this$0
org.webrtc.H264Utils: java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
org.webrtc.H264Utils: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_CAPTURER_THREAD_NAME
org.webrtc.HardwareVideoEncoderFactory: java.util.List H264_HW_EXCEPTION_MODELS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String scheduledDateTime
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean ongoing
com.google.android.gms.location.LocationSettingsRequest: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind WIRED_HEADSET
org.webrtc.CameraCapturer: int openAttemptsRemaining
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: java.lang.String val$id
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkMonitor this$0
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType networkPreference
org.webrtc.VideoEncoder$RateControlParameters: org.webrtc.VideoEncoder$BitrateAllocation bitrate
org.webrtc.MediaCodecUtils: java.lang.String INTEL_PREFIX
org.webrtc.CameraEnumerationAndroid: java.lang.String TAG
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_TEXTURE_BUFFER
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean manageAudioFocus
org.webrtc.GlTextureFrameBuffer: int frameBufferId
org.webrtc.VideoFrame: int rotation
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int maxBitrateBps
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP9
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState KEYRATCHETED
org.webrtc.AndroidVideoDecoder: java.lang.Exception shutdownException
org.webrtc.RtpSender: long nativeRtpSender
org.webrtc.EglThread: java.util.List pendingRenderUpdates
kotlinx.coroutines.channels.BufferedChannel: long sendersAndCloseStatus
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_AUDIO
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String MINUTE
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Number
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PAYLOAD
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack cachedTrack
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_2G
org.webrtc.audio.WebRtcAudioRecord: android.content.Context context
org.webrtc.SurfaceTextureHelper$1: boolean val$alignTimestamps
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource FlutterBitmapAsset
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CALLBACK_HANDLE
org.webrtc.EglRenderer: org.webrtc.EglBase eglBase
org.webrtc.RtpTransceiver: long nativeRtpTransceiver
org.webrtc.EglRenderer: java.util.ArrayList frameListeners
com.cloudwebrtc.webrtc.utils.AnyThreadResult: io.flutter.plugin.common.MethodChannel$Result result
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: org.webrtc.audio.WebRtcAudioRecord this$0
org.webrtc.audio.WebRtcAudioTrack: android.content.Context context
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.GlGenericDrawer: java.lang.String INPUT_TEXTURE_COORDINATE_NAME
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType String
org.webrtc.Camera1Session: org.webrtc.Histogram camera1ResolutionHistogram
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableVibration
org.webrtc.VideoFrameDrawer: android.graphics.Matrix renderMatrix
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean fullScreenIntent
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_WARNING
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
org.webrtc.CameraCapturer: java.lang.Object stateLock
org.webrtc.ScreenCapturerAndroid: int width
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String START_FOREGROUND_SERVICE
org.webrtc.SoftwareVideoDecoderFactory: java.lang.String TAG
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] data
com.google.crypto.tink.proto.AesEaxKey: int KEY_VALUE_FIELD_NUMBER
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String fieldTrials
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VISIBILITY
com.cloudwebrtc.webrtc.record.FrameCapturer: boolean gotFrame
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType kind
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjectionManager mediaProjectionManager
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_NOISE_SUPPRESSOR
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_APICALL
org.webrtc.GlGenericDrawer: java.lang.String genericFragmentSource
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TIMER
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.MediaStream mediaStream
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkStatePredictorFactoryFactory networkStatePredictorFactoryFactory
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean showBadge
com.google.crypto.tink.proto.Keyset$Key: int OUTPUT_PREFIX_TYPE_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ARE_NOTIFICATIONS_ENABLED_METHOD
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
org.webrtc.NetworkChangeDetector$NetworkInformation: long handle
org.webrtc.EglRenderer$EglSurfaceCreation: java.lang.Object surface
org.webrtc.WrappedNativeI420Buffer: int height
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder encoder
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: android.content.Context context
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_PRANSWER
org.webrtc.video.CustomVideoEncoderFactory: com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper simulcastVideoEncoderFactoryWrapper
com.google.crypto.tink.proto.AesCmacKey: int KEY_VALUE_FIELD_NUMBER
com.google.crypto.tink.proto.KeyTemplate: com.google.crypto.tink.shaded.protobuf.ByteString value_
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: boolean keepAlive
org.webrtc.SoftwareVideoEncoderFactory: long nativeFactory
com.google.crypto.tink.proto.AesCtrKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String TAG
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicInteger nextSchedulerId
org.webrtc.DataChannel: long nativeDataChannel
com.cloudwebrtc.webrtc.CameraEventsHandler: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState state
org.webrtc.FrameCryptor: long nativeFrameCryptor
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _height
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics sdpSemantics
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MATCH_DATE_TIME_COMPONENTS
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.KmsAeadKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_VIBRATION
com.google.crypto.tink.proto.KeyData: int keyMaterialType_
org.webrtc.NetworkMonitor: int numObservers
com.cloudwebrtc.webrtc.GetUserMediaImpl: int minAPILevel
org.webrtc.AndroidVideoDecoder: java.lang.Object renderedTextureMetadataLock
org.webrtc.TextureBufferImpl$1: java.lang.Runnable val$releaseCallback
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
org.webrtc.NetworkMonitorAutoDetect: java.lang.String TAG
org.webrtc.Camera2Session: int height
com.google.crypto.tink.proto.AesEaxParams: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.google.crypto.tink.proto.KeysetInfo: int primaryKeyId_
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_STOP
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType AV1
org.webrtc.VideoCodecMimeType: java.lang.String mimeType
org.webrtc.CameraVideoCapturer$CameraStatistics: int freezePeriodCount
org.webrtc.FrameCryptor: long observerPtr
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropX
org.webrtc.audio.LowLatencyAudioBufferManager: int prevUnderrunCount
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.Class audioDeviceClass
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CONNECTING
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String summaryText
org.webrtc.Camera1Session: android.hardware.Camera$CameraInfo info
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode alarmClock
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: com.dexterous.flutterlocalnotifications.models.PersonDetails person
org.webrtc.EglRenderer: java.lang.Object threadLock
com.google.crypto.tink.proto.AesCtrKey: int KEY_VALUE_FIELD_NUMBER
org.webrtc.VideoFrameDrawer$1: int[] $SwitchMap$org$webrtc$VideoFrame$TextureBuffer$Type
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback val$callback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MAX_PROGRESS
com.google.crypto.tink.proto.AesEaxParams: com.google.crypto.tink.proto.AesEaxParams DEFAULT_INSTANCE
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer high
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource ByteArray
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isFirstFrameRendered
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ACTION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLAY_SOUND
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean released
org.webrtc.FramerateBitrateAdjuster: int DEFAULT_FRAMERATE_FPS
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory mFactory
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] $VALUES
com.google.android.gms.maps.model.MapStyleOptions: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map mMap
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: android.media.AudioTrack originalTrack
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection INACTIVE
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType underlyingTypeForVpn
org.webrtc.ScreenCapturerAndroid: boolean isDisposed
org.webrtc.YuvConverter: java.lang.String FRAGMENT_SHADER
org.webrtc.NV12Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.audio.LowLatencyAudioBufferManager: int bufferIncreaseCounter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND_SOURCE
com.google.crypto.tink.proto.AesEaxKey: int PARAMS_FIELD_NUMBER
org.webrtc.Camera2Session: org.webrtc.CameraSession$CreateSessionCallback callback
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.EglBase$Context sharedContext
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticWorkerThread
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableLights
org.webrtc.HardwareVideoEncoder: org.webrtc.HardwareVideoEncoder$BusyCount outputBuffersBusyCount
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer audioAttributesUsage
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CONTEXTUAL
org.webrtc.GlGenericDrawer: int inPosLocation
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List actionInputs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ID
org.webrtc.DynamicBitrateAdjuster: double deviationBytes
org.webrtc.PeerConnection$RTCConfiguration: boolean presumeWritableWhenFullyRelayed
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map mPeerConnectionObservers
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder primary
org.webrtc.VideoEncoder$ScalingSettings: org.webrtc.VideoEncoder$ScalingSettings OFF
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long millisecondsSinceEpoch
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_CRITICAL
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String bigText
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localTracks
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] $VALUES
com.cloudwebrtc.webrtc.DataChannelObserver$1: int[] $SwitchMap$org$webrtc$DataChannel$State
org.webrtc.MediaCodecUtils: int[] ENCODER_COLOR_FORMATS
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus REQUEST_SLI
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String description
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_TEXT
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ZONED_SCHEDULE_METHOD
com.google.crypto.tink.proto.HmacKeyFormat: int keySize_
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] $VALUES
com.google.crypto.tink.proto.AesCtrHmacAeadKey: int AES_CTR_KEY_FIELD_NUMBER
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_INSECURE_NO_CHECK
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer visibility
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType ECDSA
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataY
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PERMISSION_VIDEO
com.cloudwebrtc.webrtc.record.FrameCapturer: java.io.File file
org.webrtc.PeerConnection$RTCConfiguration: int iceCandidatePoolSize
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSED
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String contentTitle
com.google.crypto.tink.proto.HmacKeyFormat: com.google.crypto.tink.proto.HmacParams params_
org.webrtc.VideoDecoder$Settings: int height
org.webrtc.AndroidVideoDecoder: int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: int MEMOIZED_SERIALIZED_SIZE_MASK
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy REQUIRE
org.webrtc.TextureBufferImpl: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioAttributes audioAttributes
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $VALUES
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.CameraCapturer$8: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
org.webrtc.AndroidVideoDecoder: int DEQUEUE_INPUT_TIMEOUT_US
org.webrtc.HardwareVideoEncoder: java.util.concurrent.BlockingDeque outputBuilders
org.webrtc.JavaI420Buffer: int strideU
org.webrtc.CameraCapturer: int MAX_OPEN_CAMERA_ATTEMPTS
org.webrtc.HardwareVideoEncoder: int height
org.webrtc.IceCandidate: java.lang.String sdp
org.webrtc.EglBase: int[] CONFIG_RECORDABLE
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StartTimeMsHistogram
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService executor
org.webrtc.Camera2Session: boolean isCameraFrontFacing
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode exact
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLSurface eglSurface
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec audioEncoder
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_BASELINE_3_1
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.GlGenericDrawer: java.lang.String INPUT_VERTEX_COORDINATE_NAME
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropHeight
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_CONVERSATION
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1CaughtException val$caughtException
org.webrtc.Camera1Session: android.os.Handler cameraThreadHandler
kotlinx.coroutines.JobSupport: java.lang.Object _state
com.google.crypto.tink.proto.AesGcmSivKey: int version_
org.webrtc.PeerConnection$AdapterType: java.lang.Integer bitMask
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $VALUES
org.webrtc.RenderSynchronizer: java.lang.Object lock
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
org.webrtc.HardwareVideoEncoder: int stride
org.webrtc.EglRenderer: java.lang.Object layoutLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.RepeatInterval repeatInterval
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioFormat
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List sendEncodings
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference BALANCED
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableLights
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLDisplay eglDisplay
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.AesCtrHmacAeadKey: int VERSION_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_APP_LAUNCH_DETAILS_METHOD
org.webrtc.VideoEncoder$RateControlParameters: double framerateFps
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Loggable loggable
org.webrtc.FileVideoCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.Camera1Session$1: org.webrtc.Camera1Session this$0
org.webrtc.IceCandidateErrorEvent: java.lang.String errorText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_BIG_TEXT
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory primary
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int keyId_
org.webrtc.SurfaceTextureHelper: org.webrtc.YuvConverter yuvConverter
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean requestVPN
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameWidth
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp rtcp
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: java.util.Map defaultInstanceMap
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_LIGHTS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLATFORM_SPECIFICS
org.webrtc.HardwareVideoEncoder: int frameSizeBytes
org.webrtc.PeerConnection$IceServer: java.util.List tlsEllipticCurves
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraStatistics cameraStatistics
org.webrtc.SurfaceEglRenderer: java.lang.Object layoutLock
com.google.crypto.tink.proto.XChaCha20Poly1305Key: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_FORMAT
com.google.crypto.tink.proto.Keyset$Key: com.google.crypto.tink.proto.Keyset$Key DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] $VALUES
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
org.webrtc.PeerConnection$RTCConfiguration: boolean activeResetSrtpParams
com.google.crypto.tink.proto.KmsAeadKeyFormat: com.google.crypto.tink.proto.KmsAeadKeyFormat DEFAULT_INSTANCE
org.webrtc.ThreadUtils$3: java.util.concurrent.CountDownLatch val$barrier
com.google.android.gms.maps.model.VisibleRegion: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String key
org.webrtc.HardwareVideoEncoder: java.lang.String TAG
org.webrtc.Camera2Enumerator: android.content.Context context
org.webrtc.RtpParameters$Encoding: java.lang.Long ssrc
org.webrtc.EglThread$HandlerWithExceptionCallbacks: java.util.List exceptionCallbacks
org.webrtc.YuvConverter: org.webrtc.GlTextureFrameBuffer i420TextureFrameBuffer
org.webrtc.SurfaceTextureHelper$1: org.webrtc.YuvConverter val$yuvConverter
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderType currentShaderType
org.webrtc.VideoDecoderFallback: org.webrtc.VideoDecoder fallback
org.webrtc.PeerConnectionFactory$InitializationOptions: boolean enableInternalTracer
org.webrtc.CameraCapturer: android.os.Handler uiThreadHandler
com.google.crypto.tink.proto.AesEaxKeyFormat: int keySize_
org.webrtc.audio.WebRtcAudioRecord: int CHECK_REC_STATUS_DELAY_MS
org.webrtc.VideoFileRenderer: java.io.FileOutputStream videoOutFile
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int oldHeight
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_branch
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Loggable loggable
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_DETAILS
org.webrtc.WrappedNativeI420Buffer: int width
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType YUV
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int OUTPUT_PREFIX_TYPE_FIELD_NUMBER
com.google.crypto.tink.proto.AesGcmSivKeyFormat: int VERSION_FIELD_NUMBER
org.webrtc.RenderSynchronizer: java.lang.String TAG
com.google.android.gms.location.LocationResult: android.os.Parcelable$Creator CREATOR
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$Observer observer
com.google.crypto.tink.proto.AesGcmKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoCodecInfo info
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.nio.channels.FileChannel mediaFileChannel
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceGatheringState
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_SHOW_BADGE
org.webrtc.PeerConnection$RTCConfiguration: int iceConnectionReceivingTimeout
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference degradationPreference
org.webrtc.CameraCapturer: java.lang.String pendingCameraName
com.google.crypto.tink.proto.KeyTypeEntry: java.lang.String catalogueName_
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: org.webrtc.MediaStream val$mediaStream
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean playSound
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_NONE
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus OK
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Boolean
org.webrtc.H264Utils: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxVoiceCallVolume
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType RGB
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_METHOD
com.cloudwebrtc.webrtc.DataChannelObserver: java.util.ArrayList eventQueue
org.webrtc.CameraCapturer: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress permissionRequestProgress
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableTimeMs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONGOING
org.webrtc.audio.VolumeLogger: java.util.Timer timer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_ERROR_CODE
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String GRANT_RESULTS
org.webrtc.VideoCodecStatus: int number
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_SIZE
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.os.Handler handler
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropWidth
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy turnPortPrunePolicy
org.webrtc.HardwareVideoEncoder: int MAX_ENCODER_Q_SIZE
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object bigPicture
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: android.content.Context context
org.webrtc.DtmfSender: long nativeDtmfSender
org.webrtc.VideoFileRenderer: android.os.HandlerThread fileThread
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType currentConnectionType
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: org.webrtc.VideoTrack videoTrack
org.webrtc.Predicate$1: org.webrtc.Predicate this$0
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String key
com.google.crypto.tink.proto.KeyData: java.lang.String typeUrl_
org.webrtc.HardwareVideoEncoder: java.lang.Integer yuvColorFormat
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NOHOST
com.google.crypto.tink.proto.AesCmacKey: int VERSION_FIELD_NUMBER
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] $VALUES
org.webrtc.Camera2Session: int width
kotlinx.coroutines.InvokeOnCancelling: int _invoked
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minBitrateBps
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.view.WindowManager windowManager
com.google.crypto.tink.proto.KeyTemplate: int VALUE_FIELD_NUMBER
org.webrtc.audio.WebRtcAudioTrack: int AUDIO_TRACK_START
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency scheduledNotificationRepeatFrequency
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList mArray
org.webrtc.RtpCapabilities: java.util.List headerExtensions
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface surface
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean ignoringFence
org.webrtc.Camera1Enumerator: java.lang.String TAG
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ANSWER
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: org.webrtc.audio.WebRtcAudioTrack this$0
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoInput
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int frameRotation
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor frameCryptor
com.cloudwebrtc.webrtc.GetUserMediaImpl: int CAPTURE_PERMISSION_REQUEST_CODE
org.webrtc.DataChannel$Init: int maxRetransmits
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer this$0
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
org.webrtc.CameraCapturer$1: org.webrtc.CameraCapturer this$0
androidx.fragment.app.BackStackRecordState: android.os.Parcelable$Creator CREATOR
org.webrtc.Camera2Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.Camera2Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STATEINFO
com.google.crypto.tink.proto.AesCmacKey: com.google.crypto.tink.proto.AesCmacParams params_
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel eventChannel
org.webrtc.CameraCapturer: boolean firstFrameObserved
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULED_NOTIFICATIONS
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.google.crypto.tink.proto.AesCtrKeyFormat: int PARAMS_FIELD_NUMBER
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType LOOPBACK
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String text
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus LEVEL_EXCEEDED
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.plugin.common.BinaryMessenger messenger
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String icon
org.webrtc.CameraCapturer: int framerate
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState RUNNING
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy tcpCandidatePolicy
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long calledAt
com.google.crypto.tink.proto.AesCtrKeyFormat: com.google.crypto.tink.proto.AesCtrKeyFormat DEFAULT_INSTANCE
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor outputSamplesInterceptor
org.webrtc.Camera1Session: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_LOW_VALUE_WEIGHT
org.webrtc.AndroidVideoDecoder: boolean running
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource DrawableResource
org.webrtc.EncodedImage: java.lang.Integer qp
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback audioSamplesReadyCallback
org.webrtc.GlTextureFrameBuffer: int height
org.webrtc.Camera1Session: boolean firstFrameReported
com.google.crypto.tink.proto.AesGcmKey: int VERSION_FIELD_NUMBER
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int STATUS_FIELD_NUMBER
com.google.crypto.tink.proto.EncryptedKeyset: com.google.crypto.tink.proto.KeysetInfo keysetInfo_
com.google.crypto.tink.proto.KeyTypeEntry: boolean newKeyAllowed_
org.webrtc.audio.WebRtcAudioManager: java.lang.String TAG
org.webrtc.MediaCodecUtils: java.lang.String EXYNOS_PREFIX
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoSource$AspectRatio: org.webrtc.VideoSource$AspectRatio UNDEFINED
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteStreams
kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_CALLBACK_HANDLE_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE_BITMAP_SOURCE
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int oldWidth
kotlinx.coroutines.channels.BufferedChannel: long receivers
com.google.crypto.tink.proto.KeysetInfo: com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList keyInfo_
org.webrtc.audio.WebRtcAudioTrack: int CALLBACK_BUFFER_SIZE_MS
com.google.crypto.tink.proto.EncryptedKeyset: int ENCRYPTED_KEYSET_FIELD_NUMBER
org.webrtc.audio.WebRtcAudioRecord: int CALLBACK_BUFFER_SIZE_MS
org.webrtc.RtpParameters$Codec: int payloadType
org.webrtc.VideoFrameDrawer: int renderWidth
com.google.crypto.tink.proto.AesGcmSivKey: com.google.crypto.tink.proto.AesGcmSivKey DEFAULT_INSTANCE
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: java.lang.String typeName
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory
org.webrtc.AndroidVideoDecoder: int width
org.webrtc.NV21Buffer: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.PeerConnectionFactory$Options: boolean disableNetworkMonitor
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_AUDIO
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduleMode scheduleMode
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean isRunning
org.webrtc.FileVideoCapturer: java.util.Timer timer
org.webrtc.RtpParameters: java.util.List codecs
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Context applicationContext
org.webrtc.MediaStreamTrack: long nativeTrack
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int height
org.webrtc.VideoFrameBufferType: int I410
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer screencastMinBitrate
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.content.Context context
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
com.google.crypto.tink.proto.AesEaxKeyFormat: com.google.crypto.tink.proto.AesEaxKeyFormat DEFAULT_INSTANCE
org.webrtc.AndroidVideoDecoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean trimOnMemoryPressure
org.webrtc.NetworkMonitorAutoDetect: java.lang.String wifiSSID
org.webrtc.SurfaceViewRenderer: int surfaceWidth
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.SoftwareVideoEncoderFactory softwareVideoEncoderFactory
org.webrtc.AndroidVideoDecoder: java.lang.Object dimensionLock
org.webrtc.PeerConnection$RTCConfiguration: java.util.List iceServers
com.google.crypto.tink.proto.AesGcmKeyFormat: int version_
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN_CELLULAR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DAY
io.flutter.embedding.engine.FlutterOverlaySurface: int id
org.webrtc.SurfaceEglRenderer: java.lang.String TAG
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_FREEZE_REPORT_TIMOUT_MS
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledFuture future
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.util.LongSparseArray renders
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: int AES_CTR_KEY_FORMAT_FIELD_NUMBER
org.webrtc.RtpParameters$Rtcp: boolean reducedSize
org.webrtc.YuvConverter: java.lang.String TAG
org.webrtc.ContextUtils: android.content.Context applicationContext
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int KEY_ID_FIELD_NUMBER
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int audioFormat
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Inbox
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HIDE_EXPANDED_LARGE_ICON
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioEncoderFactoryFactory audioEncoderFactoryFactory
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Byte
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
com.google.crypto.tink.proto.Keyset: com.google.crypto.tink.proto.Keyset DEFAULT_INSTANCE
org.webrtc.EglRenderer$2: org.webrtc.EglRenderer this$0
com.google.android.gms.internal.location.zzeg: android.os.Parcelable$Creator CREATOR
org.webrtc.EglRenderer: boolean mirrorVertically
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isDisposed
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ALLOW_GENERATED_REPLIES
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableAec
com.google.crypto.tink.proto.KeyTypeEntry: int KEY_MANAGER_VERSION_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String INPUTS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_BLUE
org.webrtc.VideoCodecInfo: java.util.Map params
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.ConnectivityManager connectivityManager
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoderFactory fallback
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.ArrayDeque imageReaderQueue
com.cloudwebrtc.webrtc.GetUserMediaImpl$7: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
com.cloudwebrtc.webrtc.CameraEventsHandler: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0
org.webrtc.VideoEncoder$Settings: int maxFramerate
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_BASELINE
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State LIVE
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate wifiDirectManagerDelegate
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] $VALUES
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack audioTrack
org.webrtc.audio.WebRtcAudioRecord: int DEFAULT_AUDIO_SOURCE
org.webrtc.Logging: org.webrtc.Logging$Severity loggableSeverity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_TIME
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource Uri
org.webrtc.MediaCodecUtils: java.lang.String[] SOFTWARE_IMPLEMENTATION_PREFIXES
org.webrtc.YuvConverter$ShaderCallbacks: float stepSize
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_CELLULAR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_PROGRESS
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState DISCONNECTED
org.webrtc.ScreenCapturerAndroid: android.hardware.display.VirtualDisplay virtualDisplay
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.ProcessLifecycleOwner$attach$1: androidx.lifecycle.ProcessLifecycleOwner this$0
org.webrtc.PeerConnection$RTCConfiguration: int maxIPv6Networks
org.webrtc.RenderSynchronizer: float DEFAULT_TARGET_FPS
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.Long timestamp
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_NONE
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ticker
org.webrtc.audio.VolumeLogger$LogVolumeTask: org.webrtc.audio.VolumeLogger this$0
com.google.crypto.tink.proto.AesGcmKeyFormat: int keySize_
org.webrtc.CandidatePairChangeEvent: int estimatedDisconnectedTimeMs
org.webrtc.MediaStream: java.util.List audioTracks
org.webrtc.EglRenderer: long statisticsStartTimeNs
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String nativeLibraryName
com.google.crypto.tink.proto.AesSivKeyFormat: com.google.crypto.tink.proto.AesSivKeyFormat DEFAULT_INSTANCE
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$EglConnection eglConnection
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink listener
org.webrtc.SurfaceTextureHelper: android.os.Handler handler
org.webrtc.AndroidVideoDecoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
com.cloudwebrtc.webrtc.PeerConnectionObserver: com.cloudwebrtc.webrtc.StateProvider stateProvider
org.webrtc.EglBase14Impl: android.opengl.EGLSurface eglSurface
org.webrtc.VideoSource: java.lang.Object videoProcessorLock
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_URI
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: int WIFI_P2P_NETWORK_HANDLE
org.webrtc.EglBase: int[] CONFIG_PIXEL_RGBA_BUFFER
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataV
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_UNKNOWN
org.webrtc.PeerConnectionFactory$Options: boolean disableEncryption
org.webrtc.audio.WebRtcAudioTrack: long nativeAudioTrack
org.webrtc.SurfaceTextureHelper: int textureHeight
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean muxerStarted
org.webrtc.VideoEncoder$Capabilities: boolean lossNotification
org.webrtc.HardwareVideoEncoderFactory$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
org.webrtc.NetworkMonitorAutoDetect: boolean isRegistered
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.content.Context context
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14$Context sharedContext
com.google.android.gms.internal.location.zzl: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $VALUES
org.webrtc.MediaCodecUtils: int[] TEXTURE_COLOR_FORMATS
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] $VALUES
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService executor
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
com.google.crypto.tink.proto.HmacKey: com.google.crypto.tink.proto.HmacParams params_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelId
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState STOPPED
com.cloudwebrtc.webrtc.DataChannelObserver: org.webrtc.DataChannel dataChannel
org.webrtc.SurfaceTextureHelper: java.lang.Runnable setListenerRunnable
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioProcessingFactory audioProcessingFactory
org.webrtc.CameraCapturer: org.webrtc.CapturerObserver capturerObserver
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String TAG
com.google.crypto.tink.proto.AesEaxKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareAcousticEchoCanceler
org.webrtc.SurfaceViewRenderer: int rotatedFrameWidth
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_UNKNOWN
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioDeviceInfo preferredDevice
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean VERBOSE_LOGS
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory primary
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $VALUES
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy NO_PRUNE
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] $VALUES
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.Integer id
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AcousticEchoCanceler aec
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_START
org.webrtc.RtpParameters: java.util.List encodings
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.Boolean groupConversation
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameHeight
org.webrtc.RenderSynchronizer: long targetFrameIntervalNanos
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOnMs
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: android.graphics.SurfaceTexture texture
com.google.crypto.tink.proto.Keyset$Key: int KEY_DATA_FIELD_NUMBER
org.webrtc.ScreenCapturerAndroid: org.webrtc.CapturerObserver capturerObserver
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showWhen
org.webrtc.VideoFrameBufferType: int I422
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetectorFactory networkChangeDetectorFactory
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource FilePath
org.webrtc.TextureBufferImpl: int width
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_ID
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] $VALUES
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int IFRAME_INTERVAL
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String GRANT_RESULTS
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] $VALUES
org.webrtc.HardwareVideoEncoder: boolean useSurfaceMode
org.webrtc.audio.WebRtcAudioEffects: java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String flutterId
org.webrtc.PeerConnection$RTCConfiguration: boolean disableIPv6OnWifi
com.google.android.gms.maps.GoogleMapOptions: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.KeyTemplate: com.google.crypto.tink.proto.KeyTemplate DEFAULT_INSTANCE
com.google.crypto.tink.proto.AesCmacKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState NEW
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String summaryText
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String SECOND
org.webrtc.StatsReport$Value: java.lang.String value
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map frameCryptos
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_GROUP_METHOD
org.webrtc.GlTextureFrameBuffer: int width
com.google.crypto.tink.proto.AesGcmSivKeyFormat: int KEY_SIZE_FIELD_NUMBER
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMismatchOrientation
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer color
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Null
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLConfig eglContextConfig
com.google.crypto.tink.proto.AesEaxKeyFormat: int PARAMS_FIELD_NUMBER
com.google.crypto.tink.proto.AesGcmKeyFormat: com.google.crypto.tink.proto.AesGcmKeyFormat DEFAULT_INSTANCE
org.webrtc.PeerConnection$RTCConfiguration: boolean enableIceGatheringOnAnyAddressPorts
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkTypeForVpn
com.google.crypto.tink.proto.AesSivKey: com.google.crypto.tink.proto.AesSivKey DEFAULT_INSTANCE
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_5G
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType RSA
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.lang.String LIBRARY_NAME
org.webrtc.audio.JavaAudioDeviceModule: android.content.Context context
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: int memoizedSerializedSize
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_2G
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MESSAGES
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean bot
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
com.google.crypto.tink.proto.AesCtrHmacAeadKey: com.google.crypto.tink.proto.AesCtrKey aesCtrKey_
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticNetworkThread
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_NOTIFICATION_REPEAT_FREQUENCY
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $VALUES
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: java.lang.String className
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection$Callback mediaProjectionCallback
org.webrtc.JavaI420Buffer: int height
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.List actions
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long timeoutAfter
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Map
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo staticSignalingThread
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $VALUES
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_FULL_SCREEN_INTENT_PERMISSION_METHOD
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Object largeIcon
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer priority
org.webrtc.EglRenderer: org.webrtc.EglRenderer$EglSurfaceCreation eglSurfaceCreationRunnable
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LINES
org.webrtc.Priority: int HIGH
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread audioThread
org.webrtc.VideoSource$1: org.webrtc.VideoSource this$0
org.webrtc.VideoEncoder$BitrateAllocation: int[][] bitratesBbs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean setAsGroupSummary
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_RAW_RESOURCE_ERROR_MESSAGE
org.webrtc.NV12Buffer: int height
com.google.crypto.tink.proto.KeyTemplate: java.lang.String typeUrl_
org.webrtc.CryptoOptions$Builder: boolean enableEncryptedRtpHeaderExtensions
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_WITH_DURATION
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String METHOD_CHANNEL
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ANY
org.webrtc.CameraEnumerationAndroid$CaptureFormat: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange framerate
org.webrtc.FileVideoCapturer: java.lang.String TAG
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate local
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource RawResource
com.google.crypto.tink.proto.ChaCha20Poly1305Key: int version_
org.webrtc.EglRenderer: java.lang.Runnable eglExceptionCallback
org.webrtc.HardwareVideoEncoder: int sliceHeight
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: com.cloudwebrtc.webrtc.SurfaceTextureRenderer surfaceTextureRenderer
org.webrtc.AndroidVideoDecoder: int stride
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FIT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUB_TEXT
org.webrtc.EglRenderer: org.webrtc.EglRenderer$ErrorCallback errorCallback
org.webrtc.Camera2Session$CaptureSessionCallback: org.webrtc.Camera2Session this$0
org.webrtc.VideoCodecInfo: java.lang.String H264_CONSTRAINED_HIGH_3_1
org.webrtc.PeerConnectionFactory$ThreadInfo: int tid
org.webrtc.CryptoOptions$Srtp: org.webrtc.CryptoOptions this$0
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection STOPPED
org.webrtc.Camera1Enumerator: boolean captureToTexture
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaCodecUtils$1: int[] $SwitchMap$org$webrtc$VideoCodecMimeType
com.google.crypto.tink.proto.KeysetInfo: int PRIMARY_KEY_ID_FIELD_NUMBER
org.webrtc.audio.WebRtcAudioManager: int BITS_PER_SAMPLE
org.webrtc.PeerConnection$IceServer: java.lang.String username
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean onlyAlertOnce
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT
org.webrtc.ThreadUtils$2: java.util.concurrent.CountDownLatch val$latch
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGL10 egl
org.webrtc.HardwareVideoEncoder: org.webrtc.BitrateAdjuster bitrateAdjuster
kotlinx.coroutines.CompletedExceptionally: int _handled
org.webrtc.VideoSource: org.webrtc.VideoProcessor videoProcessor
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer day
org.webrtc.GlTextureFrameBuffer: int pixelFormat
org.webrtc.EglThread: org.webrtc.RenderSynchronizer renderSynchronizer
org.webrtc.PeerConnection$RTCConfiguration: boolean audioJitterBufferFastAccelerate
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$PeerConnectionState
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int requestCode
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXCOMPAT
com.cloudwebrtc.webrtc.record.VideoFileRenderer: boolean encoderStarted
org.webrtc.EglBase10Impl: int EGL_CONTEXT_CLIENT_VERSION
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON_SOURCE
org.webrtc.AndroidVideoDecoder$1: org.webrtc.AndroidVideoDecoder this$0
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: java.lang.String TAG
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: long numCapturedFrames
org.webrtc.VideoSource: boolean isCapturerRunning
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoDecoder$Callback callback
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
com.google.android.gms.internal.location.zzei: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
com.google.crypto.tink.proto.AesCtrParams: int ivSize_
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioAttributeUsageType
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType VP8
org.webrtc.EncodedImage: long captureTimeMs
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: android.app.Application application
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ContentUri
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int max
org.webrtc.audio.WebRtcAudioTrack: boolean speakerMute
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File recordFile
org.webrtc.EglBase$ConfigBuilder: int openGlesVersion
org.webrtc.RtpParameters$Codec: java.lang.Integer clockRate
org.webrtc.audio.WebRtcAudioTrackUtils: java.lang.String TAG
org.webrtc.audio.JavaAudioDeviceModule: boolean useStereoOutput
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType RELAY
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_RECV
org.webrtc.YuvConverter$ShaderCallbacks: float[] coeffs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean chronometerCountDown
org.webrtc.EncodedImage$Builder: int rotation
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.BinaryMessenger messenger
org.webrtc.HardwareVideoEncoder: long lastKeyFrameNs
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatBigText
org.webrtc.RtpTransceiver: org.webrtc.RtpSender cachedSender
org.webrtc.VideoEncoderFallback: org.webrtc.VideoEncoder primary
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer observer
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type PRANSWER
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.PeerConnection$RTCConfiguration: int audioJitterBufferMaxPackets
org.webrtc.Camera2Session: int framerate
com.google.crypto.tink.proto.KeyTypeEntry: java.lang.String typeUrl_
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEBUG
org.webrtc.Logging: org.webrtc.Loggable loggable
org.webrtc.Priority: int MEDIUM
com.google.crypto.tink.proto.HmacKey: int VERSION_FIELD_NUMBER
org.webrtc.EglRenderer: int framesReceived
com.google.crypto.tink.proto.AesEaxParams: int ivSize_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String FULL_SCREEN_INTENT
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
org.webrtc.Metrics$HistogramInfo: int min
org.webrtc.EglBase: int[] CONFIG_PLAIN
org.webrtc.MediaSource: long nativeSource
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_WHEN
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String HOUR
org.webrtc.YuvConverter$ShaderCallbacks: float[] vCoeffs
org.webrtc.RenderSynchronizer: long lastOpenedTimeNanos
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo networkThread
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.Predicate codecAllowedPredicate
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback audioRecordErrorCallback
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback samplesReadyCallback
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int type
com.google.crypto.tink.proto.AesEaxKey: int version_
org.webrtc.NativeCapturerObserver: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: int resultCode
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int id
org.webrtc.EglRenderer: long nextFrameTimeNs
org.webrtc.audio.LowLatencyAudioBufferManager: int ticksUntilNextDecrease
com.google.crypto.tink.proto.KmsAeadKey: int PARAMS_FIELD_NUMBER
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind SPEAKER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_SOUND_ERROR_CODE
com.google.crypto.tink.proto.HmacKeyFormat: int KEY_SIZE_FIELD_NUMBER
org.webrtc.EglBase10Impl: org.webrtc.EglBase10Impl$EglConnection eglConnection
org.webrtc.IceCandidate: java.lang.String serverUrl
com.google.crypto.tink.proto.AesCtrKeyFormat: int keySize_
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy bundlePolicy
com.google.crypto.tink.proto.AesSivKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.view.Surface surface
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataV
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean loggingEnabled
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: int KEK_URI_FIELD_NUMBER
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory fallback
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat params_
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.NativeLibraryLoader nativeLibraryLoader
com.google.crypto.tink.proto.AesCmacKey: int PARAMS_FIELD_NUMBER
org.webrtc.VideoFrameDrawer: java.lang.String TAG
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$SignalingState
com.google.crypto.tink.proto.ChaCha20Poly1305Key: int VERSION_FIELD_NUMBER
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleWidth
org.webrtc.EglRenderer: boolean usePresentationTimeStamp
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String password
com.google.crypto.tink.proto.KmsAeadKey: com.google.crypto.tink.proto.KmsAeadKeyFormat params_
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_NOTIFICATION
org.webrtc.PeerConnection: java.util.List senders
org.webrtc.Logging$TraceLevel: int level
com.google.crypto.tink.proto.KeyTypeEntry: int keyManagerVersion_
org.webrtc.audio.WebRtcAudioRecord: byte[] emptyBytes
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel OUTPUT
org.webrtc.audio.WebRtcAudioEffects: boolean DEBUG
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.NativeLibraryLoader nativeLibraryLoader
org.webrtc.VideoFrameDrawer$YuvUploader: java.nio.ByteBuffer copyBuffer
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] $VALUES
org.webrtc.SoftwareVideoEncoderFactory: java.lang.String TAG
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_BLUETOOTH
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CLOSED
org.webrtc.HardwareVideoEncoderFactory: int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer maxProgress
org.webrtc.MediaCodecUtils: java.lang.String TAG
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State INITIALIZING
org.webrtc.RtpReceiver: long nativeObserver
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String IMPORTANCE
com.google.crypto.tink.proto.AesGcmKey: int version_
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] $VALUES
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatContentTitle
io.flutter.embedding.engine.FlutterJNI: float displayHeight
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.util.ArrayList eventQueue
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String body
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String id
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState OPENED
org.webrtc.Metrics$HistogramInfo: java.util.Map samples
com.google.crypto.tink.proto.AesCtrHmacAeadKey: com.google.crypto.tink.proto.HmacKey hmacKey_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_RED
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_RED
org.webrtc.AndroidVideoDecoder: int height
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean isActive
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE_INFORMATION
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfWeekAndTime
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer numChannels
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _next
org.webrtc.JavaI420Buffer: int strideY
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLContext eglContext
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Weekly
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
com.google.crypto.tink.proto.HmacKey: int PARAMS_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents Time
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp srtp
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState FAILED
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $VALUES
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map parameters
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection peerConnection
org.webrtc.EglRenderer: long renderTimeNs
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoderFactory fallback
org.webrtc.CameraCapturer: int OPEN_CAMERA_TIMEOUT
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry entry
org.webrtc.RtpParameters$HeaderExtension: java.lang.String uri
com.cloudwebrtc.webrtc.utils.AnyThreadSink: android.os.Handler handler
com.google.android.gms.internal.location.zze: android.os.Parcelable$Creator CREATOR
org.webrtc.RenderSynchronizer: boolean renderWindowOpen
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT_TITLE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PENDING_NOTIFICATION_REQUESTS_METHOD
org.webrtc.VideoCodecInfo: java.util.List scalabilityModes
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String ID
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState FREEZED
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
org.webrtc.Camera1Session: org.webrtc.Histogram camera1StopTimeMsHistogram
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
org.webrtc.NetworkMonitor: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String SHOWS_USER_INTERFACE
org.webrtc.audio.JavaAudioDeviceModule$Builder: int inputSampleRate
org.webrtc.audio.WebRtcAudioRecord: int audioSource
org.webrtc.Camera2Session: android.view.Surface surface
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: org.webrtc.VideoCapturer capturer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer iconResourceId
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.EglBase14$Context sharedContext
org.webrtc.Camera1Session: int NUMBER_OF_CAPTURE_BUFFERS
org.webrtc.RtpSender: boolean ownsTrack
org.webrtc.CandidatePairChangeEvent: int lastDataReceivedMs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_BLUE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND_SOURCE
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.Logging$Severity loggableSeverity
org.webrtc.NetworkMonitor$InstanceHolder: org.webrtc.NetworkMonitor instance
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapper codec
org.webrtc.TextureBufferImpl$2: org.webrtc.TextureBufferImpl this$0
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_MODULECALL
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState NEW
org.webrtc.RtpParameters$Encoding: int networkPriority
org.webrtc.H264Utils: java.lang.String H264_FMTP_PACKETIZATION_MODE
androidx.lifecycle.ReportFragment$LifecycleCallbacks: androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion Companion
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] $VALUES
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: java.lang.Object layoutLock
com.google.crypto.tink.proto.KmsAeadKeyFormat: java.lang.String keyUri_
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String DESCRIPTION
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.VideoSource: org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource
org.webrtc.CameraCapturer$8: org.webrtc.CameraCapturer this$0
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.String conversationTitle
org.webrtc.Histogram: long handle
com.google.crypto.tink.proto.XChaCha20Poly1305KeyFormat: int version_
com.google.crypto.tink.proto.Keyset$Key: int outputPrefixType_
org.webrtc.CameraCapturer: boolean sessionOpening
org.webrtc.RendererCommon: float BALANCED_VISIBLE_FRACTION
org.webrtc.HardwareVideoEncoder: boolean automaticResizeOn
org.webrtc.Camera2Session$CameraStateCallback: org.webrtc.Camera2Session this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
com.google.android.gms.maps.model.CameraPosition: android.os.Parcelable$Creator CREATOR
org.webrtc.Metrics: java.lang.String TAG
com.google.crypto.tink.shaded.protobuf.AbstractMessageLite: int memoizedHashCode
org.webrtc.FileVideoCapturer: java.util.TimerTask tickTask
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState NEW
org.webrtc.CandidatePairChangeEvent: org.webrtc.IceCandidate remote
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
org.webrtc.TimestampAligner: long nativeTimestampAligner
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean autoCancel
com.google.crypto.tink.proto.KeyData: int KEY_MATERIAL_TYPE_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHRONOMETER_COUNT_DOWN
com.google.android.gms.common.internal.zzk: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ADAPTER_TYPE_ANY
com.google.crypto.tink.proto.AesCtrKeyFormat: int KEY_SIZE_FIELD_NUMBER
com.google.crypto.tink.proto.KeyData: com.google.crypto.tink.shaded.protobuf.ByteString value_
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int underlyingNetworkSubtypeForVpn
com.google.crypto.tink.proto.EncryptedKeyset: int KEYSET_INFO_FIELD_NUMBER
kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo bufferInfo
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl$RefCountMonitor refCountMonitor
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationStyle style
org.webrtc.YuvConverter$ShaderCallbacks: int xUnitLoc
org.webrtc.PeerConnectionFactory: java.lang.String VIDEO_FRAME_EMIT_TRIAL
org.webrtc.PeerConnection$RTCConfiguration: boolean suspendBelowMinBitrate
org.webrtc.CameraEnumerationAndroid$2: int val$requestedWidth
com.dexterous.flutterlocalnotifications.models.NotificationAction: com.dexterous.flutterlocalnotifications.models.IconSource iconSource
org.webrtc.EglBase: int EGL_OPENGL_ES3_BIT
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_5G
org.webrtc.DataChannel$Init: boolean negotiated
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat DEFAULT_INSTANCE
com.google.crypto.tink.proto.AesEaxKey: com.google.crypto.tink.proto.AesEaxParams params_
org.webrtc.RtpParameters$Encoding: java.lang.Double scaleResolutionDownBy
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DateAndTime
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BODY
org.webrtc.CameraCapturer$5: org.webrtc.CameraCapturer this$0
org.webrtc.VideoFrameDrawer$YuvUploader: int[] yuvTextures
org.webrtc.FileVideoCapturer$VideoReaderY4M: int FRAME_DELIMETER_LENGTH
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean showsUserInterface
org.webrtc.EncodedImage: int encodedWidth
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecMimeType codecType
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameKey
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus UNINITIALIZED
org.webrtc.SurfaceTextureHelper: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction CreateIfNotExists
org.webrtc.SurfaceTextureHelper: org.webrtc.TimestampAligner timestampAligner
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
org.webrtc.EglRenderer$1: org.webrtc.EglRenderer this$0
org.webrtc.DataChannel$Init: boolean ordered
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH
com.google.crypto.tink.proto.AesSivKeyFormat: int keySize_
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showProgress
org.webrtc.JNILogging: org.webrtc.Loggable loggable
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT_RESULT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String KEY
org.webrtc.WrappedNativeI420Buffer: int strideU
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.RendererCommon$GlDrawer drawer
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String AUDIO_ATTRIBUTES_USAGE
org.webrtc.EncodedImage$Builder: int encodedHeight
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_WARNING
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_FRAME_PER_BUFFER
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean includeOtherUidNetworks
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int fps
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay virtualDisplay
com.cloudwebrtc.webrtc.record.FrameCapturer: org.webrtc.VideoTrack videoTrack
com.google.crypto.tink.proto.AesSivKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState DISCONNECTED
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int focusMode
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PROFILE_LEVEL_ID
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_ICON_ERROR_CODE
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType NONE
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer minute
org.webrtc.VideoProcessor$FrameAdaptationParameters: boolean drop
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor this$0
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_GREEN
org.webrtc.EglRenderer: float layoutAspectRatio
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase rootEglBase
org.webrtc.WebrtcBuildVersion: java.lang.String maint_version
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean isTorchOn
org.webrtc.audio.WebRtcAudioRecord: boolean microphoneMute
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType EmptyFrame
org.webrtc.AndroidVideoDecoder: org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SET_AS_GROUP_SUMMARY
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] $VALUES
org.webrtc.audio.WebRtcAudioTrack: byte[] emptyBytes
io.flutter.embedding.engine.FlutterJNI: float displayDensity
org.webrtc.VideoSource$AspectRatio: int width
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState ENCRYPTIONFAILED
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.HashMap perImageReaders
org.webrtc.SurfaceViewRenderer: int rotatedFrameHeight
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: java.lang.String fieldName
com.google.android.gms.maps.model.StampStyle: android.os.Parcelable$Creator CREATOR
org.webrtc.AndroidVideoDecoder: boolean keyFrameRequired
org.webrtc.audio.JavaAudioDeviceModule: int outputSampleRate
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_HEIGHT
org.webrtc.audio.JavaAudioDeviceModule: long nativeAudioDeviceModule
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader lastReaderDequeuedFrom
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataMimeType
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int subtype
com.google.crypto.tink.proto.AesSivKey: int VERSION_FIELD_NUMBER
org.webrtc.WrappedNativeI420Buffer: int strideV
org.webrtc.RTCStats: java.lang.String id
org.webrtc.FileVideoCapturer$1: org.webrtc.FileVideoCapturer this$0
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.SimulcastVideoEncoderFactory native
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoSink pendingListener
com.google.android.gms.cloudmessaging.CloudMessage: android.os.Parcelable$Creator CREATOR
org.webrtc.AndroidVideoDecoder$FrameInfo: long decodeStartTimeMs
org.webrtc.SurfaceViewRenderer: java.lang.String TAG
com.google.crypto.tink.proto.RegistryConfig: int ENTRY_FIELD_NUMBER
org.webrtc.CameraCapturer$7: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.utils.AnyThreadSink: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.VideoFileRenderer: org.webrtc.EglBase eglBase
com.google.crypto.tink.proto.AesGcmSivKey: int VERSION_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean released
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_METHOD
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils$1: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String name
org.webrtc.CryptoOptions$SFrame: org.webrtc.CryptoOptions this$0
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback audioRecordStateCallback
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int audioTrackIndex
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON_BITMAP_SOURCE
org.webrtc.NetworkPreference: int NEUTRAL
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
org.webrtc.EglRenderer: java.lang.Object statisticsLock
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_revision
org.webrtc.NV12Buffer: int stride
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor audioInterceptor
com.google.crypto.tink.proto.AesGcmKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.google.crypto.tink.proto.HmacKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.CameraCapturer$4: org.webrtc.CameraCapturer this$0
org.webrtc.VideoFileRenderer: android.os.Handler renderThreadHandler
org.webrtc.EglRenderer: long minRenderPeriodNs
org.webrtc.RtcCertificatePem: java.lang.String certificate
com.google.crypto.tink.proto.XChaCha20Poly1305Key: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType ERROR
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.atomic.AtomicReference audioSourceMatchesRecordingSessionRef
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
com.google.crypto.tink.proto.ChaCha20Poly1305KeyFormat: com.google.crypto.tink.proto.ChaCha20Poly1305KeyFormat DEFAULT_INSTANCE
com.google.crypto.tink.proto.XChaCha20Poly1305KeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] $VALUES
com.google.android.gms.location.zzal: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ACTIONS
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
org.webrtc.CameraCapturer$9: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map localStreams
org.webrtc.DataChannel$Init: int id
org.webrtc.ScreenCapturerAndroid: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int EXACT_ALARM_PERMISSION_REQUEST_CODE
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory
org.webrtc.HardwareVideoEncoder: int keyFrameIntervalSec
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
com.google.crypto.tink.proto.Keyset$Key: int status_
org.webrtc.HardwareVideoEncoder: int MEDIA_CODEC_RELEASE_TIMEOUT_MS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHARED_PREFERENCES_KEY
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.util.SparseArray mediaRecorders
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DEFAULT_ICON
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Activity mainActivity
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
org.webrtc.StatsReport: org.webrtc.StatsReport$Value[] values
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String description
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String groupId
com.google.crypto.tink.proto.AesGcmSivKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.google.crypto.tink.proto.AesCtrKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.EglRenderer: org.webrtc.VideoFrame pendingFrame
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String TAG
com.google.android.gms.maps.model.LatLng: android.os.Parcelable$Creator CREATOR
org.webrtc.SurfaceTextureHelper: boolean isQuitting
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StopTimeMsHistogram
org.webrtc.VideoFrameBufferType: int I210
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $VALUES
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String DESCRIPTION
org.webrtc.PeerConnectionFactory: java.lang.String TAG
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int preferredId
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType iceTransportsType
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String turnLoggingId
org.webrtc.TurnCustomizer: long nativeTurnCustomizer
com.google.android.gms.maps.model.PatternItem: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.Object lock
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
com.google.crypto.tink.proto.Keyset: int KEY_FIELD_NUMBER
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int FRAME_RATE
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection RECV_ONLY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_CODE
org.webrtc.audio.JavaAudioDeviceModule$Builder: int audioSource
org.webrtc.JavaI420Buffer: org.webrtc.RefCountDelegate refCountDelegate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.StyleInformation styleInformation
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource bigPictureBitmapSource
org.webrtc.DataChannel$Init: int maxRetransmitTimeMs
com.google.crypto.tink.proto.AesCtrHmacAeadKey: com.google.crypto.tink.proto.AesCtrHmacAeadKey DEFAULT_INSTANCE
com.google.crypto.tink.proto.ChaCha20Poly1305Key: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_NONE
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: int width
com.google.crypto.tink.proto.AesCtrKeyFormat: com.google.crypto.tink.proto.AesCtrParams params_
org.webrtc.CameraCapturer$8: java.lang.String val$cameraName
com.google.crypto.tink.proto.AesCmacKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONTENT_TITLE
com.google.crypto.tink.proto.KeyData: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] $VALUES
org.webrtc.DataChannel$Init: java.lang.String protocol
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type type
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer buffer
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer turnCustomizer
org.webrtc.EglRenderer: long renderSwapBufferTimeNs
org.webrtc.EglBase10Impl: java.lang.String TAG
org.webrtc.EglRenderer: org.webrtc.VideoFrameDrawer frameDrawer
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: com.google.crypto.tink.proto.KeysetInfo$KeyInfo DEFAULT_INSTANCE
org.webrtc.EglBase: int EGL_OPENGL_ES2_BIT
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.cloudwebrtc.webrtc.audio.AudioSwitchManager instance
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TITLE
com.google.crypto.tink.proto.Keyset$Key: int KEY_ID_FIELD_NUMBER
org.webrtc.DataChannel: long nativeObserver
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CATEGORY
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState GATHERING
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy MAXBUNDLE
org.webrtc.RtpParameters: java.lang.String transactionId
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaCodec mediaCodec
org.webrtc.IceCandidate: org.webrtc.PeerConnection$AdapterType adapterType
org.webrtc.PeerConnectionFactory$InitializationOptions: java.lang.String fieldTrials
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
com.google.crypto.tink.proto.KmsAeadKey: int VERSION_FIELD_NUMBER
org.webrtc.EglRenderer: java.lang.String TAG
org.webrtc.CameraEnumerationAndroid$1: int MIN_FPS_HIGH_VALUE_WEIGHT
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Media
org.webrtc.HardwareVideoEncoder: java.lang.Integer surfaceColorFormat
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioManager audioManager
org.webrtc.VideoFrameBufferType: int NV12
org.webrtc.Camera1Session: org.webrtc.Camera1Session$SessionState state
com.google.crypto.tink.proto.AesGcmSivKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy KEEP_FIRST_READY
org.webrtc.VideoCodecInfo: int payload
org.webrtc.ScreenCapturerAndroid: android.content.Intent mediaProjectionPermissionResultData
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String id
org.webrtc.RtpParameters$HeaderExtension: int id
org.webrtc.NetworkMonitor: java.util.ArrayList nativeNetworkObservers
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.SoftwareVideoDecoderFactory softwareVideoDecoderFactory
org.webrtc.CameraCapturer: org.webrtc.CameraSession currentSession
com.google.crypto.tink.proto.AesCmacKeyFormat: int PARAMS_FIELD_NUMBER
org.webrtc.NativeLibrary: java.lang.Object lock
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.WebRtcAudioEffects effects
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatContentTitle
org.webrtc.RtpParameters$Encoding: java.lang.Integer minBitrateBps
org.webrtc.SoftwareVideoEncoderFactory$1: org.webrtc.SoftwareVideoEncoderFactory this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int MAX_IMAGES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer id
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.WrappedVideoDecoderFactory wrappedVideoDecoderFactory
org.webrtc.SimulcastVideoEncoder: org.webrtc.VideoEncoderFactory primary
org.webrtc.ThreadUtils$3: org.webrtc.ThreadUtils$1Result val$result
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: io.flutter.plugin.common.MethodChannel$Result val$result
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
org.webrtc.Camera2Session: java.lang.String TAG
org.webrtc.NV12Buffer: int width
org.webrtc.YuvConverter$ShaderCallbacks: float[] uCoeffs
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecMimeType codecType
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.google.crypto.tink.proto.AesCmacParams: com.google.crypto.tink.proto.AesCmacParams DEFAULT_INSTANCE
org.webrtc.IceCandidate: java.lang.String sdpMid
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String summaryText
org.webrtc.ScreenCapturerAndroid: long numCapturedFrames
org.webrtc.TextureBufferImpl: int unscaledHeight
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String NAME
com.google.android.gms.maps.model.MarkerOptions: android.os.Parcelable$Creator CREATOR
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean preferredEncrypted
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy LOW_COST
org.webrtc.WrappedNativeI420Buffer: int strideY
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
com.google.crypto.tink.proto.AesGcmKeyFormat: int VERSION_FIELD_NUMBER
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mSurfaceTextureHelpers
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String uri
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector networkChangeDetector
com.cloudwebrtc.webrtc.GetUserMediaImpl: int DEFAULT_WIDTH
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] $VALUES
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem certificate
org.webrtc.PeerConnectionFactory: boolean internalTracerInitialized
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_GREEN
com.google.crypto.tink.proto.XChaCha20Poly1305KeyFormat: int VERSION_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_DESCRIPTION
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioInputBuffers
org.webrtc.Camera2Capturer: android.content.Context context
org.webrtc.SessionDescription: java.lang.String description
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState STABLE
org.webrtc.EglRenderer: org.webrtc.RendererCommon$GlDrawer drawer
com.google.crypto.tink.proto.AesSivKey: int version_
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_OFFER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean channelShowBadge
com.google.crypto.tink.proto.HmacParams: int tagSize_
org.webrtc.Camera2Session: org.webrtc.Histogram camera2ResolutionHistogram
org.webrtc.GlGenericDrawer: java.lang.String DEFAULT_VERTEX_SHADER_STRING
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND
com.cloudwebrtc.webrtc.utils.Utils$1: int[] $SwitchMap$org$webrtc$PeerConnection$IceConnectionState
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection mediaProjection
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context context
org.webrtc.Priority: int LOW
org.webrtc.VideoFileRenderer: android.os.HandlerThread renderThread
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String title
org.webrtc.audio.WebRtcAudioTrack: long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String VIBRATION_PATTERN
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_SECURE
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_ETHERNET
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckMinInterval
org.webrtc.audio.WebRtcAudioEffects: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Default
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraManager cameraManager
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: java.lang.String nativeLibraryName
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.VideoFrameDrawer frameDrawer
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel eventChannel
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: com.cloudwebrtc.webrtc.StateProvider stateProvider
org.webrtc.FileVideoCapturer: org.webrtc.FileVideoCapturer$VideoReader videoReader
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.EglBase eglBase
org.webrtc.ThreadUtils$4: java.lang.Runnable val$runner
org.webrtc.video.CustomVideoEncoderFactory: boolean forceSWCodec
org.webrtc.EglBase: int EGL_RECORDABLE_ANDROID
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] $VALUES
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_METHOD
org.webrtc.CandidatePairChangeEvent: java.lang.String reason
org.webrtc.CameraCapturer: org.webrtc.SurfaceTextureHelper surfaceHelper
com.google.crypto.tink.proto.ChaCha20Poly1305Key: int KEY_VALUE_FIELD_NUMBER
org.webrtc.CameraCapturer$7: org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler
org.webrtc.Predicate$3: org.webrtc.Predicate this$0
com.google.crypto.tink.proto.AesCmacParams: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.GlGenericDrawer: org.webrtc.GlShader currentShader
org.webrtc.audio.VolumeLogger: java.lang.String TAG
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.ThreadUtils$ThreadChecker threadChecker
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLContext eglContext
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String uri
org.webrtc.SurfaceViewRenderer: org.webrtc.RendererCommon$VideoLayoutMeasure videoLayoutMeasure
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int frameSizePixels
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: int VERSION_FIELD_NUMBER
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_OFFER
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType OES
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
org.webrtc.EglBase$Context: long NO_CONTEXT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLORIZED
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter yuvConverter
org.webrtc.CameraCapturer: android.os.Handler cameraThreadHandler
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer number
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int min
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int imageFormat
org.webrtc.NativeAndroidVideoTrackSource: long nativeAndroidVideoTrackSource
org.webrtc.CameraCapturer$3: org.webrtc.CameraCapturer this$0
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long videoFrameStart
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.DateTimeComponents matchDateTimeComponents
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper$FrameRefMonitor frameRefMonitor
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
org.webrtc.RtpParameters$Codec: java.lang.String name
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceUnwritableMinChecks
org.webrtc.SurfaceTextureHelper: int textureWidth
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: boolean enableInternalTracer
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
com.google.crypto.tink.proto.AesCtrKey: int VERSION_FIELD_NUMBER
com.google.crypto.tink.proto.KeyTypeEntry: int TYPE_URL_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PROGRESS
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType kind
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $VALUES
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: long presentationTimestampUs
org.webrtc.VideoFileRenderer: int outputFileHeight
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback errorCallback
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame sframe
kotlinx.coroutines.channels.BufferedChannel: long bufferEnd
com.google.crypto.tink.proto.KmsAeadKey: com.google.crypto.tink.proto.KmsAeadKey DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Hourly
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: boolean isScreenCapture
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String sound
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.GlGenericDrawer: java.nio.FloatBuffer FULL_RECTANGLE_BUFFER
com.google.android.gms.maps.model.TileOverlayOptions: android.os.Parcelable$Creator CREATOR
org.webrtc.EglRenderer: int framesRendered
com.google.crypto.tink.proto.AesCtrKey: int version_
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType UNKNOWN
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String URI
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
org.webrtc.TextureBufferImpl: android.graphics.Matrix transformMatrix
org.webrtc.SoftwareVideoDecoderFactory$1: org.webrtc.VideoCodecInfo val$info
org.webrtc.RefCountDelegate: java.util.concurrent.atomic.AtomicInteger refCount
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel INPUT
org.webrtc.audio.WebRtcAudioTrack: java.nio.ByteBuffer byteBuffer
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.StateProvider stateProvider
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer importance
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState COMPLETE
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType WIFI
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map remoteTracks
com.google.crypto.tink.proto.HmacKeyFormat: com.google.crypto.tink.proto.HmacKeyFormat DEFAULT_INSTANCE
com.google.crypto.tink.proto.EncryptedKeyset: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUTO_CANCEL
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] cachedEffects
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] encoderOutputBuffers
org.webrtc.audio.VolumeLogger: int TIMER_PERIOD_IN_SECONDS
org.webrtc.RenderSynchronizer: java.util.List listeners
org.webrtc.VideoFrame$TextureBuffer$Type: int glTarget
org.webrtc.EncodedImage$Builder: java.lang.Runnable releaseCallback
com.google.crypto.tink.proto.Keyset: com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList key_
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_VPN
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_BLUE
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String NAME
org.webrtc.Camera2Session: org.webrtc.Camera2Session$SessionState state
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String name
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULE_MODE
com.google.crypto.tink.proto.AesCmacParams: int tagSize_
kotlinx.coroutines.CancelledContinuation: int _resumed
com.google.crypto.tink.proto.KeyTemplate: int outputPrefixType_
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String name
com.google.crypto.tink.proto.HmacKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfMonthAndTime
org.webrtc.Camera2Session: android.hardware.camera2.CameraDevice cameraDevice
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image image
org.webrtc.audio.WebRtcAudioRecord: java.nio.ByteBuffer byteBuffer
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics UNIFIED_PLAN
org.webrtc.SurfaceTextureHelper: int oesTextureId
org.webrtc.Camera1Session: long constructionTimeNs
com.google.crypto.tink.proto.KeyData: int VALUE_FIELD_NUMBER
com.google.crypto.tink.proto.KeyTypeEntry: int CATALOGUE_NAME_FIELD_NUMBER
org.webrtc.HardwareVideoEncoder: org.webrtc.MediaCodecWrapper codec
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation wifiP2pNetworkInfo
org.webrtc.CameraVideoCapturer$CameraStatistics: int CAMERA_OBSERVER_PERIOD_MS
org.webrtc.NetworkMonitor: java.util.ArrayList networkObservers
org.webrtc.VideoEncoder$EncoderInfo: boolean applyAlignmentToAllSimulcastLayers
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy PRUNE_BASED_ON_PRIORITY
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor inputSamplesInterceptor
com.google.crypto.tink.proto.AesEaxKeyFormat: int KEY_SIZE_FIELD_NUMBER
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INPUT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_NAME
org.webrtc.IceCandidateErrorEvent: java.lang.String url
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_NOTIFICATION
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String PROJECTION_DATA
org.webrtc.MediaConstraints: java.util.List mandatory
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
io.flutter.plugin.platform.SingleViewPresentation: int viewId
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
org.webrtc.NetworkPreference: int NOT_PREFERRED
org.webrtc.DynamicBitrateAdjuster: int BITRATE_ADJUSTMENT_STEPS
org.webrtc.VideoCodecInfo: java.lang.String name
com.google.crypto.tink.proto.HmacKeyFormat: int VERSION_FIELD_NUMBER
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileWidth
org.webrtc.CameraCapturer: org.webrtc.CameraSession$Events cameraSessionEventsHandler
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.AudioDecoderFactoryFactory audioDecoderFactoryFactory
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioTrack audioOutput
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState NEW
org.webrtc.Camera2Session: java.lang.String cameraId
com.google.android.gms.maps.model.LatLngBounds: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaCodecUtils: int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelDescription
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel eventChannel
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: int UNINITIALIZED_HASH_CODE
org.webrtc.audio.WebRtcAudioRecord: int BUFFER_SIZE_FACTOR
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState FAILED
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: java.lang.String TAG
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int VIRTUAL_DISPLAY_DPI
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String CANCEL_NOTIFICATION
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ALL
org.webrtc.PeerConnection: java.util.List receivers
org.webrtc.audio.WebRtcAudioManager: int DEFAULT_SAMPLE_RATE_HZ
org.webrtc.EglThread: org.webrtc.EglBase$EglConnection eglConnection
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_FOREGROUND_NOTIFICATION_ACTION
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object largeIcon
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: java.util.Set availableNetworks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CALLED_AT
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback stateCallback
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: boolean isRenderingPaused
com.cloudwebrtc.webrtc.GetUserMediaImpl: org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLConfig eglConfig
org.webrtc.CryptoOptions$Srtp: boolean enableEncryptedRtpHeaderExtensions
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
org.webrtc.AndroidVideoDecoder: int colorFormat
org.webrtc.ExternalAudioProcessingFactory: long apmPtr
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.AesSivKeyFormat: int KEY_SIZE_FIELD_NUMBER
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int channelCount
org.webrtc.TextureBufferImpl: android.os.Handler toI420Handler
org.webrtc.HardwareVideoEncoder: org.webrtc.EglBase14 textureEglBase
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: io.flutter.plugin.common.MethodChannel channel
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DRAWABLE
org.webrtc.Camera1Session: android.hardware.Camera camera
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.String TAG
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State LIVE
org.webrtc.Camera2Session: boolean firstFrameReported
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR_3G
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy rtcpMuxPolicy
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean hideExpandedLargeIcon
org.webrtc.PeerConnection$IceServer$Builder: java.lang.String hostname
org.webrtc.HardwareVideoEncoderFactory: boolean enableIntelVp8Encoder
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo workerThread
org.webrtc.DataChannel$Buffer: boolean binary
com.google.android.gms.maps.model.Cap: android.os.Parcelable$Creator CREATOR
org.webrtc.EncodedImage: org.webrtc.EncodedImage$FrameType frameType
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int minStartBitrateBps
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_ONCE
org.webrtc.VideoFrameBufferType: int I420A
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback audioSamplesReadyCallback
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrameDrawer$YuvUploader yuvUploader
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer dataU
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_ALPHA
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_REQUEST_SLI
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState PENDING
org.webrtc.ThreadUtils$1CaughtException: java.lang.Exception e
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_BALANCED
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType CELLULAR
org.webrtc.HardwareVideoEncoder: android.view.Surface textureInputSurface
org.webrtc.EglRenderer: org.webrtc.GlTextureFrameBuffer bitmapTextureFramebuffer
org.webrtc.RTCStats: java.lang.String type
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_WIFI
org.webrtc.RTCStatsReport: long timestampUs
org.webrtc.NetworkMonitor$2: org.webrtc.NetworkMonitor this$0
org.webrtc.CameraCapturer: android.content.Context applicationContext
org.webrtc.Size: int width
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INITIALIZE_METHOD
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoInput
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: org.webrtc.MediaStream val$mediaStream
org.webrtc.ExternalAudioProcessingFactory: long capturePostProcessingPtr
org.webrtc.CryptoOptions$Srtp: boolean enableAes128Sha1_32CryptoCipher
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_MESSAGE
org.webrtc.HardwareVideoEncoder: java.nio.ByteBuffer configBuffer
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: int UNINITIALIZED_SERIALIZED_SIZE
com.google.crypto.tink.proto.AesCtrHmacAeadKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.EncodedImage: int rotation
com.google.crypto.tink.proto.AesSivKeyFormat: int VERSION_FIELD_NUMBER
org.webrtc.HardwareVideoEncoder: boolean isEncodingStatisticsEnabled
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.view.TextureRegistry textures
com.google.crypto.tink.proto.XChaCha20Poly1305Key: int KEY_VALUE_FIELD_NUMBER
com.google.android.gms.location.LocationRequest: android.os.Parcelable$Creator CREATOR
org.webrtc.HardwareVideoEncoder$1: org.webrtc.HardwareVideoEncoder this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ALL_METHOD
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings streamSettings
org.webrtc.audio.WebRtcAudioTrack: int DEFAULT_USAGE
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int height
org.webrtc.audio.VolumeLogger: java.lang.String THREAD_NAME
org.webrtc.CryptoOptions$Builder: boolean enableAes128Sha1_32CryptoCipher
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalStrongConnectivityMs
com.google.crypto.tink.proto.XChaCha20Poly1305KeyFormat: com.google.crypto.tink.proto.XChaCha20Poly1305KeyFormat DEFAULT_INSTANCE
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
org.webrtc.Predicate$1: org.webrtc.Predicate val$other
com.google.crypto.tink.proto.AesEaxParams: int IV_SIZE_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String UNSUPPORTED_OS_VERSION_ERROR_CODE
org.webrtc.VideoFileRenderer: int outputFrameSize
org.webrtc.RtpReceiver: long nativeRtpReceiver
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite: com.google.crypto.tink.shaded.protobuf.UnknownFieldSetLite unknownFields
com.google.crypto.tink.proto.RegistryConfig: com.google.crypto.tink.proto.RegistryConfig DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer second
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ID
org.webrtc.GlGenericDrawer: java.lang.String TEXTURE_MATRIX_NAME
org.webrtc.Camera2Enumerator: java.lang.String TAG
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState CLOSED
org.webrtc.PeerConnection$IceServer: java.util.List urls
org.webrtc.SurfaceEglRenderer: int rotatedFrameWidth
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack cachedTrack
org.webrtc.YuvConverter: org.webrtc.YuvConverter$ShaderCallbacks shaderCallbacks
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
org.webrtc.Priority: int VERY_LOW
org.webrtc.Camera2Session: long constructionTimeNs
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaCodec$BufferInfo audioBufferInfo
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] $VALUES
org.webrtc.PeerConnectionFactory$Options: int networkIgnoreMask
org.webrtc.IceCandidateErrorEvent: int port
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String tag
org.webrtc.DynamicBitrateAdjuster: double BITS_PER_BYTE
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag
com.google.crypto.tink.proto.HmacKey: int KEY_VALUE_FIELD_NUMBER
org.webrtc.VideoEncoder$ScalingSettings: java.lang.Integer low
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_PRANSWER
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State ENDED
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SHOW_BADGE
org.webrtc.audio.VolumeLogger: android.media.AudioManager audioManager
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType keyType
com.google.crypto.tink.proto.HmacParams: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm AES_GCM
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String WHEN
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_BASELINE_PROFILE_CODEC
org.webrtc.EglBase$ConfigBuilder: boolean isRecordable
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatBody
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes audioAttributes
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread audioThread
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_NOTIFICATIONS_PERMISSION_METHOD
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioManager audioManager
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: com.cloudwebrtc.webrtc.CameraEventsHandler cameraEventsHandler
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean CLEANUP_ON_MEMORY_PRESSURE
org.webrtc.JavaI420Buffer: int strideV
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State OPEN
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer iceCheckIntervalWeakConnectivityMs
org.webrtc.FileVideoCapturer$VideoReaderY4M: int frameHeight
org.webrtc.CameraCapturer$6: org.webrtc.CameraSession val$oldSession
org.webrtc.Camera1Session: boolean captureToTexture
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_METHOD
org.webrtc.EglBase14Impl: java.lang.String TAG
org.webrtc.PeerConnectionFactory: long nativeFactory
org.webrtc.EncodedImage: long captureTimeNs
org.webrtc.YuvConverter: org.webrtc.VideoFrameDrawer videoFrameDrawer
com.google.crypto.tink.proto.AesSivKey: int KEY_VALUE_FIELD_NUMBER
com.google.crypto.tink.proto.AesGcmKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: int[] additionalFlags
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean newFrameAvailable
org.webrtc.SurfaceViewRenderer: org.webrtc.SurfaceEglRenderer eglRenderer
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager$OnAudioFocusChangeListener audioFocusChangeListener
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMEOUT_AFTER
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.util.ArrayList messages
com.google.crypto.tink.proto.RegistryConfig: com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList entry_
com.google.crypto.tink.proto.ChaCha20Poly1305Key: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
com.google.crypto.tink.proto.AesCtrKey: com.google.crypto.tink.proto.AesCtrKey DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableVibration
org.webrtc.HardwareVideoEncoder: boolean isSemiPlanar
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String title
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_METHOD
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioSwitch audioSwitch
org.webrtc.SurfaceTextureHelper: int frameRotation
org.webrtc.GlShader: int program
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String sound
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String TAG
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback audioTrackErrorCallback
com.google.crypto.tink.proto.KeysetInfo: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.EglRenderer: org.webrtc.EglThread eglThread
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType Array
org.webrtc.NetworkMonitorAutoDetect: boolean includeWifiDirect
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] $VALUES
org.webrtc.EncodedImage: java.nio.ByteBuffer buffer
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.VolumeLogger volumeLogger
org.webrtc.video.CustomVideoDecoderFactory: java.util.List forceSWCodecs
org.webrtc.VideoDecoder$Settings: int width
org.webrtc.EglBase10Impl: org.webrtc.EglBase10Impl$EglConnection EGL_NO_CONNECTION
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CONNECTED
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERR_PARAMETER
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_STREAM
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledColor
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTING
org.webrtc.H264Utils: org.webrtc.VideoCodecInfo DEFAULT_H264_HIGH_PROFILE_CODEC
com.google.crypto.tink.proto.AesGcmKey: int KEY_VALUE_FIELD_NUMBER
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: int PARAMS_FIELD_NUMBER
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] $VALUES
com.dexterous.flutterlocalnotifications.models.NotificationDetails: long[] vibrationPattern
com.google.crypto.tink.proto.AesCmacKeyFormat: int keySize_
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer clockRate
org.webrtc.ScreenCapturerAndroid: int DISPLAY_FLAGS
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String TAG
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
org.webrtc.PeerConnection$RTCConfiguration: boolean enableCpuOveruseDetection
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_ERROR_CODE
org.webrtc.VideoEncoder$Settings: int height
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_MESSAGE
com.google.crypto.tink.proto.KmsAeadKeyFormat: int KEY_URI_FIELD_NUMBER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedHeight
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String name
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isPortrait
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useStereoOutput
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int status_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIME_ZONE_NAME
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String mimeType
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State CLOSING
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper$FrameRefMonitor val$frameRefMonitor
com.google.crypto.tink.proto.KmsEnvelopeAeadKey: com.google.crypto.tink.proto.KmsEnvelopeAeadKey DEFAULT_INSTANCE
org.webrtc.audio.JavaAudioDeviceModule$Builder: android.media.AudioManager audioManager
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState INTERNALERROR
org.webrtc.HardwareVideoEncoder: java.lang.String codecName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PRIORITY
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] $VALUES
com.google.crypto.tink.proto.HmacParams: int HASH_FIELD_NUMBER
com.google.firebase.messaging.RemoteMessage: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
com.google.crypto.tink.proto.HmacKeyFormat: int version_
org.webrtc.EglRenderer$FrameListenerAndParams: float scale
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback callback
org.webrtc.VideoFileRenderer: int outputFileWidth
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: java.lang.String TAG
org.webrtc.CameraEnumerationAndroid: java.util.ArrayList COMMON_RESOLUTIONS
org.webrtc.HardwareVideoEncoder: int adjustedBitrate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelName
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.VideoDecoder$Settings: int numberOfCores
io.flutter.embedding.engine.FlutterJNI: float displayWidth
com.google.crypto.tink.proto.AesCtrKey: com.google.crypto.tink.proto.AesCtrParams params_
com.google.crypto.tink.proto.Keyset$Key: int keyId_
org.webrtc.audio.JavaAudioDeviceModule$Builder: int outputSampleRate
org.webrtc.RtpParameters$Encoding: java.lang.Integer numTemporalLayers
org.webrtc.VideoFrameDrawer: float[] srcPoints
org.webrtc.VideoEncoder$Settings: org.webrtc.VideoEncoder$Capabilities capabilities
org.webrtc.GlRectDrawer: java.lang.String FRAGMENT_SHADER
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
org.webrtc.EglBase: int[] CONFIG_PIXEL_BUFFER
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: java.util.HashMap callbacks
org.webrtc.MediaStream: java.lang.String TAG
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
org.webrtc.Camera1Session: org.webrtc.CameraSession$Events events
org.webrtc.Predicate$2: org.webrtc.Predicate this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastQueueTime
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean connected
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity activity
com.google.crypto.tink.proto.HmacParams: int TAG_SIZE_FIELD_NUMBER
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_GREEN
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: int _width
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] $VALUES
org.webrtc.RtpParameters$Encoding: java.lang.String rid
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Daily
com.google.crypto.tink.proto.AesGcmSivKeyFormat: int keySize_
org.webrtc.Camera1Session: android.content.Context applicationContext
org.webrtc.CryptoOptions$SFrame: boolean requireFrameEncryption
org.webrtc.Predicate$2: org.webrtc.Predicate val$other
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String name
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String TAG
org.webrtc.RtpParameters$Codec: java.lang.Integer numChannels
org.webrtc.Size: int height
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] $VALUES
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_MAX_SCALE
com.google.crypto.tink.proto.KeyTypeEntry: int NEW_KEY_ALLOWED_FIELD_NUMBER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id
com.google.crypto.tink.proto.AesGcmSivKey: int KEY_VALUE_FIELD_NUMBER
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: java.lang.String typeUrl_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer importance
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection mediaProjection
org.webrtc.audio.WebRtcAudioRecord: int BUFFERS_PER_SECOND
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_ALERT_BEHAVIOR
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType VPN
kotlinx.coroutines.DefaultExecutor: int debugStatus
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: com.cloudwebrtc.webrtc.MethodCallHandlerImpl this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_METHOD
org.webrtc.Camera1Enumerator: java.util.List cachedSupportedFormats
org.webrtc.PeerConnection$IceServer: java.lang.String hostname
org.webrtc.SurfaceTextureHelper: boolean hasPendingTexture
com.google.android.gms.maps.model.StyleSpan: android.os.Parcelable$Creator CREATOR
org.webrtc.RtpParameters$Encoding: double bitratePriority
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_DEFAULT
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy candidateNetworkPolicy
org.webrtc.FileVideoCapturer$VideoReaderY4M: java.lang.String Y4M_FRAME_DELIMETER
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState CONNECTED
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State MUTED
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection$RTCConfiguration configuration
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int trackIndex
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.audio.WebRtcAudioRecord$1: java.util.concurrent.atomic.AtomicInteger val$nextThreadId
com.google.crypto.tink.proto.KeyTypeEntry: java.lang.String primitiveName_
org.webrtc.GlShader: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatSummaryText
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy continualGatheringPolicy
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type ROLLBACK
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.String TAG
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsEllipticCurves
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
org.webrtc.PeerConnection$IceServer: java.lang.String uri
org.webrtc.MediaConstraints: java.util.List optional
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.WebRtcAudioRecord audioInput
org.webrtc.EglBase$ConfigBuilder: boolean hasAlphaChannel
org.webrtc.VideoProcessor$FrameAdaptationParameters: int scaleHeight
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TIMEOUT
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_INFO
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] $VALUES
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: io.flutter.plugin.common.MethodChannel$Result val$result
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMESTAMP
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer dataU
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: androidx.lifecycle.Lifecycle lifecycle
com.google.crypto.tink.proto.XChaCha20Poly1305Key: com.google.crypto.tink.proto.XChaCha20Poly1305Key DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode exactAllowWhileIdle
com.google.crypto.tink.proto.RegistryConfig: java.lang.String configName_
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NAME
org.webrtc.CryptoOptions$Builder: boolean enableGcmCryptoSuites
com.google.crypto.tink.proto.AesGcmKey: com.google.crypto.tink.proto.AesGcmKey DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_OFF_MS
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] $VALUES
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson gson
com.google.crypto.tink.proto.AesGcmSivKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference DISABLED
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType ETHERNET
com.cloudwebrtc.webrtc.record.FrameCapturer: io.flutter.plugin.common.MethodChannel$Result callback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BOT
org.webrtc.GlTextureFrameBuffer: int textureId
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback playbackSamplesReadyCallback
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.media.AudioDeviceInfo preferredInput
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map frameCryptoObservers
org.webrtc.VideoCodecInfo: java.lang.String H264_PROFILE_CONSTRAINED_HIGH
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_DRAWABLE_RESOURCE_ERROR_MESSAGE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERMISSION_REQUEST_IN_PROGRESS_ERROR_MESSAGE
org.webrtc.SurfaceViewRenderer: int surfaceHeight
org.webrtc.PeerConnectionFactory$ThreadInfo: java.lang.Thread thread
com.dexterous.flutterlocalnotifications.models.MessageDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_VIBRATION
org.webrtc.BaseBitrateAdjuster: double targetFramerateFps
org.webrtc.YuvConverter$ShaderCallbacks: float[] yCoeffs
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int sampleRate
org.webrtc.Camera2Session: android.content.Context applicationContext
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_FRAMERATE
org.webrtc.audio.LowLatencyAudioBufferManager: boolean keepLoweringBufferSize
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] $VALUES
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: android.graphics.SurfaceTexture texture
org.webrtc.PeerConnection: java.util.List transceivers
org.webrtc.StatsReport$Value: java.lang.String name
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: org.webrtc.EglBase10Impl this$0
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer audioAttributesUsage
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastDequeuedImage
org.webrtc.AndroidVideoDecoder: java.util.concurrent.BlockingDeque frameInfos
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATION_MESSAGING_STYLE_METHOD
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval Weekly
org.webrtc.MediaStreamTrack$MediaType: int nativeIndex
com.google.crypto.tink.proto.AesCmacKey: int version_
org.webrtc.SoftwareVideoDecoderFactory$1: org.webrtc.SoftwareVideoDecoderFactory this$0
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.lang.String LIBRARY_NAME
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: boolean keepAlive
org.webrtc.VideoFileRenderer: java.lang.String TAG
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy ALL
org.webrtc.audio.JavaAudioDeviceModule: java.lang.Object nativeLock
com.google.android.gms.maps.model.CircleOptions: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.DataChannelObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String contentTitle
com.google.android.gms.internal.location.zzee: android.os.Parcelable$Creator CREATOR
com.google.crypto.tink.proto.HmacParams: int hash_
org.webrtc.GlGenericDrawer: org.webrtc.GlGenericDrawer$ShaderCallbacks shaderCallbacks
org.webrtc.audio.JavaAudioDeviceModule: java.lang.String TAG
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture surfaceTexture
org.webrtc.ExternalAudioProcessingFactory: long renderPreProcessingPtr
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean cancelNotification
com.google.android.gms.location.LastLocationRequest: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
com.google.crypto.tink.proto.KeyTypeEntry: int PRIMITIVE_NAME_FIELD_NUMBER
org.webrtc.StatsReport: double timestamp
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.MethodChannel methodChannel
org.webrtc.HardwareVideoEncoderFactory: int PERIODIC_KEY_FRAME_INTERVAL_S
org.webrtc.NativeLibrary: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_MIME_TYPE
org.webrtc.NV21Buffer: int height
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] $VALUES
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.Predicate codecAllowedPredicate
org.webrtc.audio.WebRtcAudioTrack: boolean checkPlayState
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.nio.ByteBuffer[] audioOutputBuffers
org.webrtc.CameraCapturer: int width
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: java.lang.String TAG
org.webrtc.MediaSource: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.CameraCapturer$2: org.webrtc.CameraCapturer this$0
com.google.crypto.tink.proto.Keyset$Key: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.cloudwebrtc.webrtc.PeerConnectionObserver$1: int[] $SwitchMap$org$webrtc$RtpTransceiver$RtpTransceiverDirection
com.google.android.gms.maps.model.Tile: android.os.Parcelable$Creator CREATOR
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGL10 egl
org.webrtc.MediaStreamTrack: java.lang.String VIDEO_TRACK_KIND
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.SSLCertificateVerifier sslCertificateVerifier
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState NEW
org.webrtc.EncodedImage$Builder: java.nio.ByteBuffer buffer
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int width
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String payload
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler renderThreadHandler
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
org.webrtc.HardwareVideoEncoderFactory: boolean enableH264HighProfile
org.webrtc.NV12Buffer: int sliceHeight
com.google.firebase.datatransport.TransportRegistrar: java.lang.String LIBRARY_NAME
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor val$this$0
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause
org.webrtc.SoftwareVideoEncoderFactory$1: org.webrtc.VideoCodecInfo val$info
org.webrtc.BaseBitrateAdjuster: int targetBitrateBps
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate wifiManagerDelegate
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Intent mediaProjectionData
org.webrtc.RTCStats: java.util.Map members
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.video.CustomVideoEncoderFactory videoEncoderFactory
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
org.webrtc.NV21Buffer: byte[] data
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean getAllNetworksFromCache
org.webrtc.SurfaceTextureHelper$1: org.webrtc.EglBase$Context val$sharedContext
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_ERROR
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus NO_OUTPUT
org.webrtc.RtpParameters$Codec: java.util.Map parameters
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
com.google.crypto.tink.proto.XChaCha20Poly1305Key: int VERSION_FIELD_NUMBER
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState STOPPED
org.webrtc.ScreenCapturerAndroid: int height
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataUri
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus ERROR
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: org.webrtc.NetworkMonitorAutoDetect this$0
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: android.os.ResultReceiver resultReceiver
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate connectivityManagerDelegate
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle BigPicture
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus MEMORY
org.webrtc.SurfaceTextureHelper: org.webrtc.TextureBufferImpl$RefCountMonitor textureRefCountMonitor
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_ALPHA
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_RED
org.webrtc.VideoEncoder$Settings: int numberOfSimulcastStreams
org.webrtc.VideoFileRenderer: java.nio.ByteBuffer outputFrameBuffer
org.webrtc.Camera2Session: org.webrtc.CameraSession$Events events
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CAN_SCHEDULE_EXACT_NOTIFICATIONS_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOffMs
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean contextual
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext eglContext
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjectionManager mediaProjectionManager
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: java.util.Map keyProviders
com.google.crypto.tink.proto.AesCmacKeyFormat: int KEY_SIZE_FIELD_NUMBER
org.webrtc.RendererCommon$VideoLayoutMeasure: float visibleFractionMatchOrientation
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_KEY
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String id
org.webrtc.NativeLibrary: boolean libraryLoaded
org.webrtc.VideoFileRenderer: int frameCount
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _parentHandle
com.google.crypto.tink.proto.HmacParams: com.google.crypto.tink.proto.HmacParams DEFAULT_INSTANCE
org.webrtc.MediaStream: java.util.List preservedVideoTracks
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver cachedReceiver
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TICKER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MILLISECONDS_SINCE_EPOCH
org.webrtc.FileVideoCapturer$VideoReaderY4M: long videoStart
org.webrtc.AndroidVideoDecoder: java.lang.Thread outputThread
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy DISABLED
com.google.crypto.tink.proto.RegistryConfig: int CONFIG_NAME_FIELD_NUMBER
com.google.android.gms.location.LocationSettingsResult: android.os.Parcelable$Creator CREATOR
com.google.android.gms.maps.model.PolygonOptions: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE_COLOR_RED
org.webrtc.NV21Buffer: int width
org.webrtc.VideoFrame: long timestampNs
org.webrtc.NV12Buffer: java.nio.ByteBuffer buffer
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_CONTINUALLY
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
org.webrtc.ThreadUtils$3: java.util.concurrent.Callable val$callable
org.webrtc.RtpParameters$Encoding: java.lang.Integer maxBitrateBps
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus FALLBACK_SOFTWARE
org.webrtc.HardwareVideoEncoder$BusyCount: java.lang.Object countLock
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: int rotatedFrameWidth
org.webrtc.WebrtcBuildVersion: java.lang.String webrtc_commit
org.webrtc.audio.WebRtcAudioTrack: int BITS_PER_SAMPLE
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLDisplay eglDisplay
org.webrtc.HardwareVideoEncoder: boolean running
com.google.crypto.tink.proto.KeysetInfo: com.google.crypto.tink.proto.KeysetInfo DEFAULT_INSTANCE
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] $VALUES
org.webrtc.DataChannel$Buffer: java.nio.ByteBuffer data
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetworkControllerFactoryFactory networkControllerFactoryFactory
org.webrtc.RenderSynchronizer: android.view.Choreographer choreographer
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: android.content.Context applicationContext
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean silent
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord audioRecord
org.webrtc.PeerConnectionFactory$InitializationOptions: android.content.Context applicationContext
com.cloudwebrtc.webrtc.record.VideoFileRenderer: long presTime
org.webrtc.VideoEncoder$Settings: int width
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ICON_SOURCE
org.webrtc.audio.WebRtcAudioRecord: long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
org.webrtc.Camera2Session: android.hardware.camera2.CameraCharacteristics cameraCharacteristics
org.webrtc.HardwareVideoEncoder: long nextPresentationTimestampUs
org.webrtc.PeerConnectionFactory: java.lang.String TRIAL_ENABLED
org.webrtc.PeerConnection$IceServer$Builder: java.util.List tlsAlpnProtocols
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback audioTrackStateCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONVERSATION_TITLE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String category
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.GetUserMediaImpl getUserMediaImpl
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback callback
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_TAG
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FILL
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean colorized
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState IN_PROGRESS
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoderFactory factory
org.webrtc.YuvConverter: org.webrtc.ThreadUtils$ThreadChecker threadChecker
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_ONLY
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_ETHERNET
org.webrtc.VideoEncoder$Settings: boolean automaticResizeOn
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.jvm.functions.Function2 audioDeviceChangeListener
com.google.crypto.tink.proto.RegistryConfig: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.VideoSource$AspectRatio: int height
org.webrtc.ContextUtils: java.lang.String TAG
org.webrtc.RenderSynchronizer: long lastRefreshTimeNanos
com.google.crypto.tink.proto.KeysetInfo$KeyInfo: int outputPrefixType_
org.webrtc.CameraCapturer: java.lang.Runnable openCameraTimeoutRunnable
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer ledColor
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState RUNNING
org.webrtc.Camera2Session: int cameraOrientation
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState COMPLETED
org.webrtc.WrappedNativeI420Buffer: long nativeBuffer
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics PLAN_B
org.webrtc.Logging: java.util.logging.Logger fallbackLogger
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String TITLE
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.Handler audioThreadHandler
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String contentTitle
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] $VALUES
org.webrtc.EglRenderer: int framesDropped
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl methodCallHandler
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
org.webrtc.PeerConnection$IceServer$Builder: java.util.List urls
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatSummaryText
org.webrtc.MediaStream: java.util.List videoTracks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONLY_ALERT_ONCE
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
com.google.crypto.tink.proto.KeyData: com.google.crypto.tink.proto.KeyData DEFAULT_INSTANCE
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
org.webrtc.VideoCodecInfo: java.lang.String H264_FMTP_PACKETIZATION_MODE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] $VALUES
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType H265
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedWidth
kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int FULL_SCREEN_INTENT_PERMISSION_REQUEST_CODE
com.google.crypto.tink.proto.ChaCha20Poly1305Key: com.google.crypto.tink.proto.ChaCha20Poly1305Key DEFAULT_INSTANCE
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String PERMISSIONS
org.webrtc.TextureBufferImpl: int height
org.webrtc.AndroidVideoDecoder: org.webrtc.EglBase$Context sharedContext
org.webrtc.DynamicBitrateAdjuster: double timeSinceLastAdjustmentMs
com.google.crypto.tink.proto.AesSivKeyFormat: int version_
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType ALL
org.webrtc.EglThread: org.webrtc.EglThread$HandlerWithExceptionCallbacks handler
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback stateCallback
org.webrtc.VideoEncoder$Settings: int startBitrate
org.webrtc.EncodedImage$Builder: java.lang.Integer qp
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: int DEK_TEMPLATE_FIELD_NUMBER
org.webrtc.RendererCommon$1: int[] $SwitchMap$org$webrtc$RendererCommon$ScalingType
com.google.crypto.tink.proto.AesEaxKey: int VERSION_FIELD_NUMBER
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object closeHandler
com.google.crypto.tink.proto.XChaCha20Poly1305Key: int version_
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$6: int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: com.google.crypto.tink.proto.AesCtrKeyFormat aesCtrKeyFormat_
org.webrtc.NetworkMonitorAutoDetect: long INVALID_NET_ID
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Options options
org.webrtc.audio.WebRtcAudioTrack: java.lang.String TAG
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.Logging$Severity loggableSeverity
org.webrtc.audio.VolumeLogger$LogVolumeTask: int maxRingVolume
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$EglConnection EGL_NO_CONNECTION
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.Set availableNetworks
org.webrtc.IceCandidateErrorEvent: java.lang.String address
org.webrtc.Metrics: java.util.Map map
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.os.HandlerThread renderThread
org.webrtc.VideoProcessor$FrameAdaptationParameters: int cropY
org.webrtc.CameraCapturer$6: org.webrtc.CameraCapturer this$0
org.webrtc.NetworkMonitorAutoDetect: android.content.Context context
org.webrtc.PeerConnection$RTCConfiguration: boolean surfaceIceCandidatesOnIceTransportTypeChanged
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode inexact
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String RESULT_RECEIVER
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
org.webrtc.MediaCodecUtils: java.lang.String QCOM_PREFIX
org.webrtc.EglRenderer: boolean mirrorHorizontally
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer groupAlertBehavior
org.webrtc.RefCountDelegate: java.lang.Runnable releaseCallback
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CHECKING
org.webrtc.audio.WebRtcAudioTrack: int initialBufferSizeInFrames
com.google.crypto.tink.proto.AesCmacParams: int TAG_SIZE_FIELD_NUMBER
org.webrtc.EglRenderer$FrameListenerAndParams: boolean applyFpsReduction
com.google.crypto.tink.proto.Keyset$Key: com.google.crypto.tink.proto.KeyData keyData_
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] ipAddresses
com.google.crypto.tink.proto.KmsAeadKey: int version_
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] $VALUES
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String MIME_TYPE
org.webrtc.MediaStream: long nativeStream
org.webrtc.NetworkChangeDetector$IPAddress: byte[] address
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.Boolean allowGeneratedReplies
com.google.crypto.tink.proto.AesCtrKey: com.google.crypto.tink.shaded.protobuf.ByteString keyValue_
org.webrtc.VideoFrameDrawer: float[] dstPoints
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.lang.String TAG
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String REQUEST_CODE
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
org.webrtc.video.CustomVideoEncoderFactory: java.util.List forceSWCodecs
org.webrtc.HardwareVideoEncoder: org.webrtc.ThreadUtils$ThreadChecker encodeThreadChecker
com.google.crypto.tink.proto.EncryptedKeyset: com.google.crypto.tink.proto.EncryptedKeyset DEFAULT_INSTANCE
com.google.crypto.tink.proto.KeyTemplate: int OUTPUT_PREFIX_TYPE_FIELD_NUMBER
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState OPENING
org.webrtc.VideoFrameBufferType: int I420
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean isFacing
com.cloudwebrtc.webrtc.record.VideoFileRenderer: org.webrtc.GlRectDrawer drawer
org.webrtc.RTCStats: long timestampUs
org.webrtc.ThreadUtils$1Result: java.lang.Object value
org.webrtc.SurfaceTextureHelper$1: android.os.Handler val$handler
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String subText
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
com.cloudwebrtc.webrtc.record.VideoFileRenderer: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource DrawableResource
org.webrtc.GlGenericDrawer: java.lang.String vertexShader
org.webrtc.SurfaceEglRenderer: boolean isRenderingPaused
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type OES
org.webrtc.audio.WebRtcAudioTrack: boolean useLowLatency
com.google.crypto.tink.proto.EncryptedKeyset: com.google.crypto.tink.shaded.protobuf.ByteString encryptedKeyset_
com.google.crypto.tink.proto.AesCmacKey: com.google.crypto.tink.proto.AesCmacKey DEFAULT_INSTANCE
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_BASELINE_3_1
org.webrtc.EglBase14Impl$EglConnection: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.CameraEnumerationAndroid$2: int val$requestedHeight
com.google.crypto.tink.proto.AesEaxKeyFormat: com.google.crypto.tink.proto.AesEaxParams params_
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_TERSEINFO
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference MAINTAIN_RESOLUTION
org.webrtc.GlGenericDrawer: int texMatrixLocation
com.google.crypto.tink.proto.AesSivKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State ENDED
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String PLAY_SOUND
org.webrtc.NetworkMonitor$2: java.lang.String val$fieldTrialsString
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer this$0
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.NoiseSuppressor ns
org.webrtc.HardwareVideoEncoder: java.lang.Thread outputThread
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.video.CustomVideoDecoderFactory videoDecoderFactory
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: com.google.crypto.tink.proto.KeyTemplate dekTemplate_
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int height
org.webrtc.EglRenderer: java.lang.String name
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$1: int[] $SwitchMap$org$webrtc$FrameCryptor$FrameCryptionState
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$Callback callback
org.webrtc.MediaStreamTrack: java.lang.String AUDIO_TRACK_KIND
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_BIG_PICTURE_ERROR_CODE
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean important
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUMMARY_TEXT
com.cloudwebrtc.webrtc.record.VideoFileRenderer: android.media.MediaMuxer mediaMuxer
com.google.crypto.tink.proto.KeyTemplate: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState MISSINGKEY
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle Messaging
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer hour
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_SUMMARY_TEXT
org.webrtc.EncodedImage$FrameType: int nativeIndex
org.webrtc.VideoFileRenderer$1: org.webrtc.VideoFileRenderer this$0
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int NOTIFICATION_PERMISSION_REQUEST_CODE
org.webrtc.RTCStatsReport: java.util.Map stats
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String value
org.webrtc.HardwareVideoEncoder: int REQUIRED_RESOLUTION_ALIGNMENT
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.lang.String ID
org.webrtc.EncodedImage$Builder: int encodedWidth
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VIBRATION_PATTERN
org.webrtc.ScreenCapturerAndroid$1: org.webrtc.ScreenCapturerAndroid this$0
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoDecoderFactory videoDecoderFactory
org.webrtc.IceCandidate: int sdpMLineIndex
org.webrtc.audio.WebRtcAudioEffects: boolean shouldEnableNs
org.webrtc.VideoTrack: java.util.IdentityHashMap sinks
org.webrtc.SessionDescription: org.webrtc.SessionDescription$Type type
com.google.crypto.tink.proto.AesCmacKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.google.crypto.tink.proto.AesCtrHmacAeadKey: int HMAC_KEY_FIELD_NUMBER
org.webrtc.DynamicBitrateAdjuster: int bitrateAdjustmentScaleExp
org.webrtc.PeerConnection$RTCConfiguration: boolean offerExtmapAllowMixed
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] $VALUES
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3 this$1
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: android.media.AudioManager audioManager
com.google.crypto.tink.proto.Keyset: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.utils.AnyThreadResult: android.os.Handler handler
org.webrtc.VideoProcessor$FrameAdaptationParameters: long timestampNs
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ID
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_TITLE
org.webrtc.TextureBufferImpl: int unscaledWidth
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_RESPONSE_TYPE
org.webrtc.FrameCryptorKeyProvider: long nativeKeyProvider
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long when
org.webrtc.audio.WebRtcAudioTrack: org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread audioThread
org.webrtc.PeerConnection$IceServer: java.util.List tlsAlpnProtocols
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PAYLOAD
com.google.crypto.tink.proto.Keyset$Key: int STATUS_FIELD_NUMBER
org.webrtc.Logging: boolean loggingEnabled
org.webrtc.SurfaceTextureHelper: org.webrtc.EglBase eglBase
org.webrtc.SurfaceEglRenderer: int rotatedFrameHeight
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: int HMAC_KEY_FORMAT_FIELD_NUMBER
com.google.crypto.tink.proto.HmacKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel TRACE_INFO
org.webrtc.SurfaceTextureHelper$1: java.lang.String val$threadName
com.google.crypto.tink.proto.HmacKey: com.google.crypto.tink.proto.HmacKey DEFAULT_INSTANCE
org.webrtc.RtpParameters$Encoding: java.lang.String scalabilityMode
org.webrtc.RenderSynchronizer: boolean isListening
org.webrtc.Camera2Session: android.hardware.camera2.CameraManager cameraManager
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Daily
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLSurface currentSurface
org.webrtc.AndroidVideoDecoder: int sliceHeight
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver observer
org.webrtc.CameraVideoCapturer$CameraStatistics$1: org.webrtc.CameraVideoCapturer$CameraStatistics this$0
org.webrtc.RtpParameters$Encoding: boolean active
org.webrtc.RtpCapabilities$CodecCapability: int preferredPayloadType
org.webrtc.EglBase: int[] CONFIG_RGBA
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_LIGHTS
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: com.cloudwebrtc.webrtc.utils.ConstraintsMap val$constraints
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.Predicate defaultAllowedPredicate
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String CHANNEL_ACTION
org.webrtc.audio.WebRtcAudioRecord: int AUDIO_RECORD_STOP
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class baseType
org.webrtc.VideoSource: org.webrtc.CapturerObserver capturerObserver
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] $VALUES
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean ignoringFence
org.webrtc.EglRenderer$EglSurfaceCreation: org.webrtc.EglRenderer this$0
org.webrtc.RtpTransceiver$RtpTransceiverInit: org.webrtc.RtpTransceiver$RtpTransceiverDirection direction
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.RtpParameters$Encoding: boolean adaptiveAudioPacketTime
org.webrtc.RtcCertificatePem: long DEFAULT_EXPIRY
org.webrtc.Camera2Session: org.webrtc.Histogram camera2StartTimeMsHistogram
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceivers
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioStreamType
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.CapturerObserver capturerObserver
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String INDETERMINATE
com.google.android.gms.maps.model.PolylineOptions: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoFrameBufferType: int I444
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String REQUEST_EXACT_ALARMS_PERMISSION_METHOD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHORTCUT_ID
org.webrtc.DynamicBitrateAdjuster: double BITRATE_ADJUSTMENT_SEC
org.webrtc.audio.JavaAudioDeviceModule$Builder: boolean useHardwareNoiseSuppressor
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind BLUETOOTH
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: com.cloudwebrtc.webrtc.record.VideoFileRenderer videoFileRenderer
com.google.android.gms.location.LocationAvailability: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy NEGOTIATE
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnection$Observer observer
org.webrtc.CameraVideoCapturer$CameraStatistics: org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler
org.webrtc.Camera1Session$2: org.webrtc.Camera1Session this$0
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String timeZoneName
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_ERROR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANT
org.webrtc.video.CustomVideoDecoderFactory: boolean forceSWCodec
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int nativeIndex
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastScheduleTime
org.webrtc.MediaCodecUtils: java.lang.String NVIDIA_PREFIX
androidx.fragment.app.FragmentManager$LaunchedFragmentInfo: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int width
org.webrtc.StatsReport: java.lang.String type
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
org.webrtc.GlGenericDrawer: int inTcLocation
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type OFFER
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval EveryMinute
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $VALUES
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
org.webrtc.PeerConnectionFactory$Options: int ADAPTER_TYPE_VPN
org.webrtc.HardwareVideoEncoder: org.webrtc.GlRectDrawer textureDrawer
org.webrtc.SurfaceEglRenderer: org.webrtc.RendererCommon$RendererEvents rendererEvents
org.webrtc.VideoEncoder$EncodeInfo: org.webrtc.EncodedImage$FrameType[] frameTypes
com.google.crypto.tink.proto.ChaCha20Poly1305KeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$FrameType frameType
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction Update
org.webrtc.RenderSynchronizer: android.os.Handler mainThreadHandler
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL_MILLISECONDS
com.google.crypto.tink.proto.AesGcmSivKeyFormat: int version_
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.lang.String TAG
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType VideoFrameDelta
org.webrtc.audio.WebRtcAudioRecord: long nativeAudioRecord
org.webrtc.SoftwareVideoDecoderFactory: long nativeFactory
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper surfaceTextureHelper
org.webrtc.EglBase10Impl$EglConnection: org.webrtc.RefCountDelegate refCountDelegate
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus TARGET_BITRATE_OVERSHOOT
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
org.webrtc.MediaCodecUtils: int[] DECODER_COLOR_FORMATS
com.google.crypto.tink.proto.AesEaxKey: com.google.crypto.tink.proto.AesEaxKey DEFAULT_INSTANCE
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
com.google.crypto.tink.proto.KeysetInfo: int KEY_INFO_FIELD_NUMBER
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
org.webrtc.HardwareVideoEncoder: java.util.Map params
org.webrtc.YuvConverter: org.webrtc.GlGenericDrawer drawer
org.webrtc.NetworkMonitorAutoDetect: android.content.IntentFilter intentFilter
org.webrtc.NetworkMonitorAutoDetect: android.net.ConnectivityManager$NetworkCallback allNetworkCallback
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION
com.google.android.gms.cloudmessaging.zze: android.os.Parcelable$Creator CREATOR
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType H264
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity LS_VERBOSE
org.webrtc.RtpParameters$Rtcp: java.lang.String cname
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type RGB
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState OK
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$ThreadInfo signalingThread
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] $VALUES
com.google.crypto.tink.proto.AesCtrParams: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.TextureBufferImpl: int id
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.NetEqFactoryFactory neteqFactoryFactory
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver this$1
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: boolean isRunning
com.google.android.gms.common.internal.ClientIdentity: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String STOP_FOREGROUND_SERVICE
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmfSender
com.google.crypto.tink.proto.KeyTemplate: int TYPE_URL_FIELD_NUMBER
org.webrtc.CameraCapturer: int OPEN_CAMERA_DELAY_MS
org.webrtc.H264Utils: java.lang.String H264_CONSTRAINED_HIGH_3_1
org.webrtc.VideoDecoder$DecodeInfo: boolean isMissingFrames
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState CLOSED
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List preferredDeviceList
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
com.cloudwebrtc.webrtc.utils.PermissionUtils: java.lang.String REQUEST_CODE
com.cloudwebrtc.webrtc.PeerConnectionObserver: io.flutter.plugin.common.EventChannel$EventSink eventSink
org.webrtc.EglRenderer: java.lang.Object fpsReductionLock
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType connectionType
com.google.crypto.tink.proto.HmacKey: int version_
com.google.crypto.tink.proto.KeyTypeEntry: com.google.crypto.tink.proto.KeyTypeEntry DEFAULT_INSTANCE
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.audio.AudioDeviceModule audioDeviceModule
com.dexterous.flutterlocalnotifications.models.PersonDetails: com.dexterous.flutterlocalnotifications.models.IconSource iconBitmapSource
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.content.Intent mediaProjectionPermissionResultData
org.webrtc.EncodedImage$Builder: long captureTimeNs
org.webrtc.EglRenderer: java.lang.Object frameLock
com.google.crypto.tink.proto.KeyTypeEntry: com.google.crypto.tink.shaded.protobuf.Parser PARSER
org.webrtc.CameraCapturer: org.webrtc.CameraEnumerator cameraEnumerator
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy BALANCED
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle BigText
org.webrtc.RtpCapabilities: java.util.List codecs
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoFrameDrawer videoFrameDrawer
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean notifiedDestroy
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
org.webrtc.EncodedImage: int encodedHeight
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dataChannels
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_DIFF_THRESHOLD
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String icon
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String GROUP_ID
org.webrtc.Camera1Capturer: boolean captureToTexture
com.google.crypto.tink.proto.AesEaxKey: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean indeterminate
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ACTION_ID
com.google.crypto.tink.proto.Keyset: int PRIMARY_KEY_ID_FIELD_NUMBER
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String shortcutId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TAG
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState ERROR
org.webrtc.audio.LowLatencyAudioBufferManager: java.lang.String TAG
org.webrtc.CameraCapturer: org.webrtc.CameraVideoCapturer$CameraSwitchHandler switchEventsHandler
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource BitmapFilePath
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: boolean forceHandleAudioRouting
org.webrtc.EglThread: org.webrtc.EglThread$ReleaseMonitor releaseMonitor
com.google.android.gms.maps.model.GroundOverlayOptions: android.os.Parcelable$Creator CREATOR
org.webrtc.Camera1Session: java.lang.String TAG
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType CONNECTION_4G
org.webrtc.CameraEnumerationAndroid$1: int val$requestedFps
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat
org.webrtc.CameraCapturer: java.lang.String cameraName
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.util.Map mVideoCapturers
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
org.webrtc.NetworkMonitor: java.lang.Object networkChangeDetectorLock
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy
org.webrtc.Metrics$HistogramInfo: int max
org.webrtc.AudioTrack: java.util.IdentityHashMap sinks
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_GREEN
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_ALPHA
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: int audioAttributeContentType
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean usesChronometer
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
org.webrtc.AndroidVideoDecoder: org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata renderedTextureMetadata
com.cloudwebrtc.webrtc.record.VideoFileRenderer: int outputFileHeight
org.webrtc.audio.JavaAudioDeviceModule: int inputSampleRate
org.webrtc.CameraVideoCapturer$CameraStatistics: java.lang.Runnable cameraObserver
org.webrtc.EglThread$HandlerWithExceptionCallbacks: java.lang.Object callbackLock
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_GROUP_METHOD
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_VIDEO
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.util.ArrayList lines
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Object icon
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: com.cloudwebrtc.webrtc.GetUserMediaImpl this$0
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
org.webrtc.CameraEnumerationAndroid$1: int MAX_FPS_LOW_DIFF_WEIGHT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_ON_MS
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer stableWritableConnectionPingIntervalMs
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState DECRYPTIONFAILED
com.google.crypto.tink.proto.AesGcmKeyFormat: int KEY_SIZE_FIELD_NUMBER
com.google.crypto.tink.proto.KmsEnvelopeAeadKeyFormat: java.lang.String kekUri_
com.google.crypto.tink.proto.AesCtrParams: int IV_SIZE_FIELD_NUMBER
com.google.crypto.tink.proto.AesCtrParams: com.google.crypto.tink.proto.AesCtrParams DEFAULT_INSTANCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String TAG
org.webrtc.AndroidVideoDecoder: boolean hasDecodedFirstFrame
org.webrtc.CallSessionFileRotatingLogSink: long nativeSink
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState DISCONNECTED
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON
org.webrtc.VideoFrameBufferType: int NATIVE
org.webrtc.ScreenCapturerAndroid: int VIRTUAL_DISPLAY_DPI
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastDequeueTime
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: io.flutter.plugin.common.MethodChannel$Result val$result
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims
com.google.android.gms.maps.model.StrokeStyle: android.os.Parcelable$Creator CREATOR
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.VideoEncoderFactory videoEncoderFactory
org.webrtc.Camera2Session: android.hardware.camera2.CameraCaptureSession captureSession
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy ENABLED
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame lastI420Frame
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Context applicationContext
org.webrtc.HardwareVideoEncoder$BusyCount: int count
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.FecControllerFactoryFactoryInterface fecControllerFactoryFactory
com.google.crypto.tink.proto.AesCtrHmacAeadKeyFormat: com.google.crypto.tink.proto.HmacKeyFormat hmacKeyFormat_
org.webrtc.HardwareVideoEncoder: java.lang.Exception shutdownException
com.google.crypto.tink.proto.AesEaxKeyFormat: com.google.crypto.tink.shaded.protobuf.Parser PARSER
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatLines
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANCE
org.webrtc.audio.WebRtcAudioRecord: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback errorCallback
org.webrtc.EglRenderer: java.lang.Runnable logStatisticsRunnable
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
org.webrtc.CameraCapturer: org.webrtc.CameraCapturer$SwitchState switchState
org.webrtc.PeerConnection$RTCConfiguration: boolean enableImplicitRollback
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ByteArray
org.webrtc.CameraCapturer: int height
org.webrtc.EglRenderer$FrameListenerAndParams: org.webrtc.EglRenderer$FrameListener listener
com.google.crypto.tink.proto.HmacKeyFormat: int PARAMS_FIELD_NUMBER
org.webrtc.SurfaceViewRenderer: java.lang.String resourceName
org.webrtc.NetworkMonitorAutoDetect: void setConnectivityManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate)
com.it_nomads.fluttersecurestorage.ciphers.StorageCipherAlgorithm: com.it_nomads.fluttersecurestorage.ciphers.StorageCipherAlgorithm valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void stop()
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpReceiverCapabilities(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.MediaStreamTrack: boolean nativeSetEnabled(long,boolean)
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.NativeAndroidVideoTrackSource: void nativeAdaptOutputFormat(long,int,int,java.lang.Integer,int,int,java.lang.Integer,java.lang.Integer)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
org.webrtc.DtmfSender: int interToneGap()
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
org.webrtc.HardwareVideoEncoder$BusyCount: void waitForZero()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$100(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String connectionStateString(org.webrtc.PeerConnection$PeerConnectionState)
org.webrtc.JniCommon: void nativeFreeByteBuffer(java.nio.ByteBuffer)
org.webrtc.DataChannel$Init: int getMaxRetransmits()
org.webrtc.PeerConnection: boolean getStats(org.webrtc.StatsObserver,org.webrtc.MediaStreamTrack)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getImplementations()
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataV()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void disableFenceForTest()
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
org.webrtc.EglBase$ConfigBuilder: EglBase$ConfigBuilder()
org.webrtc.BuiltinAudioDecoderFactoryFactory: BuiltinAudioDecoderFactoryFactory()
org.webrtc.JniCommon: void nativeReleaseRef(long)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(java.nio.ByteBuffer,int,int)
org.webrtc.audio.VolumeLogger$LogVolumeTask: VolumeLogger$LogVolumeTask(org.webrtc.audio.VolumeLogger,int,int)
org.webrtc.ExternalAudioProcessingFactory: ExternalAudioProcessingFactory()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorGetEnabled(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void releaseOutputBuffer(int,boolean)
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(boolean,int,int)
org.webrtc.TextureBufferImpl: android.os.Handler getToI420Handler()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings$lambda$4(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetHeight()
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
androidx.core.app.RemoteInput$Api26Impl: java.util.Set getAllowedDataTypes(java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeatNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnectionDependencies: org.webrtc.SSLCertificateVerifier getSSLCertificateVerifier()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableEncryptedRtpHeaderExtensions(boolean)
org.webrtc.EglThread: void onRenderWindowClose()
org.webrtc.EglThread: EglThread(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglThread$HandlerWithExceptionCallbacks,org.webrtc.EglBase$EglConnection,org.webrtc.RenderSynchronizer)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onWebRtcAudioRecordSamplesReady$4(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.LibvpxVp9Encoder: java.util.List nativeGetSupportedScalabilityModes()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()
org.webrtc.VideoEncoderFallback: long nativeCreate(long,org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
org.webrtc.NativeCapturerObserver: void onCapturerStarted(boolean)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState fromNativeIndex(int)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void onFrame(org.webrtc.VideoFrame)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void startRearDisplayPresentationSession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setSupportsPixelBuffer(boolean)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource valueOf(java.lang.String)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.AudioTrack)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupAllowWhileIdleAlarm(com.dexterous.flutterlocalnotifications.models.NotificationDetails,android.app.AlarmManager,long,android.app.PendingIntent)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] $values()
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getStreamIds()
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setVisibility(android.app.Notification$Builder,int)
org.webrtc.MediaCodecWrapper: void flush()
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: long lseek(java.io.FileDescriptor,long,int)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsEllipticCurves(java.util.List)
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType)
org.webrtc.EglBase10Impl$EglConnection: void makeCurrent(javax.microedition.khronos.egl.EGLSurface)
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInNoiseSuppressorSupported()
org.webrtc.NV12Buffer: NV12Buffer(int,int,int,int,java.nio.ByteBuffer,java.lang.Runnable)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
org.webrtc.SurfaceTextureHelper$2: SurfaceTextureHelper$2(org.webrtc.SurfaceTextureHelper)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus release()
org.webrtc.GlRectDrawer$ShaderCallbacks: GlRectDrawer$ShaderCallbacks()
org.webrtc.SurfaceTextureHelper: void lambda$stopListening$1()
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact[] values()
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
org.webrtc.SdpObserver: void onSetFailure(java.lang.String)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.audio.WebRtcAudioRecord: boolean logActiveRecordingConfigs(int,java.util.List)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void release()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setEventChannel(io.flutter.plugin.common.EventChannel)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState fromNativeIndex(int)
org.webrtc.CameraCapturer: void reportCameraSwitchError(java.lang.String,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$I420Buffer allocateI420Buffer(int,int)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyNV12ToI420Buffer(java.nio.ByteBuffer,int,int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetCodecPreferences(java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)
org.webrtc.SurfaceTextureHelper: void release()
org.webrtc.DynamicBitrateAdjuster: double getBitrateAdjustmentScale()
org.webrtc.Logging: java.lang.String getStackTraceString(java.lang.Throwable)
org.webrtc.Camera2Enumerator: int getFpsUnitFactor(android.util.Range[])
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$negate(org.webrtc.Predicate)
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
org.webrtc.FileVideoCapturer$VideoReader: org.webrtc.VideoFrame getNextFrame()
androidx.core.view.WindowInsetsCompat$Impl: int hashCode()
org.webrtc.ScreenCapturerAndroid: ScreenCapturerAndroid(android.content.Intent,android.media.projection.MediaProjection$Callback)
org.webrtc.JniHelper: byte[] getStringBytes(java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] values()
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String signalingStateString(org.webrtc.PeerConnection$SignalingState)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readColor(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.RtpParameters$HeaderExtension: boolean getEncrypted()
org.webrtc.EncodedImage$FrameType: int getNative()
org.webrtc.VideoDecoderFallback: VideoDecoderFallback(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
com.google.crypto.tink.config.internal.TinkFipsUtil$AlgorithmFipsCompatibility: com.google.crypto.tink.config.internal.TinkFipsUtil$AlgorithmFipsCompatibility valueOf(java.lang.String)
org.webrtc.TimestampAligner: void checkNativeAlignerExists()
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchError(java.lang.String)
org.webrtc.audio.AudioDeviceModule: long getNativeAudioDeviceModulePointer()
org.webrtc.audio.AudioDeviceModule: void setMicrophoneMute(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader33()
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoEncoderFactory$VideoEncoderSelector $default$getEncoderSelector(org.webrtc.VideoEncoderFactory)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle setConversationTitle(android.app.Notification$MessagingStyle,java.lang.CharSequence)
androidx.core.location.LocationCompat$Api26Impl: void removeVerticalAccuracy(android.location.Location)
org.webrtc.audio.WebRtcAudioRecord: int logRecordingConfigurations(android.media.AudioRecord,boolean)
org.webrtc.audio.WebRtcAudioTrack: int getBufferSizeInFrames()
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform[] values()
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode[] values()
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$402(com.cloudwebrtc.webrtc.GetUserMediaImpl,boolean)
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection create(org.webrtc.EglBase$Context,int[])
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setTorch(java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtcCertificatePem: RtcCertificatePem(java.lang.String,java.lang.String)
androidx.core.app.NotificationCompat$MessagingStyle$Api26Impl: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int getDrawableResourceId(android.content.Context,java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: kotlin.Unit lambda$startListening$1(java.util.List,com.twilio.audioswitch.AudioDevice)
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataV()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStopped(android.app.Activity)
org.webrtc.VideoSource: void setIsScreencast(boolean)
org.webrtc.MediaStreamTrack: java.lang.String nativeGetId(long)
org.webrtc.Histogram: org.webrtc.Histogram createCounts(java.lang.String,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describePerson(androidx.core.app.Person)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: io.flutter.plugin.common.BinaryMessenger getMessenger()
org.webrtc.GlGenericDrawer: void prepareShader(org.webrtc.GlGenericDrawer$ShaderType,float[],int,int,int,int)
androidx.core.content.ContextCompat$Api33Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
org.webrtc.PeerConnectionFactory: long nativeCreateVideoTrack(long,java.lang.String,long)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
org.webrtc.PeerConnection: void nativeStopRtcEventLog()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getDefault()
org.webrtc.Camera2Helper: java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String)
org.webrtc.audio.WebRtcAudioEffects: boolean toggleNS(boolean)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioEffects: boolean isNoiseSuppressorSupported()
org.webrtc.CameraCapturer$4: void onCameraClosed()
org.webrtc.CameraCapturer$4: void onCameraError(java.lang.String)
org.webrtc.RendererCommon$GlDrawer: void drawOes(int,float[],int,int,int,int,int,int)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void notImplemented()
org.webrtc.MediaCodecWrapper: android.media.MediaCodecInfo getCodecInfo()
org.webrtc.NetworkMonitor$2: void onNetworkDisconnect(long)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int diff(java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image acquireLatestImage()
org.webrtc.VideoCodecInfo: VideoCodecInfo(java.lang.String,java.util.Map,java.util.List)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setShortcutId(android.app.Notification$Builder,java.lang.String)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus reinitDecode(int,int)
org.webrtc.ThreadUtils: ThreadUtils()
org.webrtc.CryptoOptions$Builder: CryptoOptions$Builder()
org.webrtc.EglBase10Impl: void makeCurrent()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics getViewportMetrics()
org.webrtc.PeerConnectionFactory: void nativeShutdownInternalTracer()
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List,java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.Person buildPerson(android.content.Context,com.dexterous.flutterlocalnotifications.models.PersonDetails)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.PeerConnection$IceServer: java.util.List getTlsEllipticCurves()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService: FlutterFirebaseMessagingService()
com.google.firebase.iid.Registrar: Registrar()
org.webrtc.TimestampAligner: long translateTimestamp(long)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress valueOf(java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType[] values()
org.webrtc.VideoTrack: void nativeSetShouldReceive(long,boolean)
org.webrtc.RendererCommon$VideoLayoutMeasure: RendererCommon$VideoLayoutMeasure()
org.webrtc.PeerConnection: long getNativeOwnedPeerConnection()
org.webrtc.YuvHelper: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState fromNativeIndex(int)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaSource: void checkMediaSourceExists()
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer$Type getType()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection access$302(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer,android.media.projection.MediaProjection)
org.webrtc.RtpParameters$Codec: java.lang.String getName()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
org.webrtc.MediaStream: boolean nativeRemoveVideoTrack(long,long)
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(int[])
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Srtp getSrtp()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean handlesCropAndRotation()
org.webrtc.NetworkMonitor: void nativeNotifyConnectionTypeChanged(long)
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.audio.WebRtcAudioTrack: void logMainParameters()
org.webrtc.PeerConnection$Observer: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
org.webrtc.JavaI420Buffer: JavaI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setColorized(android.app.Notification$Builder,boolean)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void merge(java.util.Map)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnectionInternal(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
org.webrtc.VideoDecoderFallback: long createNative(long)
org.webrtc.video.CustomVideoDecoderFactory: CustomVideoDecoderFactory(org.webrtc.EglBase$Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void rescheduleNotifications(android.content.Context)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: boolean isHardwareEncoder()
org.webrtc.Predicate: org.webrtc.Predicate negate()
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
org.webrtc.Camera1Enumerator: java.lang.String[] getDeviceNames()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap(java.util.Map)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(int)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$PortPrunePolicy getTurnPortPrunePolicy()
org.webrtc.VideoFrameDrawer$YuvUploader: int[] getYuvTextures()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean isValidDrawableResource(android.content.Context,java.lang.String,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onActivityResult(int,int,android.content.Intent)
org.webrtc.PeerConnection: boolean addStream(org.webrtc.MediaStream)
com.dexterous.flutterlocalnotifications.models.BitmapSource: BitmapSource(java.lang.String,int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushInt(int)
org.webrtc.RtpParameters$Codec: java.util.Map getParameters()
org.webrtc.PeerConnection$Observer$-CC: void $default$onRemoveTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeExportSharedKey(long,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean checkFieldTrial(java.lang.String,java.lang.String,boolean)
org.webrtc.RtpReceiver: org.webrtc.MediaStreamTrack track()
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] values()
org.webrtc.RendererCommon: RendererCommon()
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] values()
org.webrtc.EglRenderer: java.lang.String averageTimeAsString(long,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSound(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] values()
org.webrtc.LibaomAv1Encoder: java.util.List nativeGetSupportedScalabilityModes()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
org.webrtc.SurfaceViewRenderer: void updateSurfaceSize()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMinBitrateBps()
org.webrtc.CameraCapturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus release()
org.webrtc.NetworkMonitor: NetworkMonitor()
org.webrtc.EglBase10Impl: boolean hasSurface()
org.webrtc.audio.JavaAudioDeviceModule: long nativeCreateAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: RepeatInterval(java.lang.String,int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
org.webrtc.NativeAndroidVideoTrackSource: NativeAndroidVideoTrackSource(long)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus release()
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState valueOf(java.lang.String)
org.webrtc.SurfaceEglRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.LibvpxVp9Encoder: long nativeCreate(long)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor[] values()
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnLowerThanM(int,int,int,int,int)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: JavaAudioDeviceModule$AudioTrackStartErrorCode(java.lang.String,int)
org.webrtc.RenderSynchronizer: void onDisplayRefreshCycleBegin(long)
org.webrtc.Logging: void enableLogTimeStamps()
org.webrtc.Camera1Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.CameraCapturer$3: CameraCapturer$3(org.webrtc.CameraCapturer)
org.webrtc.Logging: void injectLoggable(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.RtpTransceiver: void stopStandard()
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.MediaStream createLocalMediaStream(java.lang.String)
org.webrtc.DtmfSender: java.lang.String nativeTones(long)
org.webrtc.GlGenericDrawer: void drawOes(int,float[],int,int,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
org.webrtc.LibvpxVp9Encoder: java.util.List scalabilityModes()
org.webrtc.CryptoOptions$SFrame: CryptoOptions$SFrame(org.webrtc.CryptoOptions,boolean)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(int,int)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
org.webrtc.AndroidVideoDecoder$1: void run()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
org.webrtc.ScreenCapturerAndroid: void startCapture(int,int,int)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkControllerFactoryFactory(org.webrtc.NetworkControllerFactoryFactory)
org.webrtc.JavaI420Buffer: int getHeight()
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] values()
com.cloudwebrtc.webrtc.utils.Callback: void invoke(java.lang.Object[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugins.pathprovider.PathProviderPlugin: PathProviderPlugin()
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: org.webrtc.MediaConstraints parseMediaConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.NetworkMonitor: void startMonitoring()
org.webrtc.NetworkChangeDetector$NetworkInformation: java.lang.String getName()
org.webrtc.EglBase10Impl: void createDummyPbufferSurface()
org.webrtc.audio.WebRtcAudioRecord$1: WebRtcAudioRecord$1(java.util.concurrent.atomic.AtomicInteger)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRenegotiationNeeded()
org.webrtc.Logging: void w(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
org.webrtc.RtpReceiver: RtpReceiver(long)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: NetworkMonitorAutoDetect$NetworkState(boolean,int,int,int,int)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.lang.String)
org.webrtc.VideoEncoder$-CC: long $default$createNative(org.webrtc.VideoEncoder,long)
org.webrtc.SurfaceTextureHelper$1: org.webrtc.SurfaceTextureHelper call()
androidx.core.view.WindowInsetsCompat$Impl: WindowInsetsCompat$Impl(androidx.core.view.WindowInsetsCompat)
org.webrtc.RefCountDelegate: void release()
org.webrtc.EglBase10Impl: void checkIsNotReleased()
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataY()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setGroupAlertBehavior(android.app.Notification$Builder,int)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] $values()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
org.webrtc.EglRenderer: void createEglSurface(android.graphics.SurfaceTexture)
org.webrtc.Logging: void nativeEnableLogTimeStamps()
org.webrtc.ExternalAudioProcessingFactory: void setCapturePostProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: FlutterRenderer$ImageTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
org.webrtc.GlTextureFrameBuffer: int getHeight()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getFrameSizePixels()
androidx.core.view.ViewGroupCompat$Api21Impl: int getNestedScrollAxes(android.view.ViewGroup)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.EglBase14Impl: void release()
org.webrtc.RTCStats: java.lang.String getType()
org.webrtc.CameraCapturer: java.lang.String getCameraName()
org.webrtc.SoftwareVideoEncoderFactory: long nativeCreate(long,long,org.webrtc.VideoCodecInfo)
org.webrtc.StatsReport: StatsReport(java.lang.String,java.lang.String,double,org.webrtc.StatsReport$Value[])
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.core.location.LocationManagerCompat$Api31Impl: boolean hasProvider(android.location.LocationManager,java.lang.String)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List)
org.webrtc.ScreenCapturerAndroid: android.media.projection.MediaProjection getMediaProjection()
com.google.crypto.tink.proto.OutputPrefixType: com.google.crypto.tink.proto.OutputPrefixType valueOf(java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
com.google.crypto.tink.shaded.protobuf.FieldType$Collection: com.google.crypto.tink.shaded.protobuf.FieldType$Collection valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
org.webrtc.EglBase14Impl: boolean hasSurface()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.CapturerObserver access$100(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.RenderSynchronizer: RenderSynchronizer()
org.webrtc.ThreadUtils$BlockingOperation: void run()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioConfigVerified()
org.webrtc.audio.WebRtcAudioTrack: boolean startPlayout()
org.webrtc.CameraVideoCapturer$CameraStatistics: void addFrame()
org.webrtc.NetworkMonitor$2: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.Logging: void deleteInjectedLoggable()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: GetUserMediaImpl$5(com.cloudwebrtc.webrtc.GetUserMediaImpl)
org.webrtc.WrappedNativeVideoEncoder: WrappedNativeVideoEncoder()
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation: StyleInformation()
org.webrtc.FrameCryptorKeyProvider: byte[] nativeRatchetSharedKey(long,int)
org.webrtc.NV12Buffer: int getWidth()
com.cloudwebrtc.webrtc.utils.PermissionUtils: PermissionUtils()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus resetCodec(int,int,boolean)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSuspendBelowMinBitrate()
org.webrtc.NV12Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.PeerConnection$IceServer$Builder: PeerConnection$IceServer$Builder(java.util.List)
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLConfig getConfig()
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] $values()
org.webrtc.GlUtil$GlOutOfMemoryException: GlUtil$GlOutOfMemoryException(int,java.lang.String)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdk(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorGetKeyIndex(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context)
org.webrtc.SoftwareVideoDecoderFactory: boolean nativeIsSupported(long,org.webrtc.VideoCodecInfo)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
org.webrtc.AndroidVideoDecoder: boolean isSupportedColorFormat(int)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
org.webrtc.RenderSynchronizer: void openRenderWindow()
org.webrtc.DataChannel: org.webrtc.DataChannel$State nativeState()
org.webrtc.Camera1Session: void updateCameraParameters(android.hardware.Camera,android.hardware.Camera$Parameters,org.webrtc.CameraEnumerationAndroid$CaptureFormat,org.webrtc.Size,boolean)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String getString(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.ArrayList readMessages(java.util.ArrayList)
org.webrtc.PeerConnectionFactory: java.lang.String nativeFindFieldTrialsFullName(java.lang.String)
org.webrtc.GlRectDrawer: void release()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
org.webrtc.LibvpxVp8Encoder: boolean isHardwareEncoder()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void requestMobileNetwork(android.net.ConnectivityManager$NetworkCallback)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(org.webrtc.MediaStream)
org.webrtc.VideoFrame: void retain()
androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()
org.webrtc.VideoFrame$Buffer: void release()
org.webrtc.RendererCommon: android.graphics.Matrix convertMatrixToAndroidGraphicsMatrix(float[])
org.webrtc.PeerConnection$RTCConfiguration: java.lang.String getTurnLoggingId()
org.webrtc.RtpReceiver: org.webrtc.RtpParameters nativeGetParameters(long)
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
org.webrtc.NetworkMonitor: void addObserver(org.webrtc.NetworkMonitor$NetworkObserver)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferSizeInFrames()
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType valueOf(java.lang.String)
org.webrtc.SurfaceTextureHelper: void lambda$setTextureSize$2(int,int)
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.AudioTrack)
androidx.core.location.LocationManagerCompat$Api19Impl: boolean tryRequestLocationUpdates(android.location.LocationManager,java.lang.String,androidx.core.location.LocationRequestCompat,androidx.core.location.LocationManagerCompat$LocationListenerTransport)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaCodecInfo getCodecInfo()
org.webrtc.RtpTransceiver$RtpTransceiverInit: int getDirectionNativeIndex()
org.webrtc.EglRenderer: void setMirrorVertically(boolean)
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes[] values()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: DateTimeComponents(java.lang.String,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void maybeWaitOnFence(android.media.Image)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putNull(java.lang.String)
org.webrtc.SurfaceViewRenderer: void setMirror(boolean)
com.cloudwebrtc.webrtc.utils.ObjectType: ObjectType(java.lang.String,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] $values()
org.webrtc.RtpSender: long getNativeRtpSender()
org.webrtc.AndroidVideoDecoder$FrameInfo: AndroidVideoDecoder$FrameInfo(long,int)
org.webrtc.SoftwareVideoDecoderFactory$1: long createNative(long)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,android.app.Person)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaStreamToMap(org.webrtc.MediaStream)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.PeerConnectionFactory: void initializeFieldTrials(java.lang.String)
org.webrtc.Camera2Session$CaptureSessionCallback: void lambda$onConfigured$0(org.webrtc.VideoFrame)
org.webrtc.CameraEnumerationAndroid$2: int diff(java.lang.Object)
org.webrtc.EglBase14Impl$EglConnection: EglBase14Impl$EglConnection(android.opengl.EGLContext,int[])
org.webrtc.NetworkMonitor: void addNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderSuccess()
org.webrtc.Camera2Session$CaptureSessionCallback: Camera2Session$CaptureSessionCallback(org.webrtc.Camera2Session)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack)
org.webrtc.VideoFileRenderer: void lambda$onFrame$0(org.webrtc.VideoFrame)
org.webrtc.Histogram: Histogram(long)
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State[] values()
org.webrtc.VideoFrame$I420Buffer: int getStrideV()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback)
org.webrtc.VideoTrack: void nativeFreeSink(long)
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
org.webrtc.VideoTrack: void nativeRemoveSink(long,long)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convert(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.audio.WebRtcAudioEffects: android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects()
org.webrtc.MediaCodecWrapper: void release()
org.webrtc.ThreadUtils$3: void run()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void processForegroundNotificationAction(android.content.Intent,java.util.Map)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: OrientationAwareScreenCapturer$3(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.CameraEnumerationAndroid: void reportCameraResolution(org.webrtc.Histogram,org.webrtc.Size)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.NetworkChangeDetectorFactory: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
org.webrtc.VideoTrack: void addSink(org.webrtc.VideoSink)
org.webrtc.SoftwareVideoDecoderFactory: long nativeCreate(long,long,org.webrtc.VideoCodecInfo)
androidx.core.app.NotificationManagerCompat$Api26Impl: java.util.List getNotificationChannels(android.app.NotificationManager)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableGcmCryptoSuites(boolean)
io.flutter.plugins.urllauncher.WebViewActivity: WebViewActivity()
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateVolume(java.lang.String,android.media.AudioManager)
org.webrtc.SessionDescription$Type: SessionDescription$Type(java.lang.String,int)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void stop()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: OrientationAwareScreenCapturer$2(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
io.flutter.plugins.googlemaps.Messages$PlatformJointType: io.flutter.plugins.googlemaps.Messages$PlatformJointType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void finish()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)
org.webrtc.ExternalAudioProcessingFactory: long nativeSetCapturePostProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.EglBase14Impl: int surfaceWidth()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void tryAddRendererToVideoTrack()
com.google.crypto.tink.proto.KeyStatusType: com.google.crypto.tink.proto.KeyStatusType valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect: java.lang.String getWifiSSID(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState nativeIceGatheringState()
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(java.lang.Object)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveStream(org.webrtc.MediaStream)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$TextureBuffer applyTransformMatrix(android.graphics.Matrix,int,int)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,java.lang.String)
org.webrtc.SurfaceTextureHelper: void lambda$returnTextureFrame$5()
org.webrtc.TurnCustomizer: void dispose()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addRemoteInput(android.app.Notification$Action$Builder,android.app.RemoteInput)
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadYuvData(int,int,int[],java.nio.ByteBuffer[])
org.webrtc.EglBase$-CC: org.webrtc.EglBase create()
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalTrack(java.lang.String,org.webrtc.MediaStreamTrack)
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] values()
org.webrtc.EglRenderer: void release()
org.webrtc.FrameCryptorKeyProvider: boolean nativeSetSharedKey(long,int,byte[])
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$success$0(java.lang.Object)
org.webrtc.RtpTransceiver: boolean isStopped()
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(int)
org.webrtc.PeerConnection$IceServer: boolean equals(java.lang.Object)
org.webrtc.SurfaceViewRenderer: void postOrRun(java.lang.Runnable)
org.webrtc.EglBase14$EglConnection: android.opengl.EGLContext getContext()
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context)
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions createCryptoOptions()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer getOutputBuffer(int)
org.webrtc.DataChannel$State: DataChannel$State(java.lang.String,int)
org.webrtc.CryptoOptions$SFrame: boolean getRequireFrameEncryption()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getInputFormat()
org.webrtc.Logging: void w(java.lang.String,java.lang.String,java.lang.Throwable)
androidx.profileinstaller.ProfileInstallReceiver: ProfileInstallReceiver()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
org.webrtc.JniHelper: java.lang.Object getStringClass()
io.flutter.plugins.googlemaps.Messages$PlatformMapType: io.flutter.plugins.googlemaps.Messages$PlatformMapType[] values()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
org.webrtc.FrameCryptor: void nativeSetKeyIndex(long,int)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorSetEnabled(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix,int,int,int,int)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes build(android.media.AudioAttributes$Builder)
androidx.security.crypto.MasterKey$KeyScheme: androidx.security.crypto.MasterKey$KeyScheme valueOf(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits$lambda$9(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: CameraEnumerationAndroid$CaptureFormat$FramerateRange(int,int)
org.webrtc.MediaCodecWrapper: void stop()
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn()
org.webrtc.AudioTrack: void addSink(org.webrtc.AudioTrackSink)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetCurrentDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onDestroyBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State state()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
androidx.core.app.Person$Api28Impl: androidx.core.app.Person fromAndroidPerson(android.app.Person)
org.webrtc.NV12Buffer: void nativeCropAndScale(int,int,int,int,int,int,java.nio.ByteBuffer,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onFirstFrameAvailable()
org.webrtc.PeerConnection$RTCConfiguration: int getIceCandidatePoolSize()
org.webrtc.VideoProcessor$-CC: org.webrtc.VideoFrame applyFrameAdaptationParameters(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pGroupChange(android.net.wifi.p2p.WifiP2pGroup)
com.cloudwebrtc.webrtc.CameraEventsHandler: void waitForCameraOpen()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
org.webrtc.audio.WebRtcAudioRecord: boolean setNoiseSuppressorEnabled(boolean)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void start()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.HashMap getMappedNotificationChannel(android.app.NotificationChannel)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setZoom(java.lang.String,double,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextTrackUUID()
org.webrtc.VideoSource: void dispose()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.SimulcastVideoEncoder: boolean isHardwareEncoder()
org.webrtc.GlRectDrawer: void drawOes(int,float[],int,int,int,int,int,int)
org.webrtc.RtpSender: long nativeGetDtmfSender(long)
org.webrtc.SurfaceViewRenderer: SurfaceViewRenderer(android.content.Context,android.util.AttributeSet)
androidx.core.view.WindowInsetsCompat$Impl20: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVibrationPattern(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.DtmfSender: int duration()
androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)
org.webrtc.SdpObserver: void onSetSuccess()
org.webrtc.VideoFrameDrawer: int distance(float,float,float,float)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status[] values()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFormat(int)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
org.webrtc.PeerConnection$BundlePolicy: PeerConnection$BundlePolicy(java.lang.String,int)
org.webrtc.FrameCryptor$FrameCryptionState: FrameCryptor$FrameCryptionState(java.lang.String,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getTransceivers(io.flutter.plugin.common.MethodChannel$Result)
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.SoftwareVideoEncoderFactory$1: long createNative(long)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void sendEvent(java.lang.Object)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: NotificationChannelAction(java.lang.String,int)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: void close(java.io.FileDescriptor)
org.webrtc.EglRenderer$EglSurfaceCreation: void setSurface(java.lang.Object)
org.webrtc.SoftwareVideoEncoderFactory: SoftwareVideoEncoderFactory()
org.webrtc.MediaCodecUtils: boolean isSoftwareOnlyQOrHigher(android.media.MediaCodecInfo)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent getLaunchIntent(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
org.webrtc.NetworkMonitor$2: NetworkMonitor$2(org.webrtc.NetworkMonitor,java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromTypeName(java.lang.String)
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneU()
org.webrtc.VideoDecoder$-CC: long $default$createNative(org.webrtc.VideoDecoder,long)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
org.webrtc.AudioTrack: void setVolume(double)
org.webrtc.HardwareVideoEncoder$BusyCount: void increment()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setEnableAes128Sha1_32CryptoCipher(boolean)
org.webrtc.VideoEncoder$EncodeInfo: VideoEncoder$EncodeInfo(org.webrtc.EncodedImage$FrameType[])
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.YuvHelper: void ABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.DataChannelObserver: java.lang.String dataChannelStateString(org.webrtc.DataChannel$State)
org.webrtc.RtpTransceiver: void nativeSetCodecPreferences(long,java.util.List)
org.webrtc.FrameCryptorKeyProvider: byte[] ratchetKey(java.lang.String,int)
org.webrtc.VideoFrame$TextureBuffer$Type: VideoFrame$TextureBuffer$Type(java.lang.String,int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putLong(java.lang.String,long)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
com.google.crypto.tink.shaded.protobuf.FieldType: com.google.crypto.tink.shaded.protobuf.FieldType valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void waitOnFence(android.media.Image)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackError(java.lang.String)
com.cloudwebrtc.webrtc.R: R()
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType[] $values()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)
org.webrtc.WrappedNativeI420Buffer: void retain()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: MethodCallHandlerImpl$5(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String access$000(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
org.webrtc.EglRenderer$1: EglRenderer$1(org.webrtc.EglRenderer)
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context,int[])
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context,long,java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpSenderToMap(org.webrtc.RtpSender)
org.webrtc.SurfaceEglRenderer: void onFrame(org.webrtc.VideoFrame)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
org.webrtc.PeerConnection: void close()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.util.ArrayList access$100(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: long id()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void trackDispose(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Boolean isHardwareEncoder$lambda$7(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState nativeSignalingState()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
org.webrtc.Camera1Enumerator: boolean isBackFacing(java.lang.String)
org.webrtc.CameraCapturer: void checkIsOnCameraThread()
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: java.lang.String getWifiSSID()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$IceTransportsType getIceTransportsType()
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()
org.webrtc.NetworkMonitorAutoDetect: java.util.List getActiveNetworkList()
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkPreference(java.util.List,int)
org.webrtc.Predicate: boolean test(java.lang.Object)
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics valueOf(java.lang.String)
org.webrtc.EglThread: void removeExceptionCallback(java.lang.Runnable)
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setFixedSize(int,int)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.Camera2Session$CameraStateCallback: Camera2Session$CameraStateCallback(org.webrtc.Camera2Session)
org.webrtc.MediaStreamTrack: java.lang.String nativeGetKind(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void setActivity(android.app.Activity)
org.webrtc.RtpParameters$Rtcp: RtpParameters$Rtcp(java.lang.String,boolean)
org.webrtc.FrameCryptor: long getNativeFrameCryptor()
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy[] $values()
org.webrtc.Camera1Capturer: void dispose()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddICECandidate(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RenderSynchronizer: void registerListener(org.webrtc.RenderSynchronizer$Listener)
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.content.Context,java.util.Set,java.lang.String)
org.webrtc.VideoEncoderFactory: org.webrtc.VideoEncoderFactory$VideoEncoderSelector getEncoderSelector()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()
org.webrtc.RtpParameters: org.webrtc.RtpParameters$DegradationPreference getDegradationPreference()
org.webrtc.CameraSession$Events: void onCameraError(org.webrtc.CameraSession,java.lang.String)
org.webrtc.LibaomAv1Encoder: long createNative(long)
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType getMediaType()
org.webrtc.audio.WebRtcAudioEffects: void release()
org.webrtc.MediaStream: void addNativeAudioTrack(long)
org.webrtc.CallSessionFileRotatingLogSink: void dispose()
org.webrtc.VideoEncoder$-CC: boolean $default$isHardwareEncoder(org.webrtc.VideoEncoder)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper(org.webrtc.VideoEncoder)
org.webrtc.YuvConverter$ShaderCallbacks: YuvConverter$ShaderCallbacks()
org.webrtc.SurfaceViewRenderer: void pauseVideo()
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpSenderCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotifications(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer lambda$toI420$1()
org.webrtc.VideoEncoderFactory$VideoEncoderSelector$-CC: org.webrtc.VideoCodecInfo $default$onResolutionChange(org.webrtc.VideoEncoderFactory$VideoEncoderSelector,int,int)
org.webrtc.RtpTransceiver: boolean setDirection(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action build(android.app.Notification$Action$Builder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: double deltaMillis(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean peerConnectionDispose(com.cloudwebrtc.webrtc.PeerConnectionObserver)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] $values()
androidx.core.location.LocationManagerCompat$Api31Impl: void requestLocationUpdates(android.location.LocationManager,java.lang.String,android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitorAutoDetect createAndSetAutoDetectForTest(android.content.Context,java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState()
org.webrtc.GlGenericDrawer: java.lang.String createFragmentShaderString(java.lang.String,org.webrtc.GlGenericDrawer$ShaderType)
org.webrtc.ThreadUtils: boolean joinUninterruptibly(java.lang.Thread,long)
io.flutter.view.TextureRegistry$SurfaceProducer: int getWidth()
org.webrtc.PeerConnection: boolean removeIceCandidates(org.webrtc.IceCandidate[])
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
org.webrtc.EglRenderer: void postToRenderThread(java.lang.Runnable)
org.webrtc.CallSessionFileRotatingLogSink: void nativeDeleteSink(long)
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.WrappedNativeI420Buffer: java.nio.ByteBuffer getDataU()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomHeadsUpContentView(android.app.Notification$Builder,android.widget.RemoteViews)
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.NetworkRequest createNetworkRequest()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ObjectType getType(java.lang.String)
org.webrtc.PeerConnection$IceServer: java.lang.String getPassword()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinBitrateBps()
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void addRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.RtpSender: boolean nativeSetParameters(long,org.webrtc.RtpParameters)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: byte[] getData()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] values()
org.webrtc.HardwareVideoEncoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSmallIcon(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.RTCStats: RTCStats(long,java.lang.String,java.lang.String,java.util.Map)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $values()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void start()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus updateBitrate()
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String iceGatheringStateString(org.webrtc.PeerConnection$IceGatheringState)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setRemoteInputHistory(android.app.Notification$Builder,java.lang.CharSequence[])
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] values()
org.webrtc.FileVideoCapturer$VideoReader: void close()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState: com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState[] values()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
org.webrtc.SurfaceTextureHelper: void lambda$setFrameRotation$4(int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int access$500(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
androidx.core.location.LocationCompat$Api26Impl: void setSpeedAccuracyMetersPerSecond(android.location.Location,float)
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
org.webrtc.PeerConnectionFactory$ThreadInfo: PeerConnectionFactory$ThreadInfo(java.lang.Thread,int)
org.webrtc.AudioTrack: void nativeFreeSink(long)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
org.webrtc.RtpTransceiver$RtpTransceiverInit: java.util.List getSendEncodings()
org.webrtc.IceCandidate: java.lang.String toString()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback)
org.webrtc.CameraCapturer: void switchCameraInternal(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.audio.WebRtcAudioEffects: boolean isAcousticEchoCancelerSupported()
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void registerDataChannelObserver(java.lang.String,org.webrtc.DataChannel)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetParameters(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStart()
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void run()
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLDisplay getEglDisplay(javax.microedition.khronos.egl.EGL10)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioAttributesContentTypeFromString(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: java.util.List getActiveNetworkList()
org.webrtc.SurfaceTextureHelper: boolean isTextureInUse()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
org.webrtc.PeerConnection: boolean nativeAddLocalStream(long)
org.webrtc.VideoSource$1: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.PeerConnection: java.util.List nativeGetSenders()
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: AudioSamplesInterceptor()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushBoolean(boolean)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceGatheringState iceGatheringState()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$0(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setMicrophoneMute(boolean)
org.webrtc.FrameCryptor: long nativeSetObserver(long,org.webrtc.FrameCryptor$Observer)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] values()
org.webrtc.NetworkMonitor: void removeObserver(org.webrtc.NetworkMonitor$NetworkObserver)
org.webrtc.FrameCryptor: boolean isEnabled()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $values()
org.webrtc.GlShader: int getUniformLocation(java.lang.String)
org.webrtc.RenderSynchronizer: RenderSynchronizer(float)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult[] values()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onCreateFailure(java.lang.String)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: void onCancel(java.lang.Object)
org.webrtc.RefCounted: void release()
org.webrtc.CallSessionFileRotatingLogSink: long nativeAddSink(java.lang.String,int,int)
org.webrtc.MediaStreamTrack: void dispose()
org.webrtc.PeerConnection: void dispose()
org.webrtc.PeerConnection$RtcpMuxPolicy: PeerConnection$RtcpMuxPolicy(java.lang.String,int)
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.NativeLibrary: NativeLibrary()
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] $values()
androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
org.webrtc.Metrics: void add(java.lang.String,org.webrtc.Metrics$HistogramInfo)
org.webrtc.RtpTransceiver$RtpTransceiverDirection: RtpTransceiver$RtpTransceiverDirection(java.lang.String,int,int)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setDeclineButtonColorHint(android.app.Notification$CallStyle,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void cleanup()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.Byte[] getByte(int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] values()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioEncoderFactoryFactory(org.webrtc.AudioEncoderFactoryFactory)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
org.webrtc.audio.WebRtcAudioManager: int getOutputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$1(byte[])
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] values()
org.webrtc.SurfaceTextureHelper: void stopListening()
org.webrtc.PeerConnection: void nativeCreateOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.VideoFrameDrawer: void drawTexture(org.webrtc.RendererCommon$GlDrawer,org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int,int,int,int,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
com.google.crypto.tink.shaded.protobuf.JavaType: com.google.crypto.tink.shaded.protobuf.JavaType[] values()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink access$000(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
org.webrtc.audio.JavaAudioDeviceModule: org.webrtc.audio.JavaAudioDeviceModule$Builder builder(android.content.Context)
org.webrtc.VideoSink: void onFrame(org.webrtc.VideoFrame)
org.webrtc.NativeAndroidVideoTrackSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
org.webrtc.GlGenericDrawer: void release()
org.webrtc.PeerConnection: void stopRtcEventLog()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setQp(java.lang.Integer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.DynamicBitrateAdjuster: DynamicBitrateAdjuster()
org.webrtc.audio.WebRtcAudioTrack: int getStreamMaxVolume()
org.webrtc.PeerConnection: long nativeGetNativePeerConnection()
org.webrtc.RenderSynchronizer$Listener: void onRenderWindowOpen()
org.webrtc.EncodedImage: int getRotation()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.PeerConnectionFactory: void nativePrintStackTrace(int)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)
org.webrtc.SurfaceTextureHelper: android.graphics.SurfaceTexture getSurfaceTexture()
org.webrtc.SoftwareVideoEncoderFactory: long nativeCreateFactory()
org.webrtc.PeerConnection: java.util.List nativeGetReceivers()
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.webrtc.Size: int hashCode()
org.webrtc.JniCommon: java.nio.ByteBuffer nativeAllocateByteBuffer(int)
org.webrtc.NetworkMonitor: java.util.List getNativeNetworkObserversSync()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode valueOf(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: JavaAudioDeviceModule$AudioRecordStartErrorCode(java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Notification createNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.NetworkMonitor: void nativeNotifyOfActiveNetworkList(long,org.webrtc.NetworkChangeDetector$NetworkInformation[])
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void release()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioConfiguration(java.util.Map)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetworkStatePredictorFactoryFactory(org.webrtc.NetworkStatePredictorFactoryFactory)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
org.webrtc.EglBase10Impl$EglConnection: void lambda$new$1()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupAlarm(com.dexterous.flutterlocalnotifications.models.NotificationDetails,android.app.AlarmManager,long,android.app.PendingIntent)
org.webrtc.PeerConnectionFactory: long nativeCreateAudioSource(long,org.webrtc.MediaConstraints)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection getPeerConnection(java.lang.String)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setHasAlphaChannel(boolean)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioEffects: void enable(int)
net.jonhanson.flutter_native_splash.FlutterNativeSplashPlugin: FlutterNativeSplashPlugin()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
org.webrtc.Camera2Enumerator: boolean isFrontFacing(java.lang.String)
androidx.core.app.AlarmManagerCompat$Api21Impl: void setAlarmClock(android.app.AlarmManager,java.lang.Object,android.app.PendingIntent)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] values()
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor nativeCreateFrameCryptorForRtpSender(long,long,java.lang.String,int,long)
org.webrtc.Camera2Session: void stopInternal()
com.google.crypto.tink.shaded.protobuf.Writer$FieldOrder: com.google.crypto.tink.shaded.protobuf.Writer$FieldOrder valueOf(java.lang.String)
org.webrtc.PeerConnection$IceServer: java.util.List getUrls()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetSuccess()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDate(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextStreamUUID()
org.webrtc.EglRenderer: void createEglSurface(android.view.Surface)
org.webrtc.YuvHelper: void nativeABGRToI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.PeerConnection: org.webrtc.SessionDescription getRemoteDescription()
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.NetworkMonitor$2: java.lang.String getFieldTrialsString()
org.webrtc.PeerConnection$Observer: void onTrack(org.webrtc.RtpTransceiver)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer)
org.webrtc.MediaConstraints: java.util.List getOptional()
org.webrtc.SurfaceViewRenderer: void clearImage()
androidx.security.crypto.MasterKey$KeyScheme: androidx.security.crypto.MasterKey$KeyScheme[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean canCreateNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int getInt(int)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $values()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type[] values()
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.Logging$Severity: Logging$Severity(java.lang.String,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readChannelInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit()
org.webrtc.ThreadUtils$4: java.lang.Void call()
org.webrtc.Camera1Session$1: Camera1Session$1(org.webrtc.Camera1Session)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMinStartBitrateBps()
org.webrtc.Camera2Enumerator: Camera2Enumerator(android.content.Context)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.PeerConnection getPeerConnection()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckMinInterval()
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.util.Pair createVideoCapturer(org.webrtc.CameraEnumerator,boolean,java.lang.String,com.cloudwebrtc.webrtc.CameraEventsHandler)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: int getWindowAreaStatus()
org.webrtc.LibaomAv1Encoder: boolean isHardwareEncoder()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: void run()
org.webrtc.AudioTrack: void nativeAddSink(long,long)
org.webrtc.DtmfSender: int nativeInterToneGap(long)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.TurnCustomizer getTurnCustomizer()
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsLow(org.webrtc.VideoEncoder$ScalingSettings)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: NotificationDetails()
org.webrtc.PeerConnection$IceGatheringState: PeerConnection$IceGatheringState(java.lang.String,int)
org.webrtc.RtpParameters$Rtcp: java.lang.String getCname()
org.webrtc.Camera1Capturer: Camera1Capturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,boolean)
org.webrtc.PeerConnection$Observer: void onRenegotiationNeeded()
androidx.core.os.ConfigurationCompat$Api24Impl: android.os.LocaleList getLocales(android.content.res.Configuration)
org.webrtc.BaseBitrateAdjuster: double getAdjustedFramerateFps()
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeCurrentDirection(long)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType valueOf(java.lang.String)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setContentDescription(android.app.Notification$BigPictureStyle,java.lang.CharSequence)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.view.Surface createInputSurface()
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneY()
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.PeerConnectionFactory: long nativeCreatePeerConnection(long,org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,long,org.webrtc.SSLCertificateVerifier)
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLDisplay getDisplay()
org.webrtc.RtpSender: boolean nativeSetTrack(long,long)
androidx.core.app.RemoteInput$Api26Impl: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo$lambda$10(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.HardwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
org.webrtc.Camera1Session$SessionState: Camera1Session$SessionState(java.lang.String,int)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState valueOf(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$KeyType getKeyType()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void startListening(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetIsScreencast(long,boolean)
org.webrtc.EglBase14Impl: void createDummyPbufferSurface()
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
org.webrtc.NetworkMonitor$InstanceHolder: NetworkMonitor$InstanceHolder()
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean,boolean)
org.webrtc.EglRenderer$ErrorCallback: void onGlOutOfMemory()
org.webrtc.PeerConnectionFactory: org.webrtc.AudioTrack createAudioTrack(java.lang.String,org.webrtc.AudioSource)
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.video.CustomVideoEncoderFactory: void setForceSWCodecList(java.util.List)
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.GlRectDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkSubType()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray(java.util.ArrayList)
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] values()
androidx.fragment.app.FragmentContainerView: void setDrawDisappearingViewsLast(boolean)
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int,int,int)
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiverOfType(java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getValue()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean launchedActivityFromHistory(android.content.Intent)
org.webrtc.RenderSynchronizer: void lambda$registerListener$1()
com.cloudwebrtc.webrtc.utils.Utils: Utils()
org.webrtc.CameraVideoCapturer: void addMediaRecorderToCamera(android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.MediaConstraints: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource valueOf(java.lang.String)
org.webrtc.MediaStreamTrack: boolean nativeGetEnabled(long)
com.google.android.gms.common.SupportErrorDialogFragment: SupportErrorDialogFragment()
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
org.webrtc.VideoSource: long getNativeVideoTrackSource()
org.webrtc.MediaStreamTrack$MediaType: int getNative()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map describeIcon(androidx.core.graphics.drawable.IconCompat)
org.webrtc.VideoDecoder: java.lang.String getImplementationName()
org.webrtc.PeerConnection: void getStats(org.webrtc.RTCStatsCollectorCallback)
org.webrtc.JniCommon: void nativeAddRef(long)
com.cloudwebrtc.webrtc.StateProvider: java.lang.String getNextStreamUUID()
org.webrtc.HardwareVideoEncoderFactory: int getForcedKeyFrameIntervalMs(org.webrtc.VideoCodecMimeType,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setColor(android.app.Notification$Builder,int)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useAlarmClock()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$3()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$onFrame$1(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void enableSpeakerphone(boolean)
org.webrtc.GlRectDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation getDefaultStyleInformation(java.util.Map)
org.webrtc.MediaStream: void removeAudioTrack(long)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.VideoCodecInfo: java.util.Map getParams()
org.webrtc.Logging: void e(java.lang.String,java.lang.String)
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
org.webrtc.CryptoOptions$Srtp: CryptoOptions$Srtp(org.webrtc.CryptoOptions,boolean,boolean,boolean)
androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)
androidx.window.layout.util.ContextCompatHelperApi30: androidx.core.view.WindowInsetsCompat currentWindowInsets(android.content.Context)
org.webrtc.VideoFrame$I420Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$I420Buffer)
org.webrtc.H264Utils: boolean nativeIsSameH264Profile(java.util.Map,java.util.Map)
org.webrtc.PeerConnection$Observer$-CC: void $default$onAddTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory createPeerConnectionFactory()
org.webrtc.Metrics$HistogramInfo: Metrics$HistogramInfo(int,int,int)
org.webrtc.NetworkStatePredictorFactoryFactory: long createNativeNetworkStatePredictorFactory()
org.webrtc.EglBase10Impl$EglConnection: EglBase10Impl$EglConnection()
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
androidx.core.app.RemoteInput$Api29Impl: android.app.RemoteInput$Builder setEditChoicesBeforeSending(android.app.RemoteInput$Builder,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: int getPreferredInputDevice(android.media.AudioDeviceInfo)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.SoftwareVideoDecoderFactory$1: SoftwareVideoDecoderFactory$1(org.webrtc.SoftwareVideoDecoderFactory,org.webrtc.VideoCodecInfo)
org.webrtc.audio.WebRtcAudioRecord: boolean checkDeviceMatch(android.media.AudioDeviceInfo,android.media.AudioDeviceInfo)
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
org.webrtc.Camera2Enumerator: boolean isSupported(android.content.Context)
org.webrtc.ThreadUtils$4: ThreadUtils$4(java.lang.Runnable)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoSource createVideoSource(boolean)
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getOutputFormat(int)
org.webrtc.audio.WebRtcAudioRecord: void doAudioRecordStateCallback(int)
org.webrtc.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.StatsObserver: void onComplete(org.webrtc.StatsReport[])
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer getOutputBuffer(int)
org.webrtc.VideoCodecInfo: java.lang.String toString()
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
org.webrtc.RenderSynchronizer: void closeRenderWindow()
org.webrtc.PeerConnection$Observer: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$Settings getStreamSettings()
org.webrtc.ThreadUtils$2: void run()
org.webrtc.PeerConnectionDependencies$Builder: PeerConnectionDependencies$Builder(org.webrtc.PeerConnection$Observer)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLosing(android.net.Network,int)
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean,org.webrtc.Predicate)
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult[] values()
org.webrtc.GlTextureFrameBuffer: int getTextureId()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
androidx.core.view.WindowInsetsCompat$Impl: boolean isConsumed()
org.webrtc.ThreadUtils: void joinUninterruptibly(java.lang.Thread)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderRatchetSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.MediaStream: void addNativeVideoTrack(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetTrack(java.lang.String,java.lang.String,java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setType(int)
org.webrtc.VideoFileRenderer: void release()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkVideoTrack(java.lang.String,java.lang.String)
org.webrtc.EglBase: org.webrtc.EglBase$Context getEglBaseContext()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void setPreferredInputDevice(java.lang.String)
org.webrtc.GlTextureFrameBuffer: int getWidth()
org.webrtc.ContextUtils: android.content.Context getApplicationContext()
com.google.firebase.installations.ktx.FirebaseInstallationsKtxRegistrar: FirebaseInstallationsKtxRegistrar()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void error(java.lang.String,java.lang.String,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateRepeatIntervalMilliseconds(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void finish()
org.webrtc.RTCStats: org.webrtc.RTCStats create(long,java.lang.String,java.lang.String,java.util.Map)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle createMessagingStyle(android.app.Person)
org.webrtc.DataChannel: long nativeRegisterObserver(org.webrtc.DataChannel$Observer)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraOpening(java.lang.String)
org.webrtc.VideoFileRenderer$1: VideoFileRenderer$1(org.webrtc.VideoFileRenderer,org.webrtc.EglBase$Context)
org.webrtc.EglBase10Impl: void createPbufferSurface(int,int)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlayState()
org.webrtc.GlShader: void useProgram()
org.webrtc.VideoProcessor: void setSink(org.webrtc.VideoSink)
org.webrtc.RtpParameters$Encoding: double getBitratePriority()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: int size()
org.webrtc.VideoEncoder$CodecSpecificInfoH264: VideoEncoder$CodecSpecificInfoH264()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$didReinitializeFirebaseCore$1(com.google.android.gms.tasks.TaskCompletionSource)
org.webrtc.audio.WebRtcAudioUtils: void logAudioDeviceInfo(java.lang.String,android.media.AudioManager)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedHeight(int)
io.flutter.plugins.googlemaps.Messages$PlatformCapType: io.flutter.plugins.googlemaps.Messages$PlatformCapType valueOf(java.lang.String)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onResolutionChange(int,int)
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission[] values()
org.webrtc.EglBase10Impl$EglConnection: void lambda$new$0()
com.google.gson.ReflectionAccessFilter$FilterResult: com.google.gson.ReflectionAccessFilter$FilterResult valueOf(java.lang.String)
com.it_nomads.fluttersecurestorage.ciphers.StorageCipherAlgorithm: com.it_nomads.fluttersecurestorage.ciphers.StorageCipherAlgorithm[] values()
io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin: FlutterFirebaseCorePlugin()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.PeerConnectionFactory: long getNativeOwnedFactoryAndThreads()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters$Encoding mapToEncoding(java.util.Map)
org.webrtc.MediaStream: java.lang.String toString()
org.webrtc.EncodedImage$Builder: EncodedImage$Builder()
org.webrtc.AudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
org.webrtc.JavaI420Buffer: void retain()
org.webrtc.BaseBitrateAdjuster: void setTargets(int,double)
androidx.core.view.WindowInsetsCompat$Impl28: boolean equals(java.lang.Object)
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.security.crypto.EncryptedSharedPreferences$PrefValueEncryptionScheme: androidx.security.crypto.EncryptedSharedPreferences$PrefValueEncryptionScheme[] values()
org.webrtc.Predicate: org.webrtc.Predicate and(org.webrtc.Predicate)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState fromNativeIndex(int)
androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onAvailable(android.net.Network)
org.webrtc.NativeAndroidVideoTrackSource: void nativeOnFrameCaptured(long,int,long,org.webrtc.VideoFrame$Buffer)
org.webrtc.AddIceObserver: void onAddFailure(java.lang.String)
org.webrtc.HardwareVideoEncoder: void deliverEncodedImage()
org.webrtc.PeerConnection: org.webrtc.RtpSender createSender(java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType valueOf(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: java.util.List getIceServers()
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabledInNative(boolean)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRetain(org.webrtc.TextureBufferImpl)
org.webrtc.VideoEncoderFallback: long createNative(long)
androidx.core.app.NotificationManagerCompat$Api26Impl: java.lang.String getId(android.app.NotificationChannelGroup)
org.webrtc.CameraEnumerationAndroid: CameraEnumerationAndroid()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
androidx.core.location.LocationCompat$Api26Impl: boolean hasSpeedAccuracy(android.location.Location)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStats(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.TimestampAligner: TimestampAligner()
org.webrtc.Camera1Session: org.webrtc.Size findClosestPictureSize(android.hardware.Camera$Parameters,int,int)
org.webrtc.EncodedImage: int getEncodedHeight()
org.webrtc.CryptoOptions$Srtp: boolean getEnableEncryptedRtpHeaderExtensions()
org.webrtc.EglBase10Impl: EglBase10Impl(org.webrtc.EglBase10Impl$EglConnection)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void stopThread()
org.webrtc.audio.WebRtcAudioRecord: java.lang.String audioStateToString(int)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] $values()
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus release()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] $values()
org.webrtc.PeerConnectionFactory: boolean startAecDump(int,int)
org.webrtc.audio.WebRtcAudioManager: int getMinInputFrameSize(int,int)
org.webrtc.DataChannel: void registerObserver(org.webrtc.DataChannel$Observer)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
io.flutter.embedding.android.FlutterView: void setDelegate(io.flutter.embedding.android.FlutterViewDelegate)
org.webrtc.PeerConnection: void nativeAddIceCandidateWithObserver(java.lang.String,int,java.lang.String,org.webrtc.AddIceObserver)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)
com.google.crypto.tink.KeyTemplate$OutputPrefixType: com.google.crypto.tink.KeyTemplate$OutputPrefixType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.DataChannelObserver: void onStateChange()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeaturesInNative(int)
com.cloudwebrtc.webrtc.DataChannelObserver: void onBufferedAmountChange(long)
org.webrtc.audio.AudioDeviceModule: void setSpeakerMute(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationCompat$MessagingStyle$Message createMessage(android.content.Context,com.dexterous.flutterlocalnotifications.models.MessageDetails)
org.webrtc.CameraCapturer$2: void onCameraClosed(org.webrtc.CameraSession)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
org.webrtc.PeerConnection$RTCConfiguration: boolean getActiveResetSrtpParams()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.ArrayList getListArray(java.lang.String)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus release()
org.webrtc.EglBase14Impl: void checkIsNotReleased()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: VideoFileRenderer(java.lang.String,org.webrtc.EglBase$Context,boolean)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataV()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: EglThread$HandlerWithExceptionCallbacks(android.os.Looper)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void pendingNotificationRequests(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setKeepScreenOn(boolean)
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.DtmfSender: boolean nativeInsertDtmf(long,java.lang.String,int,int)
org.webrtc.IceCandidate: boolean equals(java.lang.Object)
org.webrtc.RtpParameters$Encoding: boolean getAdaptivePTime()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioEncodingToString(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readMessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String toString()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putInt(java.lang.String,int)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,double,int,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Double,java.lang.String,java.lang.Long,boolean)
org.webrtc.audio.WebRtcAudioUtils: boolean hasMicrophone(android.content.Context)
org.webrtc.Logging: void d(java.lang.String,java.lang.String)
org.webrtc.SurfaceEglRenderer: void disableFpsReduction()
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$EncoderInfo $default$getEncoderInfo(org.webrtc.VideoEncoder)
org.webrtc.Camera2Session$CameraStateCallback: void onClosed(android.hardware.camera2.CameraDevice)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getOrCreatePerImageReader(android.media.ImageReader)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroup(android.app.Notification$Builder,java.lang.String)
androidx.security.crypto.EncryptedSharedPreferences$EncryptedType: androidx.security.crypto.EncryptedSharedPreferences$EncryptedType[] values()
org.webrtc.PeerConnectionFactory: void dispose()
org.webrtc.EglBase10Impl$EglConnection: EglBase10Impl$EglConnection(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.GlTextureFrameBuffer: void setSize(int,int)
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager,android.media.AudioAttributes,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback,org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback,boolean,boolean)
org.webrtc.GlTextureFrameBuffer: GlTextureFrameBuffer(int)
org.webrtc.SurfaceEglRenderer: void setFpsReduction(float)
org.webrtc.PeerConnectionFactory: void onNetworkThreadReady()
org.webrtc.TextureBufferImpl$RefCountMonitor: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.SurfaceTextureHelper$1: java.lang.Object call()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(boolean,boolean)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
org.webrtc.EglBase14Impl: int surfaceHeight()
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterImageTexture(long,long,java.lang.ref.WeakReference)
org.webrtc.DataChannel: boolean nativeSend(byte[],boolean)
org.webrtc.audio.WebRtcAudioManager: android.media.AudioManager getAudioManager(android.content.Context)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareNoiseSuppressor(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void applyGrouping(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.RendererCommon$GlDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.CameraCapturer$4: void onCameraDisconnected()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestNotificationsPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
org.webrtc.Camera1Enumerator: java.util.List convertFramerates(java.util.List)
org.webrtc.AudioSource: long getNativeAudioSource()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: long getNumCapturedFrames()
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
org.webrtc.PeerConnection$SdpSemantics: PeerConnection$SdpSemantics(java.lang.String,int)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptorKeyProvider createFrameCryptorKeyProvider(boolean,byte[],int,byte[],int,int,boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.app.Activity getActivity()
androidx.core.app.RemoteInput$Api26Impl: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainAudio()
org.webrtc.audio.WebRtcAudioEffects: boolean effectTypeIsVoIP(java.util.UUID)
org.webrtc.RtpSender: void setFrameEncryptor(org.webrtc.FrameEncryptor)
org.webrtc.VideoSource$AspectRatio: VideoSource$AspectRatio(int,int)
org.webrtc.Predicate$3: boolean test(java.lang.Object)
org.webrtc.EglThread$RenderUpdate: void update(boolean)
org.webrtc.NetworkMonitorAutoDetect: boolean isReceiverRegisteredForTesting()
org.webrtc.PeerConnectionFactory$InitializationOptions: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder builder(android.content.Context)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void checkCanScheduleExactAlarms(android.app.AlarmManager)
org.webrtc.MediaSource: org.webrtc.MediaSource$State nativeGetState(long)
org.webrtc.MediaSource: void dispose()
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: FlutterAndroidLifecyclePlugin()
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType valueOf(java.lang.String)
androidx.core.app.NotificationCompat$CallStyle$Api28Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,android.app.Person)
org.webrtc.AudioTrack: void dispose()
org.webrtc.EglRenderer: void renderFrameOnRenderThread()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$1: OrientationAwareScreenCapturer$1(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.DataChannel$Buffer: DataChannel$Buffer(java.nio.ByteBuffer,boolean)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String)
org.webrtc.JniHelper: java.lang.Object getKey(java.util.Map$Entry)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void startCapture(int,int,int)
org.webrtc.CameraVideoCapturer$CameraStatistics$1: CameraVideoCapturer$CameraStatistics$1(org.webrtc.CameraVideoCapturer$CameraStatistics)
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase getRootEglBase()
org.webrtc.RtpParameters$Encoding: java.lang.String getScalabilityMode()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: boolean isCreating()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getActiveReader()
org.webrtc.CameraEnumerator: java.util.List getSupportedFormats(java.lang.String)
org.webrtc.SurfaceViewRenderer: void disableFpsReduction()
org.webrtc.HardwareVideoEncoder: java.lang.String getImplementationName()
org.webrtc.PeerConnection: boolean nativeStartRtcEventLog(int,int)
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: android.app.Notification$Action$Builder createActionBuilder(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)
org.webrtc.PeerConnection$Observer: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.VideoEncoder$Callback: void onEncodedFrame(org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
org.webrtc.PeerConnectionFactory: void initializeInternalTracer()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction valueOf(java.lang.String)
org.webrtc.EglBase: void makeCurrent()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void access$000(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: android.content.Context getApplicationContext()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
io.flutter.plugins.googlemaps.Messages$PlatformRendererType: io.flutter.plugins.googlemaps.Messages$PlatformRendererType valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.util.Map toMap()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType valueOf(java.lang.String)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
org.webrtc.ThreadUtils$3: ThreadUtils$3(org.webrtc.ThreadUtils$1Result,java.util.concurrent.Callable,org.webrtc.ThreadUtils$1CaughtException,java.util.concurrent.CountDownLatch)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetRemoteDescription()
org.webrtc.RtpSender: void setStreams(java.util.List)
org.webrtc.PeerConnectionDependencies: PeerConnectionDependencies(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier)
org.webrtc.DataChannel: int nativeId()
org.webrtc.MediaConstraints: java.lang.String stringifyKeyValuePairList(java.util.List)
org.webrtc.audio.WebRtcAudioRecord: int getBytesPerSample(int)
org.webrtc.VideoFrame$TextureBuffer: org.webrtc.VideoFrame$TextureBuffer$Type getType()
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map access$200(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableDscp()
org.webrtc.MediaCodecVideoDecoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
org.webrtc.WrappedNativeI420Buffer: WrappedNativeI420Buffer(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,long)
org.webrtc.NativePeerConnectionFactory: long createNativePeerConnection()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
io.flutter.plugins.googlemaps.Messages$PlatformRendererType: io.flutter.plugins.googlemaps.Messages$PlatformRendererType[] values()
org.webrtc.PeerConnection$RTCConfiguration: boolean getDisableIPv6OnWifi()
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.NetworkControllerFactoryFactory: long createNativeNetworkControllerFactory()
org.webrtc.GlGenericDrawer$ShaderType: org.webrtc.GlGenericDrawer$ShaderType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverOfType(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit)
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: android.os.Parcelable castToParcelable(android.graphics.drawable.Icon)
androidx.security.crypto.EncryptedSharedPreferences$PrefValueEncryptionScheme: androidx.security.crypto.EncryptedSharedPreferences$PrefValueEncryptionScheme valueOf(java.lang.String)
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag valueOf(java.lang.String)
org.webrtc.Camera1Session: org.webrtc.CameraEnumerationAndroid$CaptureFormat findClosestCaptureFormat(android.hardware.Camera$Parameters,int,int,int)
org.webrtc.PeerConnectionFactory$ThreadInfo: org.webrtc.PeerConnectionFactory$ThreadInfo getCurrent()
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
org.webrtc.RefCountDelegate: boolean safeRetain()
org.webrtc.LibvpxVp8Encoder: LibvpxVp8Encoder()
org.webrtc.DtmfSender: void dispose()
org.webrtc.RtpSender: java.lang.String id()
org.webrtc.NetworkChangeDetector$Observer: void onNetworkPreference(java.util.List,int)
org.webrtc.PeerConnection: void setLocalDescription(org.webrtc.SdpObserver)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
androidx.lifecycle.ProcessLifecycleOwner$Api29Impl: void registerActivityLifecycleCallbacks(android.app.Activity,android.app.Application$ActivityLifecycleCallbacks)
org.webrtc.VideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: void onCurrentEncoder(org.webrtc.VideoCodecInfo)
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] values()
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus initEncode$lambda$0(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushMap(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.PeerConnection$Observer: void onDataChannel(org.webrtc.DataChannel)
org.webrtc.SdpObserver: void onCreateSuccess(org.webrtc.SessionDescription)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
org.webrtc.RtpCapabilities$CodecCapability: java.util.Map getParameters()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
org.webrtc.HardwareVideoEncoder$1: HardwareVideoEncoder$1(org.webrtc.HardwareVideoEncoder)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraError(java.lang.String)
org.webrtc.RtpParameters$Codec: java.lang.Integer getNumChannels()
org.webrtc.PeerConnection$RTCConfiguration: PeerConnection$RTCConfiguration(java.util.List)
org.webrtc.CameraEnumerationAndroid$2: CameraEnumerationAndroid$2(int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMediaStyle(androidx.core.app.NotificationCompat$Builder)
org.webrtc.VideoCodecInfo: int hashCode()
org.webrtc.VideoSource$1: void onCapturerStarted(boolean)
org.webrtc.AndroidVideoDecoder: void stopOnOutputThread(java.lang.Exception)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState nativeConnectionState()
androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType valueOf(java.lang.String)
org.webrtc.VideoTrack: long getNativeVideoTrack()
com.google.firebase.concurrent.ExecutorsRegistrar: ExecutorsRegistrar()
androidx.security.crypto.EncryptedSharedPreferences$EncryptedType: androidx.security.crypto.EncryptedSharedPreferences$EncryptedType valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
org.webrtc.IceCandidateErrorEvent: IceCandidateErrorEvent(java.lang.String,int,java.lang.String,int,java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: int channelCountToConfiguration(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.PeerConnection)
org.webrtc.RtpReceiver: void setFrameDecryptor(org.webrtc.FrameDecryptor)
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm[] values()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackInitError(java.lang.String)
org.webrtc.CameraVideoCapturer$MediaRecorderHandler: void onMediaRecorderError(java.lang.String)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getCurrentDirection()
org.webrtc.YuvConverter$ShaderCallbacks: void setPlaneV()
org.webrtc.IceCandidate: int hashCode()
org.webrtc.HardwareVideoEncoder: boolean canUseSurface()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getCallbackHandle(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: boolean checkMediaStream(java.lang.String,java.lang.String)
org.webrtc.video.CustomVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.tracing.TraceApi29Impl: boolean isEnabled()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: FlutterRTCFrameCryptor$FrameCryptorStateObserver(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor,io.flutter.plugin.common.BinaryMessenger,java.lang.String)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
org.webrtc.audio.WebRtcAudioTrack: void logUnderrunCount()
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel valueOf(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback: void invoke(java.lang.String[],int[])
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
org.webrtc.EglBase10Impl: int surfaceWidth()
org.webrtc.Camera2Helper: Camera2Helper()
org.webrtc.RtpParameters$HeaderExtension: int getId()
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] $values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
org.webrtc.Camera1Capturer: void startCapture(int,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: GetUserMediaImpl$ScreenRequestPermissionsFragment()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: ScheduleMode(java.lang.String,int)
io.flutter.plugin.platform.PlatformViewWrapper: void setLayoutParams(android.widget.FrameLayout$LayoutParams)
org.webrtc.DataChannel: long getNativeDataChannel()
org.webrtc.CameraSession: void stop()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglRenderer: void pauseVideo()
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean,org.webrtc.VideoEncoder$Capabilities)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void send(android.os.ResultReceiver,int,java.lang.String[],int[])
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$new$1(int)
org.webrtc.EglBase: void release()
org.webrtc.HardwareVideoEncoderFactory: HardwareVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
org.webrtc.GlUtil: GlUtil()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioDeviceId(android.media.AudioDeviceInfo)
androidx.core.app.NotificationCompat$CallStyle$Api28Impl: android.os.Parcelable castToParcelable(android.app.Person)
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: InboxStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean)
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGL10 getEgl()
org.webrtc.EglBase10Impl: void swapBuffers()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void removeExceptionCallback(java.lang.Runnable)
org.webrtc.NetworkMonitor: void setNetworkChangeDetectorFactory(org.webrtc.NetworkChangeDetectorFactory)
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State fromNativeIndex(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void releaseInternal()
org.webrtc.SurfaceTextureHelper: SurfaceTextureHelper(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
org.webrtc.EglBase10Impl$EglConnection: void detachCurrent()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordInitError(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCanScheduleExactNotifications(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraCapturer$1: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.LibvpxVp9Decoder: LibvpxVp9Decoder()
org.webrtc.CallSessionFileRotatingLogSink: byte[] getLogData(java.lang.String)
com.dexterous.flutterlocalnotifications.ActionBroadcastReceiver: ActionBroadcastReceiver()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putArray(java.lang.String,java.util.ArrayList)
org.webrtc.NetworkMonitorAutoDetect: void setIncludeWifiDirect(boolean)
org.webrtc.EncodedImage$FrameType: EncodedImage$FrameType(java.lang.String,int,int)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $values()
org.webrtc.VideoCodecInfo: boolean equals(java.lang.Object)
org.webrtc.RtpParameters$Encoding: boolean getActive()
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(android.opengl.EGLContext,int[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelNotification(java.lang.Integer,java.lang.String)
org.webrtc.CryptoOptions$Srtp: boolean getEnableAes128Sha1_32CryptoCipher()
org.webrtc.DataChannel: void checkDataChannelExists()
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
org.webrtc.VideoProcessor$FrameAdaptationParameters: VideoProcessor$FrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
org.webrtc.PeerConnection: long createNativePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver$1: FlutterRTCFrameCryptor$FrameCryptorStateObserver$1(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver,com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor)
org.webrtc.PeerConnection: PeerConnection(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getWidth()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getTrackForId(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void initAudioSwitch()
org.webrtc.Camera1Helper: int getCameraId(java.lang.String)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Rect getSurfaceFrame()
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
org.webrtc.LibvpxVp9Decoder: long createNative(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onTrimMemory(int)
org.webrtc.MediaStream: MediaStream(long)
org.webrtc.DataChannel: java.lang.String label()
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate(android.content.Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestFullScreenIntentPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapperFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.TextureBufferImpl: org.webrtc.YuvConverter getYuvConverter()
org.webrtc.VideoFrame: VideoFrame(org.webrtc.VideoFrame$Buffer,int,long)
org.webrtc.Logging: void enableLogThreads()
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: GetUserMediaImpl$4(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$NetworkInformation networkToInfo(android.net.Network)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forOngoingCall(android.app.Person,android.app.PendingIntent)
com.cloudwebrtc.webrtc.StateProvider: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImages()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onDataChannel(org.webrtc.DataChannel)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: PeerConnectionFactory$InitializationOptions$Builder(android.content.Context)
org.webrtc.VideoFrameDrawer: VideoFrameDrawer()
org.webrtc.audio.AudioDeviceModule: void release()
org.webrtc.EglBase: void createPbufferSurface(int,int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
org.webrtc.CalledByNativeUnchecked: java.lang.String value()
org.webrtc.PeerConnectionFactory: void nativeInitializeInternalTracer()
org.webrtc.Camera1Capturer: void printStackTrace()
org.webrtc.CameraVideoCapturer$CameraStatistics$1: void run()
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: java.io.FileDescriptor dup(java.io.FileDescriptor)
org.webrtc.RtpSender: org.webrtc.RtpParameters getParameters()
org.webrtc.EglRenderer: void logW(java.lang.String)
org.webrtc.FrameCryptor: void setObserver(org.webrtc.FrameCryptor$Observer)
org.webrtc.CryptoOptions: CryptoOptions(boolean,boolean,boolean,boolean)
io.flutter.view.TextureRegistry$SurfaceProducer: long id()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] values()
androidx.security.crypto.MasterKey$Builder$Api23Impl$Api28Impl: void setIsStrongBoxBacked(android.security.keystore.KeyGenParameterSpec$Builder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getHeight()
org.webrtc.EglBase10Impl: void createSurface(android.view.Surface)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()
org.webrtc.TextureBufferImpl$1: TextureBufferImpl$1(java.lang.Runnable)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setOpenGlesVersion(int)
org.webrtc.RendererCommon$GlDrawer: void release()
org.webrtc.WrappedNativeI420Buffer: int getStrideV()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLargeIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
org.webrtc.DynamicBitrateAdjuster: void reportEncodedFrame(int)
androidx.core.app.ActivityCompat$Api23Impl: void requestPermissions(android.app.Activity,java.lang.String[],int)
org.webrtc.TimestampAligner: long getRtcTimeNanos()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$PeerConnectionState connectionState()
org.webrtc.audio.JavaAudioDeviceModule: JavaAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean)
androidx.lifecycle.ProcessLifecycleInitializer: ProcessLifecycleInitializer()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy valueOf(java.lang.String)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype[] values()
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle valueOf(java.lang.String)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference fromNativeIndex(int)
org.webrtc.audio.JavaAudioDeviceModule: long getNativeAudioDeviceModulePointer()
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type valueOf(java.lang.String)
org.webrtc.FileVideoCapturer: void stopCapture()
org.webrtc.VideoEncoder$CodecSpecificInfoVP8: VideoEncoder$CodecSpecificInfoVP8()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(com.cloudwebrtc.webrtc.audio.AudioDeviceKind)
org.webrtc.CameraCapturer$7: void run()
org.webrtc.VideoDecoderWrapper: void lambda$createDecoderCallback$0(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding[] values()
com.dexterous.flutterlocalnotifications.models.Time: Time()
org.webrtc.Predicate$2: boolean test(java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.PeerConnectionObserver getPeerConnectionObserver(java.lang.String)
org.webrtc.SurfaceViewRenderer: void onLayout(boolean,int,int,int,int)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,java.lang.CharSequence)
org.webrtc.CameraCapturer$8: CameraCapturer$8(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.RtpSender: java.lang.String nativeGetMediaType(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeAddTrack(long,java.util.List)
org.webrtc.MediaSource$State: MediaSource$State(java.lang.String,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
org.webrtc.audio.WebRtcAudioTrack: boolean setStreamVolume(int)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: AudioDeviceKind(java.lang.String,int,java.lang.String,java.lang.Class)
org.webrtc.HardwareVideoEncoderFactory: android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecMimeType)
org.webrtc.NV21Buffer: int getHeight()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: java.lang.String getUri()
org.webrtc.VideoFrame$Buffer$-CC: int $default$getBufferType(org.webrtc.VideoFrame$Buffer)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeRatchetKey(long,java.lang.String,int)
org.webrtc.EglBase10Impl: void swapBuffers(long)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioModeForString(java.lang.String)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setFrameType(org.webrtc.EncodedImage$FrameType)
org.webrtc.EglBase14Impl$Context: long getNativeEglContext()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
org.webrtc.SurfaceTextureHelper: void setTextureSize(int,int)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryLoader(org.webrtc.NativeLibraryLoader)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getAudioAttributesUsageTypeForString(java.lang.String)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
org.webrtc.CameraCapturer$4: void onFirstFrameAvailable()
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void addDefaultAudioConstraints(org.webrtc.MediaConstraints)
org.webrtc.HardwareVideoEncoder: boolean isSemiPlanar(int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
org.webrtc.PeerConnectionFactory: PeerConnectionFactory(long)
org.webrtc.PeerConnection$IceServer: java.lang.String toString()
org.webrtc.TurnCustomizer: TurnCustomizer(long)
org.webrtc.EglRenderer: void createEglSurfaceInternal(java.lang.Object)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact valueOf(java.lang.String)
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetWidth()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void onFrame(org.webrtc.VideoFrame)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getUIDForStream(org.webrtc.MediaStream)
org.webrtc.DtmfSender: int nativeDuration(long)
org.webrtc.EglBase14Impl: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.PeerConnectionFactory: void nativeDeleteLoggable()
org.webrtc.Size: java.lang.String toString()
org.webrtc.EglBase10Impl$Context: long getNativeEglContext()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection access$300(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: java.util.List availableAudioDevices()
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: com.twilio.audioswitch.AudioDevice selectedAudioDevice()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void post(java.lang.Runnable)
org.webrtc.VideoEncoder$ResolutionBitrateLimits: int getMaxBitrateBps()
org.webrtc.NativeAndroidVideoTrackSource: void onFrameCaptured(org.webrtc.VideoFrame)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDateMatchingDateTimeComponents(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
org.webrtc.PeerConnection$RTCConfiguration: int getIceConnectionReceivingTimeout()
org.webrtc.HardwareVideoEncoderFactory: org.webrtc.BitrateAdjuster createBitrateAdjuster(org.webrtc.VideoCodecMimeType,java.lang.String)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$SignalingState signalingState()
org.webrtc.ScreenCapturerAndroid: void onFrame(org.webrtc.VideoFrame)
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
androidx.core.app.AlarmManagerCompat$Api23Impl: void setExactAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
org.webrtc.VideoFrameDrawer$YuvUploader: void release()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: void setStreamSettings(org.webrtc.VideoEncoder$Settings)
org.webrtc.AudioTrack: void nativeSetVolume(long,double)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptorKeyProvider nativeCreateFrameCryptorKeyProvider(boolean,byte[],int,byte[],int,int,boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void initialize(int,boolean,java.util.List,com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy[] $values()
org.webrtc.PeerConnection: void nativeSetRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.CameraCapturer$SwitchState: CameraCapturer$SwitchState(java.lang.String,int)
com.cloudwebrtc.webrtc.record.FrameCapturer: void lambda$onFrame$0()
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
org.webrtc.JavaI420Buffer: int getWidth()
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection createEgl14(int[])
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraClosed()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
io.flutter.view.TextureRegistry$ImageConsumer: android.media.Image acquireLatestImage()
org.webrtc.NetworkMonitorAutoDetect: void unregisterReceiver()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: long getDefaultNetId()
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode valueOf(java.lang.String)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: java.lang.String toString()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioProcessingFactory(org.webrtc.AudioProcessingFactory)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: android.util.DisplayMetrics getWindowAreaDisplayMetrics()
androidx.browser.customtabs.CustomTabsIntent$Api23Impl: android.app.ActivityOptions makeBasicActivityOptions()
org.webrtc.DataChannel$State: org.webrtc.DataChannel$State[] values()
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind fromAudioDevice(com.twilio.audioswitch.AudioDevice)
org.webrtc.EglBase10Impl: EglBase10Impl(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.RtpTransceiver$RtpTransceiverDirection: int getNativeIndex()
org.webrtc.NetworkMonitor: boolean networkBindingSupported()
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getClockRate()
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
com.google.firebase.iid.Registrar: com.google.firebase.iid.internal.FirebaseInstanceIdInternal lambda$getComponents$1$Registrar(com.google.firebase.components.ComponentContainer)
org.webrtc.audio.WebRtcAudioRecord$1: java.lang.Thread newThread(java.lang.Runnable)
com.dexterous.flutterlocalnotifications.models.PersonDetails: PersonDetails(java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)
org.webrtc.NetworkMonitor: void stopMonitoring(long)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.CryptoOptions getCryptoOptions()
androidx.core.app.NotificationManagerCompat$Api26Impl: android.app.NotificationChannel getNotificationChannel(android.app.NotificationManager,java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: ProcessLifecycleOwner$attach$1$onActivityPreCreated$1(androidx.lifecycle.ProcessLifecycleOwner)
org.webrtc.VideoFrameDrawer$YuvUploader: int[] uploadFromBuffer(org.webrtc.VideoFrame$I420Buffer)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp8(android.media.MediaCodecInfo)
org.webrtc.LibvpxVp9Encoder: boolean nativeIsSupported()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelClose(java.lang.String,java.lang.String)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataU()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)
org.webrtc.EglBase14Impl: void detachCurrent()
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(javax.microedition.khronos.egl.EGLContext,int[])
org.webrtc.ExternalAudioProcessingFactory: void checkExternalAudioProcessorExists()
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.util.List getComponents()
org.webrtc.audio.WebRtcAudioEffects: boolean setNS(boolean)
org.webrtc.PeerConnectionFactory: void nativeInitializeFieldTrials(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.VideoTrack createVideoTrack(java.lang.String,org.webrtc.VideoSource)
org.webrtc.DataChannel$Init: int getId()
org.webrtc.EglBase14Impl: void createSurfaceInternal(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLedInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.Camera2Capturer: boolean isScreencast()
org.webrtc.audio.WebRtcAudioTrack: void setNativeAudioTrack(long)
org.webrtc.EglBase10Impl: void releaseSurface()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] values()
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getStreamTypeForString(java.lang.String)
com.tekartik.sqflite.SqflitePlugin: SqflitePlugin()
com.baseflow.geolocator.GeolocatorPlugin: GeolocatorPlugin()
com.google.crypto.tink.shaded.protobuf.WireFormat$JavaType: com.google.crypto.tink.shaded.protobuf.WireFormat$JavaType valueOf(java.lang.String)
org.webrtc.CameraSession$Events: void onCameraDisconnected(org.webrtc.CameraSession)
org.webrtc.EglBase14Impl: void createSurface(android.view.Surface)
org.webrtc.PeerConnection$IceServer: int hashCode()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] values()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class access$100(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.google.firebase.messaging.FirebaseMessagingService: FirebaseMessagingService()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: NotificationChannelDetails()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$200(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.ArrayList loadScheduledNotifications(android.content.Context)
org.webrtc.NetworkChangeDetector$NetworkInformation: NetworkChangeDetector$NetworkInformation(java.lang.String,org.webrtc.NetworkChangeDetector$ConnectionType,org.webrtc.NetworkChangeDetector$ConnectionType,long,org.webrtc.NetworkChangeDetector$IPAddress[])
org.webrtc.TextureBufferImpl: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.PeerConnectionFactory: void printInternalStackTraces(boolean)
org.webrtc.AndroidVideoDecoder: java.lang.Thread createOutputThread()
org.webrtc.RTCStats: double getTimestampUs()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationChannels(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.LibvpxVp8Decoder: long createNative(long)
org.webrtc.RendererCommon: void adjustOrigin(float[])
org.webrtc.FileVideoCapturer: FileVideoCapturer(java.lang.String)
org.webrtc.VideoEncoderWrapper: VideoEncoderWrapper()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void setSizeFromLayout()
org.webrtc.RendererCommon: float[] getLayoutMatrix(boolean,float,float)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: FlutterRTCFrameCryptor(com.cloudwebrtc.webrtc.StateProvider)
com.cloudwebrtc.webrtc.DataChannelObserver: void onCancel(java.lang.Object)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void drainEncoder()
org.webrtc.JavaI420Buffer: int getStrideV()
org.webrtc.GlRectDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
org.webrtc.Logging: Logging()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean getBoolean(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
org.webrtc.MediaCodecWrapperFactoryImpl: MediaCodecWrapperFactoryImpl()
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] $values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createDataChannel(java.lang.String,java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$PortPrunePolicy: PeerConnection$PortPrunePolicy(java.lang.String,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetEnabled(java.lang.String,boolean,java.lang.String)
org.webrtc.ThreadUtils$ThreadChecker: ThreadUtils$ThreadChecker()
org.webrtc.Predicate: org.webrtc.Predicate or(org.webrtc.Predicate)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getSenders(io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.Camera2Session: void stop()
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.net.Uri retrieveSoundResourceUri(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.models.SoundSource)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationManagerCompat getNotificationManager(android.content.Context)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect: void registerReceiver()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void selectAudioOutput(java.lang.Class)
org.webrtc.CameraVideoCapturer: void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType valueOf(java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService: JobInfoSchedulerService()
org.webrtc.SessionDescription: java.lang.String getTypeInCanonicalForm()
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl(androidx.core.view.WindowInsetsCompat)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFrameResolutionChanged(int,int,int)
org.webrtc.NetworkMonitor: void startMonitoring(android.content.Context)
org.webrtc.RefCounted: void retain()
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority valueOf(java.lang.String)
org.webrtc.ScreenCapturerAndroid: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
io.flutter.plugins.googlemaps.Messages$PlatformMapBitmapScaling: io.flutter.plugins.googlemaps.Messages$PlatformMapBitmapScaling[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1)
org.webrtc.MediaCodecWrapper: void start()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: org.webrtc.FrameCryptorAlgorithm frameCryptorAlgorithmFromInt(int)
org.webrtc.Camera1Session$2: Camera1Session$2(org.webrtc.Camera1Session)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$TcpCandidatePolicy getTcpCandidatePolicy()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: java.lang.String toString()
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.NetworkMonitorAutoDetect: long networkToNetId(android.net.Network)
org.webrtc.MediaStream: void removeMediaStreamTrack(java.util.List,long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isDeviceOrientationPortrait()
com.dexterous.flutterlocalnotifications.models.IconSource: IconSource(java.lang.String,int)
org.webrtc.MediaStreamTrack: boolean enabled()
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
org.webrtc.VideoTrack: VideoTrack(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map mediaTrackToMap(org.webrtc.MediaStreamTrack)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.graphics.drawable.IconCompat getIconFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource)
org.webrtc.VideoTrack: long nativeWrapSink(org.webrtc.VideoSink)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
io.flutter.view.TextureRegistry$SurfaceProducer: int getHeight()
org.webrtc.Camera2Enumerator: boolean isBackFacing(java.lang.String)
org.webrtc.EglRenderer: void init(org.webrtc.EglThread,org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] $values()
org.webrtc.PeerConnectionFactory: void shutdownInternalTracer()
org.webrtc.audio.WebRtcAudioTrackUtils: void detachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule)
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: CameraEventsHandler$CameraState(java.lang.String,int)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onRetainBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.MediaCodecWrapperFactoryImpl: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
org.webrtc.JniCommon: JniCommon()
org.webrtc.MediaCodecWrapper: void queueInputBuffer(int,int,int,long,int)
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,int,java.nio.FloatBuffer)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraOpening(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect: NetworkMonitorAutoDetect(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType[] values()
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] values()
org.webrtc.JNILogging: void logToInjectable(java.lang.String,java.lang.Integer,java.lang.String)
org.webrtc.PeerConnection$Observer: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
org.webrtc.RendererCommon$ScalingType: RendererCommon$ScalingType(java.lang.String,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: MethodCallHandlerImpl(android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
org.webrtc.EglBase: void createSurface(android.graphics.SurfaceTexture)
org.webrtc.RtpParameters$Encoding: java.lang.Double getScaleResolutionDownBy()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)
org.webrtc.Camera2Capturer: Camera2Capturer(android.content.Context,java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.Metrics: org.webrtc.Metrics nativeGetAndReset()
org.webrtc.EglRenderer: void clearSurfaceOnRenderThread(float,float,float,float)
org.webrtc.TextureBufferImpl$2: void onRetain(org.webrtc.TextureBufferImpl)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder addAction(android.app.Notification$Builder,android.app.Notification$Action)
org.webrtc.PeerConnection: boolean nativeSetConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
org.webrtc.Camera1Capturer: void stopCapture()
org.webrtc.JavaI420Buffer: void lambda$allocate$0(java.nio.ByteBuffer)
org.webrtc.VideoEncoder$ScalingSettings: java.lang.String toString()
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInAEC(boolean)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void release()
org.webrtc.RefCountDelegate: void retain()
org.webrtc.JniHelper: java.lang.Object getValue(java.util.Map$Entry)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostStarted(android.app.Activity)
org.webrtc.PeerConnection: void nativeNewGetStatsReceiver(long,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor nativeCreateFrameCryptorForRtpReceiver(long,long,java.lang.String,int,long)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void queueInputBuffer(int,int,int,long,int)
org.webrtc.SurfaceEglRenderer: void logD(java.lang.String)
com.google.android.datatransport.cct.CctBackendFactory: com.google.android.datatransport.runtime.backends.TransportBackend create(com.google.android.datatransport.runtime.backends.CreationContext)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
org.webrtc.StatsReport: java.lang.String toString()
org.webrtc.EglBase10Impl: void release()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
org.webrtc.FileVideoCapturer: boolean isScreencast()
org.webrtc.ThreadUtils$4: java.lang.Object call()
org.webrtc.JavaI420Buffer: void nativeCropAndScaleI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetCodecPreferences(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack$State nativeGetState(long)
org.webrtc.Camera2Session$CameraStateCallback: java.lang.String getErrorDescription(int)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoFrame$Buffer copyI420Buffer(java.nio.ByteBuffer,int,int,int,int)
org.webrtc.FrameCryptorKeyProvider: void dispose()
org.webrtc.RtpTransceiver: void nativeStopStandard(long)
org.webrtc.SimulcastVideoEncoder: long nativeCreateEncoder(long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.VideoCodecMimeType: VideoCodecMimeType(java.lang.String,int,java.lang.String)
androidx.window.extensions.core.util.function.Predicate: boolean test(java.lang.Object)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] $values()
org.webrtc.LibvpxVp8Encoder: long nativeCreate(long)
org.webrtc.SurfaceViewRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
org.webrtc.VideoEncoder$CodecSpecificInfo: VideoEncoder$CodecSpecificInfo()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionAddStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $values()
org.webrtc.VideoEncoderFallback: VideoEncoderFallback(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType[] $values()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void checkNotDisposed()
org.webrtc.audio.WebRtcAudioRecord: boolean enableBuiltInNS(boolean)
org.webrtc.TextureBufferImpl$RefCountMonitor: void onRelease(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void stopRecording()
io.flutter.view.TextureRegistry$ImageTextureEntry: void pushImage(android.media.Image)
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImageReaders()
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.core.os.UserManagerCompat$Api24Impl: boolean isUserUnlocked(android.content.Context)
org.webrtc.FramerateBitrateAdjuster: void setTargets(int,double)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueInputBuffer(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String getNextDataChannelUUID()
org.webrtc.NetworkMonitorAutoDetect: void destroy()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType)
com.google.crypto.tink.shaded.protobuf.FieldType$Collection: com.google.crypto.tink.shaded.protobuf.FieldType$Collection[] values()
org.webrtc.DataChannel$Init: int getMaxRetransmitTimeMs()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$ContinualGatheringPolicy getContinualGatheringPolicy()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void setPeerConnection(org.webrtc.PeerConnection)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.lang.String,java.util.Map)
org.webrtc.NetworkMonitor: void stopMonitoring()
org.webrtc.PeerConnection: long getNativePeerConnection()
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoCodecStatus $default$setRates(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder$RateControlParameters)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetTrack(java.lang.String,org.webrtc.MediaStreamTrack,io.flutter.plugin.common.MethodChannel$Result,boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void hasTorch(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SurfaceViewRenderer: void onFrameResolutionChanged(int,int,int)
org.webrtc.Camera1Session: void lambda$listenForTextureFrames$0(org.webrtc.VideoFrame)
org.webrtc.EglBase$Context: long getNativeEglContext()
org.webrtc.EglRenderer: void releaseEglSurface(java.lang.Runnable)
org.webrtc.Empty: Empty()
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLContext getContext()
org.webrtc.ExternalAudioProcessingFactory: void setBypassFlagForCapturePost(boolean)
androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()
org.webrtc.YuvConverter$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
org.webrtc.audio.JavaAudioDeviceModule: void release()
org.webrtc.AudioTrack: void nativeRemoveSink(long,long)
org.webrtc.CapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.VideoCapturer: boolean isScreencast()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.VideoFrame$TextureBuffer: org.webrtc.VideoFrame$TextureBuffer applyTransformMatrix(android.graphics.Matrix,int,int)
org.webrtc.VideoCodecStatus: VideoCodecStatus(java.lang.String,int,int)
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer wrap(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable)
org.webrtc.H264Utils: H264Utils()
org.webrtc.EglBase14Impl$EglConnection: void release()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getReceivers(io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.RemoteInput$Api20Impl: android.os.Bundle getResultsFromIntent(android.content.Intent)
org.webrtc.ThreadUtils: boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long)
org.webrtc.FrameCryptorKeyProvider: byte[] nativeExportKey(long,java.lang.String,int)
org.webrtc.CameraEnumerationAndroid$ClosestComparator: CameraEnumerationAndroid$ClosestComparator()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] values()
org.webrtc.RtpTransceiver: org.webrtc.RtpSender nativeGetSender(long)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLContext createEglContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails from(java.util.Map)
org.webrtc.TextureBufferImpl: void release()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioAttributes(android.media.AudioAttributes)
org.webrtc.HardwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage createEncodedImage()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetSuccess()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.util.ArrayList toArrayList()
com.google.crypto.tink.proto.KeyData$KeyMaterialType: com.google.crypto.tink.proto.KeyData$KeyMaterialType[] values()
org.webrtc.CameraVideoCapturer$CameraSwitchHandler: void onCameraSwitchDone(boolean)
org.webrtc.audio.WebRtcAudioTrack: void setSpeakerMute(boolean)
org.webrtc.ScreenCapturerAndroid: void changeCaptureFormat(int,int,int)
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice[] values()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails fromNotificationDetails(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setActivity(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomBigContentView(android.app.Notification$Builder,android.widget.RemoteViews)
org.webrtc.VideoFrame$TextureBuffer: int getTextureId()
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority[] values()
org.webrtc.AudioTrack: long getNativeAudioTrack()
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy valueOf(java.lang.String)
androidx.core.app.NotificationManagerCompat$Api26Impl: java.util.List getNotificationChannelGroups(android.app.NotificationManager)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalStream(java.lang.String,org.webrtc.MediaStream)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpReceiver getRtpReceiverById(java.lang.String)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer createIceServer()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
org.webrtc.MediaStreamTrack: java.lang.String kind()
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType)
org.webrtc.TimestampAligner: long nativeRtcTimeNanos()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: ProcessLifecycleOwner$attach$1(androidx.lifecycle.ProcessLifecycleOwner)
org.webrtc.PeerConnection$Observer: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.AndroidVideoDecoder: void deliverDecodedFrame()
org.webrtc.TextureBufferImpl: void lambda$new$0(org.webrtc.TextureBufferImpl$RefCountMonitor)
org.webrtc.RendererCommon: float[] convertMatrixFromAndroidGraphicsMatrix(android.graphics.Matrix)
org.webrtc.VideoEncoderWrapper: boolean getScalingSettingsOn(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void releaseCallback(android.net.ConnectivityManager$NetworkCallback)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$TlsCertPolicy getTlsCertPolicy()
org.webrtc.audio.WebRtcAudioManager: int getInputBufferSize(android.content.Context,android.media.AudioManager,int,int)
org.webrtc.CameraSession$-CC: org.webrtc.VideoFrame$TextureBuffer createTextureBufferWithModifiedTransformMatrix(org.webrtc.TextureBufferImpl,boolean,int)
org.webrtc.NV21Buffer: void retain()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: AudioSwitchManager(android.content.Context)
org.webrtc.EncodedImage: java.lang.Integer getQp()
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setAnswerButtonColorHint(android.app.Notification$CallStyle,int)
org.webrtc.PeerConnection: java.util.List getTransceivers()
org.webrtc.RtpReceiver: java.lang.String id()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onCreateFailure(java.lang.String)
org.webrtc.RtpSender: org.webrtc.RtpParameters nativeGetParameters(long)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource valueOf(java.lang.String)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State valueOf(java.lang.String)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraFreezed(java.lang.String)
org.webrtc.AndroidVideoDecoder: void onFrame(org.webrtc.VideoFrame)
org.webrtc.EncodedImage: long getCaptureTimeNs()
org.webrtc.EglRenderer$FrameListenerAndParams: EglRenderer$FrameListenerAndParams(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
com.cloudwebrtc.webrtc.DataChannelObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$start$3()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getOutputFormat(int)
org.webrtc.SSLCertificateVerifier: boolean verify(byte[])
org.webrtc.MediaConstraints$KeyValuePair: boolean equals(java.lang.Object)
org.webrtc.audio.JavaAudioDeviceModule: void setSpeakerMute(boolean)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
org.webrtc.PeerConnection: java.util.List getSenders()
org.webrtc.TextureBufferImpl$1: void onRelease(org.webrtc.TextureBufferImpl)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setContentType(android.media.AudioAttributes$Builder,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onNewIntent(android.content.Intent)
org.webrtc.NetworkMonitor$2: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.PeerConnection: void createAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.VideoCodecInfo: VideoCodecInfo(int,java.lang.String,java.util.Map)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationDetails from(java.util.Map)
androidx.core.view.ViewCompat$Api21Impl$1: ViewCompat$Api21Impl$1(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority valueOf(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseLowLatency(boolean)
org.webrtc.EglRenderer$2: void run()
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyOutputSupported(android.content.Context)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void stop()
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] $values()
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
org.webrtc.ThreadUtils: java.lang.Object invokeAtFrontUninterruptibly(android.os.Handler,java.util.concurrent.Callable)
org.webrtc.SurfaceViewRenderer: void setEnableHardwareScaler(boolean)
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: MethodCallHandlerImpl$3(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled: boolean isEnabled(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] values()
org.webrtc.DataChannel$Init: boolean getNegotiated()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
androidx.core.location.LocationCompat$Api26Impl: float getVerticalAccuracyMeters(android.location.Location)
org.webrtc.EglRenderer$FrameListener: void onFrame(android.graphics.Bitmap)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)
org.webrtc.RTCStatsReport: java.util.Map getStatsMap()
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Integer tryParseInt(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
org.webrtc.EglRenderer: void disableFpsReduction()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$initAudioSwitch$2()
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType valueOf(java.lang.String)
org.webrtc.JavaI420Buffer: int getStrideU()
org.webrtc.MediaSource: long getNativeMediaSource()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityStopped(android.app.Activity)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
org.webrtc.LibvpxVp9Decoder: long nativeCreateDecoder()
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.Object getPrivateProperty(java.lang.Class,java.lang.Object,java.lang.String)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void lambda$error$1(java.lang.String,java.lang.String,java.lang.Object)
org.webrtc.WrappedVideoDecoderFactory: boolean disableSurfaceTextureFrame(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void finalize()
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode[] values()
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void reverse(android.animation.AnimatorSet)
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30()
org.webrtc.ScreenCapturerAndroid$1: ScreenCapturerAndroid$1(org.webrtc.ScreenCapturerAndroid)
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar: java.util.List getComponents()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)
org.webrtc.WrappedVideoDecoderFactory: WrappedVideoDecoderFactory(org.webrtc.EglBase$Context)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
org.webrtc.EglBase14$EglConnection: android.opengl.EGLDisplay getDisplay()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getUnderrunCount()
org.webrtc.PeerConnection: org.webrtc.SessionDescription nativeGetLocalDescription()
org.webrtc.AndroidVideoDecoder: AndroidVideoDecoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,int,org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.Map access$100(com.cloudwebrtc.webrtc.MethodCallHandlerImpl)
org.webrtc.EglBase14Impl: org.webrtc.EglBase14Impl$Context getEglBaseContext()
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus[] values()
org.webrtc.audio.WebRtcAudioEffects: boolean isEffectTypeAvailable(java.util.UUID,java.util.UUID)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityStarted(android.app.Activity)
androidx.core.app.NotificationCompat$BubbleMetadata$Api30Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
org.webrtc.FrameCryptor: void dispose()
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: ScheduledNotificationRepeatFrequency(java.lang.String,int)
org.webrtc.PeerConnection: boolean setBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName()
org.webrtc.Camera1Session$1: void onError(int,android.hardware.Camera)
org.webrtc.BitrateAdjuster: int getAdjustedBitrateBps()
kotlin.random.Random: Random()
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: java.util.List getComponents()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putByte(java.lang.String,byte[])
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
org.webrtc.CameraCapturer$4: void onCameraFreezed(java.lang.String)
io.flutter.view.TextureRegistry$SurfaceProducer: android.view.Surface getSurface()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dataChannelSend(java.lang.String,java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event valueOf(java.lang.String)
org.webrtc.TextureBufferImpl$1: void onDestroy(org.webrtc.TextureBufferImpl)
org.webrtc.EglBase14Impl: EglBase14Impl(org.webrtc.EglBase14Impl$EglConnection)
org.webrtc.SurfaceTextureHelper: void returnTextureFrame()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode$lambda$2(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType valueOf(java.lang.String)
org.webrtc.Metrics: Metrics()
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
org.webrtc.Camera2Session: int getFrameOrientation()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$IceConnectionState: PeerConnection$IceConnectionState(java.lang.String,int)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: void onFirstFrameRendered()
org.webrtc.SurfaceTextureHelper$3: void run()
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier[] values()
com.cloudwebrtc.webrtc.StateProvider: com.cloudwebrtc.webrtc.PeerConnectionObserver getPeerConnectionObserver(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannelGroups(android.app.NotificationManager,java.util.List)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityResumed(android.app.Activity)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$selectAudioOutput$5(java.lang.Class)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnectionDependencies)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigTextStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.SurfaceTextureHelper: void lambda$new$0(android.graphics.SurfaceTexture)
org.webrtc.PeerConnection: org.webrtc.DataChannel createDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
org.webrtc.PeerConnectionFactory$Options: int getNetworkIgnoreMask()
org.webrtc.VideoEncoder$ResolutionBitrateLimits: VideoEncoder$ResolutionBitrateLimits(int,int,int,int)
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] $values()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
org.webrtc.PeerConnection: void getStats(org.webrtc.RtpReceiver,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.RtpParameters$Encoding: java.lang.Long getSsrc()
org.webrtc.EglRenderer$2: EglRenderer$2(org.webrtc.EglRenderer)
com.google.firebase.installations.FirebaseInstallationsKtxRegistrar: FirebaseInstallationsKtxRegistrar()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStart()
org.webrtc.NetworkMonitor$1: NetworkMonitor$1(org.webrtc.NetworkMonitor)
androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.EglBase14Impl: android.opengl.EGLConfig getEglConfig(android.opengl.EGLDisplay,int[])
org.webrtc.LibvpxVp9Encoder: LibvpxVp9Encoder()
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State valueOf(java.lang.String)
org.webrtc.RtpSender: java.util.List getStreams()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushByte(byte[])
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.cloudwebrtc.webrtc.GetUserMediaImpl$5: void onStop()
org.webrtc.SessionDescription: java.lang.String getDescription()
org.webrtc.MediaCodecUtils: java.util.Map getCodecProperties(org.webrtc.VideoCodecMimeType,boolean)
org.webrtc.audio.WebRtcAudioRecord: void logMainParametersExtended()
org.webrtc.NativeLibrary: boolean isLoaded()
org.webrtc.TextureBufferImpl$2: TextureBufferImpl$2(org.webrtc.TextureBufferImpl)
org.webrtc.GlGenericDrawer$ShaderType: GlGenericDrawer$ShaderType(java.lang.String,int)
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableMinChecks()
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
org.webrtc.PeerConnection$Observer$-CC: void $default$onSelectedCandidatePairChanged(org.webrtc.PeerConnection$Observer,org.webrtc.CandidatePairChangeEvent)
org.webrtc.NV21Buffer: NV21Buffer(byte[],int,int,java.lang.Runnable)
androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)
org.webrtc.MediaStream: void removeVideoTrack(long)
org.webrtc.VideoEncoderWrapper: org.webrtc.VideoEncoder$Callback createEncoderCallback(long)
org.webrtc.AndroidVideoDecoder: void deliverByteFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
org.webrtc.VideoEncoder$BitrateAllocation: int getSum()
org.webrtc.SurfaceTextureHelper$2: void onDestroy(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$400(com.cloudwebrtc.webrtc.GetUserMediaImpl)
org.webrtc.Camera2Enumerator: java.util.List convertSizes(android.util.Size[])
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor createFrameCryptorForRtpReceiver(org.webrtc.PeerConnectionFactory,org.webrtc.RtpReceiver,java.lang.String,org.webrtc.FrameCryptorAlgorithm,org.webrtc.FrameCryptorKeyProvider)
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.VideoCodecMimeType: java.lang.String mimeType()
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordError(java.lang.String)
org.webrtc.EglRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.HardwareVideoEncoder: void updateInputFormat(android.media.MediaFormat)
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Builder setForegroundServiceBehavior(android.app.Notification$Builder,int)
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(java.lang.String)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: ScheduledNotificationBootReceiver()
org.webrtc.EglBase$ConfigBuilder: org.webrtc.EglBase$ConfigBuilder setIsRecordable(boolean)
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice valueOf(java.lang.String)
org.webrtc.HardwareVideoEncoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
org.webrtc.AudioSource: AudioSource(long)
org.webrtc.VideoDecoder: long createNative(long)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: void logNativeOutputSampleRate(int)
org.webrtc.ContextUtils: ContextUtils()
org.webrtc.VideoSource$1: VideoSource$1(org.webrtc.VideoSource)
com.google.android.gms.maps.GoogleMapOptions: GoogleMapOptions()
org.webrtc.RendererCommon$RendererEvents: void onFrameResolutionChanged(int,int,int)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory()
org.webrtc.EglRenderer: void clearImage()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: NetworkMonitorAutoDetect$SimpleNetworkCallback(org.webrtc.NetworkMonitorAutoDetect,java.util.Set)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetStreams(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState iceConnectionState()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void screenRequestPermissions(android.os.ResultReceiver)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
org.webrtc.HardwareVideoDecoderFactory: HardwareVideoDecoderFactory(org.webrtc.EglBase$Context)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
org.webrtc.FileVideoCapturer$VideoReaderY4M: org.webrtc.VideoFrame getNextFrame()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiver(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FrameCryptorAlgorithm: FrameCryptorAlgorithm(java.lang.String,int)
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(org.webrtc.RendererCommon$ScalingType,float,int,int)
org.webrtc.MediaStream: boolean nativeAddVideoTrackToNativeStream(long,long)
com.cloudwebrtc.webrtc.CameraEventsHandler: CameraEventsHandler()
com.cloudwebrtc.webrtc.audio.AudioUtils: AudioUtils()
org.webrtc.Predicate$1: boolean test(java.lang.Object)
org.webrtc.MediaSource: MediaSource(long)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
org.webrtc.GlTextureFrameBuffer: int getFrameBufferId()
com.google.firebase.installations.FirebaseInstallationsRegistrar: FirebaseInstallationsRegistrar()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void pushImage(android.media.Image)
org.webrtc.PeerConnection$IceServer: java.lang.String getHostname()
org.webrtc.PeerConnectionFactory: void onSignalingThreadReady()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionClose(java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivity()
org.webrtc.VideoEncoder$RateControlParameters: VideoEncoder$RateControlParameters(org.webrtc.VideoEncoder$BitrateAllocation,double)
org.webrtc.EglRenderer: EglRenderer(java.lang.String,org.webrtc.VideoFrameDrawer)
org.webrtc.DataChannel$Observer: void onStateChange()
org.webrtc.PeerConnection$Observer: void onIceConnectionReceivingChange(boolean)
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLConfig getConfig()
org.webrtc.FileVideoCapturer: void dispose()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
org.webrtc.Camera1Session$2: void onPreviewFrame(byte[],android.hardware.Camera)
androidx.core.location.LocationCompat$Api26Impl: boolean hasVerticalAccuracy(android.location.Location)
org.webrtc.audio.WebRtcAudioTrack: int channelCountToConfiguration(int)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.Integer getFocusModeForString(java.lang.String)
androidx.core.app.NotificationManagerCompat$Api26Impl: void deleteNotificationChannelGroup(android.app.NotificationManager,java.lang.String)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: java.lang.String getMapStrValue(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
org.webrtc.PeerConnection: void setRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void release()
org.webrtc.DataChannel$Init: boolean getOrdered()
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: void setPresentationView(android.view.View)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas()
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRates(org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: boolean equals(java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
org.webrtc.SoftwareVideoEncoderFactory: java.util.List nativeGetSupportedCodecs(long)
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: OrientationAwareScreenCapturer$3$1(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3)
org.webrtc.MediaStream: boolean removeTrack(org.webrtc.VideoTrack)
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
org.webrtc.audio.WebRtcAudioEffects: void assertTrue(boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dispose()
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback: void onWebRtcAudioTrackError(java.lang.String)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnTrimMemoryListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnTrimMemoryListener)
io.flutter.plugins.googlemaps.Messages$PlatformPatternItemType: io.flutter.plugins.googlemaps.Messages$PlatformPatternItemType[] values()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalWeakConnectivity()
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGL10 getEgl()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onCreate(androidx.lifecycle.LifecycleOwner)
org.webrtc.RtpParameters$HeaderExtension: RtpParameters$HeaderExtension(java.lang.String,int,boolean)
org.webrtc.CameraVideoCapturer$CameraStatistics: void release()
org.webrtc.RtpSender: org.webrtc.DtmfSender dtmf()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSources(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean hasKey(java.lang.String)
org.webrtc.NetworkChangeDetector$Observer: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(java.lang.String)
org.webrtc.YuvHelper: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLConfig getConfig()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setProgress(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.Camera1Enumerator: boolean isFrontFacing(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamRemoveTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.LibvpxVp8Decoder: long nativeCreateDecoder(long)
org.webrtc.EglBase$-CC: org.webrtc.EglBase$ConfigBuilder configBuilder()
org.webrtc.VideoEncoderFallback: boolean isHardwareEncoder()
org.webrtc.audio.JavaAudioDeviceModule: boolean setNoiseSuppressorEnabled(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection getDirection()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void removeNotificationFromCache(android.content.Context,java.lang.Integer)
org.webrtc.VideoFileRenderer: void lambda$release$3()
org.webrtc.VideoEncoderWrapper: void nativeOnEncodedFrame(long,org.webrtc.EncodedImage)
org.webrtc.RtpParameters: org.webrtc.RtpParameters$Rtcp getRtcp()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection fromNativeIndex(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getReceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
org.webrtc.NetworkChangeDetector: boolean supportNetworkCallback()
org.webrtc.SurfaceViewRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
org.webrtc.VideoSource: void setVideoProcessor(org.webrtc.VideoProcessor)
org.webrtc.PeerConnection$Observer$-CC: void $default$onTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpTransceiver)
org.webrtc.EglBase14Impl$Context: android.opengl.EGLContext getRawContext()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putBoolean(java.lang.String,boolean)
io.flutter.view.TextureRegistry$SurfaceProducer: boolean handlesCropAndRotation()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getAdjustedDefault()
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setLegacyStreamType(android.media.AudioAttributes$Builder,int)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
org.webrtc.RTCStats: java.util.Map getMembers()
org.webrtc.PeerConnection: java.util.List nativeGetTransceivers()
org.webrtc.HardwareVideoEncoder: void lambda$deliverEncodedImage$0(int)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy)
org.webrtc.PlatformSoftwareVideoDecoderFactory: PlatformSoftwareVideoDecoderFactory(org.webrtc.EglBase$Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void finalize()
org.webrtc.SurfaceViewRenderer: void setFpsReduction(float)
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: void onCameraSwitchError(java.lang.String)
org.webrtc.HardwareVideoEncoder: boolean shouldForceKeyFrame(long)
org.webrtc.RtpParameters$Encoding: java.lang.String getRid()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State fromNativeIndex(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.PeerConnection$RTCConfiguration parseRTCConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
io.flutter.view.TextureRegistry$GLTextureConsumer: android.graphics.SurfaceTexture getSurfaceTexture()
org.webrtc.MediaStream: void dispose()
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack$MediaType stringToMediaType(java.lang.String)
org.webrtc.MediaCodecUtils: MediaCodecUtils()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setTimeoutAfter(android.app.Notification$Builder,long)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setSmallIcon(android.app.Notification$Builder,java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void restartIce(java.lang.String)
org.webrtc.CalledByNative: java.lang.String value()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceCreated(android.graphics.SurfaceTexture)
org.webrtc.PeerConnection: boolean nativeRemoveIceCandidates(org.webrtc.IceCandidate[])
org.webrtc.RtpSender: boolean setTrack(org.webrtc.MediaStreamTrack,boolean)
org.webrtc.SurfaceTextureHelper: void lambda$dispose$6()
org.webrtc.FrameCryptorKeyProvider: boolean setSharedKey(int,byte[])
androidx.core.app.NotificationCompat$DecoratedCustomViewStyle$Api24Impl: android.app.Notification$Style createDecoratedCustomViewStyle()
org.webrtc.DataChannel: org.webrtc.DataChannel$State state()
com.google.crypto.tink.proto.HashType: com.google.crypto.tink.proto.HashType[] values()
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy[] values()
org.webrtc.RtpCapabilities: java.util.List getCodecs()
org.webrtc.NetworkMonitorAutoDetect$NetworkState: boolean isConnected()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: double getDouble(java.lang.String)
org.webrtc.ScreenCapturerAndroid: void stopCapture()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void requestExactAlarmsPermission(com.dexterous.flutterlocalnotifications.PermissionRequestListener)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
org.webrtc.EglBase$EglConnection$-CC: org.webrtc.EglBase$EglConnection createEgl10(int[])
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: NetworkMonitorAutoDetect$WifiDirectManagerDelegate(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.Camera2Enumerator: java.util.List convertFramerates(android.util.Range[],int)
org.webrtc.FileVideoCapturer$VideoReaderY4M: void close()
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
org.webrtc.MediaCodecWrapper: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
org.webrtc.RtpParameters: java.util.List getHeaderExtensions()
org.webrtc.TextureBufferImpl: int getUnscaledHeight()
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] values()
org.webrtc.RendererCommon$ScalingType: org.webrtc.RendererCommon$ScalingType[] values()
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: void stopThread()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceCheckIntervalStrongConnectivity()
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: android.content.Context getPresentationContext()
org.webrtc.EglBase10$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector createNetworkChangeDetector(android.content.Context,java.lang.String)
org.webrtc.RtpTransceiver: boolean nativeSetDirection(long,org.webrtc.RtpTransceiver$RtpTransceiverDirection)
io.flutter.embedding.engine.FlutterJNI: void nativeScheduleFrame(long)
org.webrtc.Camera2Session$CaptureSessionCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)
org.webrtc.EglRenderer: void setFpsReduction(float)
org.webrtc.RtpTransceiver: void stop()
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State[] values()
org.webrtc.Camera1Session: void listenForTextureFrames()
androidx.window.extensions.core.util.function.Consumer: void accept(java.lang.Object)
org.webrtc.audio.AudioDeviceModule: boolean setPreferredMicrophoneFieldDimension(float)
com.cloudwebrtc.webrtc.utils.Utils: java.lang.String iceConnectionStateString(org.webrtc.PeerConnection$IceConnectionState)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpReceiverToMap(org.webrtc.RtpReceiver)
org.webrtc.SurfaceTextureHelper$1: SurfaceTextureHelper$1(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$FrameRefMonitor,java.lang.String)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setInjectableLogger(org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.PeerConnection$Observer: void onRemoveStream(org.webrtc.MediaStream)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType[] values()
org.webrtc.PeerConnection$TcpCandidatePolicy: PeerConnection$TcpCandidatePolicy(java.lang.String,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: java.util.List getActiveNetworkList()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.Map extractNotificationResponseMap(android.content.Intent)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryName(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.util.List createIceServers(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getBufferCapacityInFrames()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
com.google.firebase.messaging.FirebaseMessagingRegistrar: com.google.firebase.messaging.FirebaseMessaging lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
org.webrtc.audio.VolumeLogger$LogVolumeTask: void run()
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderExportKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpSender: void checkRtpSenderExists()
org.webrtc.EglBase14Impl: android.opengl.EGLDisplay getEglDisplay()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver nativeAddTransceiverWithTrack(long,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions createInitializationOptions()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspot(android.graphics.drawable.Drawable,float,float)
org.webrtc.EglBase10Impl$EglConnection: void retain()
org.webrtc.PeerConnection: boolean addIceCandidate(org.webrtc.IceCandidate)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy[] values()
org.webrtc.audio.AudioDeviceModule$-CC: boolean $default$setNoiseSuppressorEnabled(org.webrtc.audio.AudioDeviceModule,boolean)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddStream(org.webrtc.MediaStream)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateFailure(java.lang.String)
org.webrtc.EglBase14Impl$EglConnection: void retain()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: void parseConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.util.List)
org.webrtc.EglRenderer: EglRenderer(java.lang.String)
org.webrtc.PeerConnection: void nativeSetAudioRecording(boolean)
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType[] values()
io.flutter.plugins.googlemaps.GoogleMapsPlugin: GoogleMapsPlugin()
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
androidx.fragment.app.FragmentContainerView: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.VideoFrame$I420Buffer: int getStrideY()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.webrtc.MediaCodecUtils: boolean isHardwareAcceleratedQOrHigher(android.media.MediaCodecInfo)
org.webrtc.PeerConnectionFactory: java.lang.String fieldTrialsFindFullName(java.lang.String)
androidx.core.location.LocationRequestCompat$Api31Impl: android.location.LocationRequest toLocationRequest(androidx.core.location.LocationRequestCompat)
org.webrtc.EglBase10Impl: void createSurface(android.graphics.SurfaceTexture)
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void requestStart(android.app.Activity,int)
androidx.core.view.ViewGroupCompat$Api21Impl: void setTransitionGroup(android.view.ViewGroup,boolean)
org.webrtc.ApplicationContextProvider: ApplicationContextProvider()
org.webrtc.PeerConnection$Observer$-CC: void $default$onIceCandidateError(org.webrtc.PeerConnection$Observer,org.webrtc.IceCandidateErrorEvent)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
org.webrtc.DtmfSender: DtmfSender(long)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType fromNativeIndex(int)
com.baseflow.geolocator.GeolocatorLocationService: GeolocatorLocationService()
org.webrtc.CallSessionFileRotatingLogSink: CallSessionFileRotatingLogSink(java.lang.String,int,org.webrtc.Logging$Severity)
org.webrtc.SurfaceTextureHelper: org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getCameraInfo(int)
org.webrtc.audio.WebRtcAudioTrack: void logBufferSizeInFrames()
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Action$Builder createBuilder(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int write(byte[],int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void stopRecording(java.lang.Integer)
org.webrtc.RenderSynchronizer: void removeListener(org.webrtc.RenderSynchronizer$Listener)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: PlatformSoftwareVideoDecoderFactory$1()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateSuccess(org.webrtc.SessionDescription)
org.webrtc.NetworkMonitor: void notifyObserversOfNetworkDisconnect(long)
org.webrtc.EglRenderer: void logD(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
org.webrtc.PeerConnection$IceServer: java.util.List getTlsAlpnProtocols()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMessagingStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.DataChannel: long nativeBufferedAmount()
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl: android.content.Intent access$002(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.content.Intent)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)
org.webrtc.Logging: void enableTracing(java.lang.String,java.util.EnumSet)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTint(android.graphics.drawable.Drawable,int)
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle setGroupConversation(android.app.Notification$MessagingStyle,boolean)
org.webrtc.NetworkMonitor: void notifyObserversOfConnectionTypeChange(org.webrtc.NetworkChangeDetector$ConnectionType)
com.google.crypto.tink.shaded.protobuf.ProtoSyntax: com.google.crypto.tink.shaded.protobuf.ProtoSyntax valueOf(java.lang.String)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,org.webrtc.TextureBufferImpl$RefCountMonitor)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
org.webrtc.ThreadUtils$1CaughtException: ThreadUtils$1CaughtException()
org.webrtc.FrameEncryptor: long getNativeFrameEncryptor()
io.flutter.embedding.engine.FlutterJNI: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
org.webrtc.audio.WebRtcAudioTrack: int GetPlayoutUnderrunCount()
org.webrtc.CameraCapturer: boolean isScreencast()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: org.webrtc.SurfaceTextureHelper access$000(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
org.webrtc.LibvpxVp8Decoder: LibvpxVp8Decoder()
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void initVideoEncoder()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
org.webrtc.EglRenderer: void lambda$release$0(java.util.concurrent.CountDownLatch)
io.flutter.plugins.googlemaps.Messages$PlatformMapType: io.flutter.plugins.googlemaps.Messages$PlatformMapType valueOf(java.lang.String)
org.webrtc.Logging$Severity: org.webrtc.Logging$Severity[] $values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onResume(androidx.lifecycle.LifecycleOwner)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setBigPicture(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
org.webrtc.PeerConnection$SignalingState: PeerConnection$SignalingState(java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: void invoke(java.lang.Object[])
org.webrtc.Camera1Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.EglRenderer: void logStatistics()
org.webrtc.EglBase: void createSurface(android.view.Surface)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: AnyThreadSink(io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)
androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)
org.webrtc.PeerConnection: void nativeRestartIce()
org.webrtc.MediaStreamTrack$State: org.webrtc.MediaStreamTrack$State[] $values()
com.google.crypto.tink.shaded.protobuf.WireFormat$FieldType: com.google.crypto.tink.shaded.protobuf.WireFormat$FieldType[] values()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setBadgeIconType(android.app.Notification$Builder,int)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void removeRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState)
com.google.android.gms.common.api.internal.zzd: zzd()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setInboxStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.Metrics: void enable()
org.webrtc.PeerConnection: void setAudioRecording(boolean)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: com.cloudwebrtc.webrtc.MethodCallHandlerImpl access$100(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionRemoveStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SoftwareVideoDecoderFactory: long nativeCreateFactory()
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStatsForTrack$1(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
io.flutter.view.TextureRegistry$SurfaceProducer: void scheduleFrame()
org.webrtc.EglRenderer: void lambda$releaseEglSurface$3(java.lang.Runnable)
org.webrtc.PeerConnection$RTCConfiguration: int getIceBackupCandidatePairPingInterval()
org.webrtc.JavaI420Buffer: void checkCapacity(java.nio.ByteBuffer,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState valueOf(java.lang.String)
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType[] values()
com.cloudwebrtc.webrtc.StateProvider: org.webrtc.MediaStreamTrack getLocalTrack(java.lang.String)
org.webrtc.NativeCapturerObserver: NativeCapturerObserver(long)
org.webrtc.RtpTransceiver: void stopInternal()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
org.webrtc.RTCStatsCollectorCallback: void onStatsDelivered(org.webrtc.RTCStatsReport)
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onReceive(android.content.Context,android.content.Intent)
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int)
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.PeerConnection$Observer)
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
org.webrtc.VideoEncoder$CodecSpecificInfoVP9: VideoEncoder$CodecSpecificInfoVP9()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStableWritableConnectionPingIntervalMs()
org.webrtc.TurnCustomizer: long getNativeTurnCustomizer()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
org.webrtc.audio.LowLatencyAudioBufferManager: LowLatencyAudioBufferManager()
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnectionDependencies$Builder builder(org.webrtc.PeerConnection$Observer)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type valueOf(java.lang.String)
io.flutter.view.TextureRegistry$SurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$EglConnection)
org.webrtc.EglThread$ReleaseMonitor: boolean onRelease(org.webrtc.EglThread)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidRawSoundResource(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onSetSuccess()
org.webrtc.HardwareVideoDecoderFactory$1: HardwareVideoDecoderFactory$1()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] values()
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem nativeGenerateCertificate(org.webrtc.PeerConnection$KeyType,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void resultError(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onCancel(java.lang.Object)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: boolean equals(java.lang.Object)
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void setCurrentPlayTime(android.animation.AnimatorSet,long)
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.AndroidVideoDecoder: void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.Camera1Helper: java.util.List getSupportedFormats(int)
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] $values()
org.webrtc.FrameCryptor: void setKeyIndex(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$900(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.VideoFileRenderer: VideoFileRenderer(java.lang.String,int,int,org.webrtc.EglBase$Context)
org.webrtc.VideoFrame: org.webrtc.VideoFrame$Buffer getBuffer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.os.Parcelable castToParcelable(android.app.Person)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTransceiverOfType(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraCapturer$6: CameraCapturer$6(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
org.webrtc.VideoProcessor$-CC: void $default$onFrameCaptured(org.webrtc.VideoProcessor,org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
com.google.firebase.FirebaseCommonKtxRegistrar: java.util.List getComponents()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.NetworkChangeDetector$NetworkInformation: long getHandle()
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] values()
org.webrtc.RTCStatsReport: java.lang.String toString()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void createLocalMediaStream(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SurfaceViewRenderer: void surfaceCreated(android.view.SurfaceHolder)
org.webrtc.RtpReceiver: void dispose()
org.webrtc.SurfaceViewRenderer: java.lang.String getResourceName()
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getOutputFormat()
org.webrtc.SimulcastVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
org.webrtc.NativeLibrary$DefaultLoader: NativeLibrary$DefaultLoader()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback)
com.dexterous.flutterlocalnotifications.models.NotificationAction: java.util.List castList(java.lang.Class,java.util.Collection)
org.webrtc.PeerConnection: PeerConnection(org.webrtc.NativePeerConnectionFactory)
org.webrtc.DtmfSender: java.lang.String tones()
org.webrtc.Size: Size(int,int)
org.webrtc.HardwareVideoEncoder$BusyCount: void decrement()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$updatePreferredDeviceList$6()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ObjectType getType(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void createDataChannel(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: GetUserMediaImpl(com.cloudwebrtc.webrtc.StateProvider,android.content.Context)
org.webrtc.Camera2Enumerator: java.util.List getSupportedSizes(android.hardware.camera2.CameraCharacteristics)
org.webrtc.AndroidVideoDecoder: org.webrtc.SurfaceTextureHelper createSurfaceTextureHelper()
androidx.core.location.LocationCompat$Api26Impl: boolean hasBearingAccuracy(android.location.Location)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$BundlePolicy getBundlePolicy()
org.webrtc.RtpParameters$DegradationPreference: RtpParameters$DegradationPreference(java.lang.String,int)
org.webrtc.RtpSender: void nativeSetStreams(long,java.util.List)
org.webrtc.MediaStreamTrack: org.webrtc.MediaStreamTrack createMediaStreamTrack(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: MethodCallHandlerImpl$1(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.util.concurrent.ExecutorService getExecutor()
com.cloudwebrtc.webrtc.DataChannelObserver: void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.webrtc.Histogram: void addSample(int)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$ScalingSettings getScalingSettings()
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
org.webrtc.ThreadUtils$1: void run()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader29()
org.webrtc.SurfaceTextureHelper: void updateTexImage()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: AnyThreadResult(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.LibvpxVp9Encoder: boolean isHardwareEncoder()
org.webrtc.VideoFrameDrawer$YuvUploader: VideoFrameDrawer$YuvUploader()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStreamTrack getLocalTrack(java.lang.String)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setVisibleFraction(float,float)
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] $values()
org.webrtc.RtpCapabilities: java.util.List getHeaderExtensions()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$AdapterType getNetworkPreference()
org.webrtc.EglBase10Impl: long nativeGetCurrentNativeEGLContext()
org.webrtc.PeerConnection: boolean nativeAddIceCandidate(java.lang.String,int,java.lang.String)
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus valueOf(java.lang.String)
org.webrtc.RendererCommon$VideoLayoutMeasure: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
org.webrtc.audio.WebRtcAudioRecord: void reportWebRtcAudioRecordInitError(java.lang.String)
org.webrtc.RTCStats: void appendValue(java.lang.StringBuilder,java.lang.Object)
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.VideoDecoderWrapper: VideoDecoderWrapper()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkTypeForVpn()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCategory(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.VideoFrame$TextureBuffer$-CC: org.webrtc.VideoFrame$TextureBuffer $default$applyTransformMatrix(org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int)
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
org.webrtc.PeerConnection$BundlePolicy: org.webrtc.PeerConnection$BundlePolicy[] values()
com.dexterous.flutterlocalnotifications.models.MessageDetails: MessageDetails(java.lang.String,java.lang.Long,com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.String)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void detachCallback(java.lang.Integer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamAddTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.google.crypto.tink.shaded.protobuf.WireFormat$FieldType: com.google.crypto.tink.shaded.protobuf.WireFormat$FieldType valueOf(java.lang.String)
org.webrtc.SurfaceViewRenderer: void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateNextNotificationTrigger(long,long)
org.webrtc.VideoEncoder$Settings: VideoEncoder$Settings(int,int,int,int,int,int,boolean)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void startRearDisplaySession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidBigPictureResources(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorFactoryCreateKeyProvider(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.content.Context,java.lang.String)
org.webrtc.DefaultVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
androidx.core.app.RemoteInput$Api20Impl: void addResultsToIntent(java.lang.Object,android.content.Intent,android.os.Bundle)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkConnect(org.webrtc.NetworkChangeDetector$NetworkInformation)
org.webrtc.CameraCapturer: void stopCapture()
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.VideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$5: boolean isEnabled(java.lang.String)
org.webrtc.NativeAndroidVideoTrackSource: void nativeSetState(long,boolean)
com.google.firebase.datatransport.TransportRegistrar: com.google.android.datatransport.TransportFactory lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$getPluginConstantsForFirebaseApp$0(com.google.firebase.FirebaseApp,com.google.android.gms.tasks.TaskCompletionSource)
org.webrtc.audio.WebRtcAudioUtils: boolean runningOnEmulator()
org.webrtc.AndroidVideoDecoder: void reformat(android.media.MediaFormat)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncodeInternal()
org.webrtc.MediaConstraints$KeyValuePair: int hashCode()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.view.Surface getSurface()
org.webrtc.EglBase: void createDummyPbufferSurface()
org.webrtc.TimestampAligner: long nativeTranslateTimestamp(long,long)
org.webrtc.MediaConstraints: java.util.List getMandatory()
org.webrtc.PeerConnectionFactory: long nativeCreateAudioTrack(long,java.lang.String,long)
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange: int hashCode()
org.webrtc.EglBase10Impl$EglConnection: javax.microedition.khronos.egl.EGLContext getContext()
org.webrtc.HardwareVideoEncoder$1: void run()
org.webrtc.PeerConnectionFactory: void nativeFreeFactory(long)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void setParameters(android.os.Bundle)
org.webrtc.Camera1Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.audio.WebRtcAudioRecord: java.lang.String lambda$scheduleLogRecordingConfigurationsTask$0(android.media.AudioRecord)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.String getImplementationName$lambda$5(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.FrameCryptor: void setEnabled(boolean)
org.webrtc.VideoDecoder$Settings: VideoDecoder$Settings(int,int,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setIsVideo(android.app.Notification$CallStyle,boolean)
org.webrtc.TextureBufferImpl: TextureBufferImpl(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,java.lang.Runnable)
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem nativeGetCertificate()
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostResumed(android.app.Activity)
androidx.fragment.app.DefaultSpecialEffectsController$Api24Impl: long totalDuration(android.animation.AnimatorSet)
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory[] values()
org.webrtc.RtpCapabilities$CodecCapability: java.lang.Integer getNumChannels()
com.google.crypto.tink.KeyTemplate$OutputPrefixType: com.google.crypto.tink.KeyTemplate$OutputPrefixType[] values()
com.cloudwebrtc.webrtc.record.FrameCapturer: FrameCapturer(org.webrtc.VideoTrack,java.io.File,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.FileVideoCapturer: void tick()
org.webrtc.EglThread: void addExceptionCallback(java.lang.Runnable)
org.webrtc.ThreadUtils: java.lang.StackTraceElement[] concatStackTraces(java.lang.StackTraceElement[],java.lang.StackTraceElement[])
org.webrtc.CameraEnumerationAndroid$ClosestComparator: int compare(java.lang.Object,java.lang.Object)
org.webrtc.BuiltinAudioDecoderFactoryFactory: long nativeCreateBuiltinAudioDecoderFactory()
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void access$300(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,android.content.Intent)
io.flutter.plugins.pathprovider.Messages$StorageDirectory: io.flutter.plugins.pathprovider.Messages$StorageDirectory valueOf(java.lang.String)
org.webrtc.ThreadUtils$2: ThreadUtils$2(java.util.concurrent.CountDownLatch)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnFrameConsumedListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnFrameConsumedListener)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
org.webrtc.ScreenCapturerAndroid$1: void run()
org.webrtc.VideoDecoderWrapper: void nativeOnDecodedFrame(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
org.webrtc.Logging: void v(java.lang.String,java.lang.String)
org.webrtc.ExternalAudioProcessingFactory: long createNative()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
org.webrtc.MediaStream: boolean nativeRemoveAudioTrack(long,long)
org.webrtc.RtpCapabilities$HeaderExtensionCapability: RtpCapabilities$HeaderExtensionCapability(java.lang.String,int,boolean)
org.webrtc.Camera1Enumerator: java.lang.String getDeviceName(int)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status[] values()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: NetworkMonitorAutoDetect$ConnectivityManagerDelegate(android.net.ConnectivityManager,java.util.Set,java.lang.String)
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver getReceiver()
org.webrtc.RenderSynchronizer: void traceRenderWindowChange()
org.webrtc.EglRenderer: void printStackTrace()
org.webrtc.YuvConverter: org.webrtc.VideoFrame$I420Buffer convertInternal(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrackForRendererById(java.lang.String)
org.webrtc.audio.LowLatencyAudioBufferManager: void maybeAdjustBufferSize(android.media.AudioTrack)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: OrientationAwareScreenCapturer(android.content.Intent,android.media.projection.MediaProjection$Callback)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkDisconnect(long,long)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode valueOf(java.lang.String)
org.webrtc.VideoSource: void lambda$setVideoProcessor$0(org.webrtc.VideoFrame)
org.webrtc.CryptoOptions$Srtp: boolean getEnableGcmCryptoSuites()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.Integer getConstrainInt(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String)
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite$MethodToInvoke: com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite$MethodToInvoke[] values()
org.webrtc.audio.WebRtcAudioTrackUtils: WebRtcAudioTrackUtils()
org.webrtc.RtpSender: boolean setParameters(org.webrtc.RtpParameters)
org.webrtc.VideoFrame$I420Buffer: int getStrideU()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setRotation(int)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference[] values()
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: NotificationStyle(java.lang.String,int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3$1: void run()
org.webrtc.EglRenderer: void lambda$addFrameListener$1(org.webrtc.RendererCommon$GlDrawer,org.webrtc.EglRenderer$FrameListener,float,boolean)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void endOfStream()
androidx.core.view.WindowInsetsCompat$Impl: boolean isRound()
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState[] values()
org.webrtc.EglThread: void lambda$onRenderWindowOpen$2()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRates$lambda$8(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$RateControlParameters)
org.webrtc.audio.WebRtcAudioManager: int getSampleRate(android.media.AudioManager)
org.webrtc.IceCandidate: java.lang.String getSdpMid()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setSize(int,int)
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
org.webrtc.RtpReceiver: void checkRtpReceiverExists()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetSuccess()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: MethodCallHandlerImpl$2(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: void nativeSetLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription)
io.flutter.embedding.engine.FlutterJNI: void loadLibrary(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkPreference(long,org.webrtc.NetworkChangeDetector$ConnectionType,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateOffer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType,long)
org.webrtc.RtpCapabilities: RtpCapabilities(java.util.List,java.util.List)
org.webrtc.audio.WebRtcAudioTrack: int getInitialBufferSizeInFrames()
org.webrtc.Logging: void nativeEnableLogToDebugOutput(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: void invoke(java.lang.Object[])
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecodeInternal(int,int)
org.webrtc.audio.JavaAudioDeviceModule: boolean isBuiltInAcousticEchoCancelerSupported()
org.webrtc.RtpTransceiver: void checkRtpTransceiverExists()
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message setData(android.app.Notification$MessagingStyle$Message,java.lang.String,android.net.Uri)
org.webrtc.EglBase$-CC: int getOpenGlesVersionFromConfig(int[])
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: AudioTrackInterceptor(android.media.AudioTrack,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
org.webrtc.H264Utils: java.util.Map getDefaultH264Params(boolean)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
org.webrtc.PeerConnection$RTCConfiguration: int getMaxIPv6Networks()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
org.webrtc.TurnCustomizer: void nativeFreeTurnCustomizer(long)
com.google.firebase.iid.Registrar: com.google.firebase.iid.FirebaseInstanceId lambda$getComponents$0$Registrar(com.google.firebase.components.ComponentContainer)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Action$Builder setAllowGeneratedReplies(android.app.Notification$Action$Builder,boolean)
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseFocusMode(android.hardware.camera2.CaptureRequest$Builder)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionGetStats(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: boolean putLocalTrack(java.lang.String,org.webrtc.MediaStreamTrack)
org.webrtc.PeerConnection: void nativeRemoveLocalStream(long)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void detachCallback(java.lang.Integer)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannels(android.app.NotificationManager,java.util.List)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setVideoTrack(org.webrtc.VideoTrack)
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer[] values()
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.BuiltinAudioEncoderFactoryFactory: long nativeCreateBuiltinAudioEncoderFactory()
org.webrtc.EglBase14Impl$EglConnection: EglBase14Impl$EglConnection()
org.webrtc.EglRenderer: void clearImage(float,float,float,float)
org.webrtc.EncodedImage$FrameType: org.webrtc.EncodedImage$FrameType valueOf(java.lang.String)
org.webrtc.FileVideoCapturer: void startCapture(int,int,int)
com.dexterous.flutterlocalnotifications.utils.StringUtils: StringUtils()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void setFpsReduction(float)
org.webrtc.SoftwareVideoDecoderFactory: SoftwareVideoDecoderFactory()
org.webrtc.RtpParameters$Codec: org.webrtc.MediaStreamTrack$MediaType getKind()
org.webrtc.EglBase14Impl: org.webrtc.EglBase$Context getEglBaseContext()
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
org.webrtc.CameraCapturer$9: CameraCapturer$9(org.webrtc.CameraCapturer,org.webrtc.CameraSession)
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState valueOf(java.lang.String)
com.cloudwebrtc.webrtc.record.AudioChannel: com.cloudwebrtc.webrtc.record.AudioChannel[] $values()
org.webrtc.GlUtil: int generateTexture(int)
org.webrtc.RtpCapabilities$CodecCapability: RtpCapabilities$CodecCapability()
org.webrtc.EglBase14Impl: void swapBuffers()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
androidx.core.app.NotificationManagerCompat$Api24Impl: boolean areNotificationsEnabled(android.app.NotificationManager)
org.webrtc.NetworkChangeDetector$ConnectionType: NetworkChangeDetector$ConnectionType(java.lang.String,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: GetUserMediaImpl$1(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean)
org.webrtc.audio.WebRtcAudioRecord: boolean stopRecording()
org.webrtc.SimulcastVideoEncoder: long createNative(long)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
io.flutter.plugins.googlemaps.Messages$PlatformPatternItemType: io.flutter.plugins.googlemaps.Messages$PlatformPatternItemType valueOf(java.lang.String)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: int access$000(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
org.webrtc.audio.WebRtcAudioRecord: void setPreferredDevice(android.media.AudioDeviceInfo)
org.webrtc.audio.WebRtcAudioUtils: void logAudioState(java.lang.String,android.content.Context,android.media.AudioManager)
org.webrtc.RtpReceiver: void SetObserver(org.webrtc.RtpReceiver$Observer)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setSortKey(android.app.Notification$Builder,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite$MethodToInvoke: com.google.crypto.tink.shaded.protobuf.GeneratedMessageLite$MethodToInvoke valueOf(java.lang.String)
org.webrtc.WebRtcClassLoader: WebRtcClassLoader()
org.webrtc.Predicate$3: Predicate$3(org.webrtc.Predicate)
org.webrtc.VideoEncoder$Capabilities: VideoEncoder$Capabilities(boolean)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readGroupingInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.PeerConnection: void restartIce()
org.webrtc.HardwareVideoEncoder$BusyCount: HardwareVideoEncoder$BusyCount()
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType[] values()
org.webrtc.EglBase10Impl$EglConnection: void release()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,android.app.Person)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] $values()
org.webrtc.RTCStatsReport: RTCStatsReport(long,java.util.Map)
org.webrtc.EglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
org.webrtc.Camera2Session: void start()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean shouldUpdate()
org.webrtc.EglBase14Impl: void makeCurrent()
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean getBoolean(int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getSurfaceIceCandidatesOnIceTransportTypeChanged()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: kotlin.Unit lambda$new$0(java.util.List,com.twilio.audioswitch.AudioDevice)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean supportNetworkCallback()
org.webrtc.DynamicBitrateAdjuster: void setTargets(int,double)
org.webrtc.RendererCommon$GlDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void show(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
org.webrtc.CameraCapturer$8: void run()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigPictureStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackSetVolume(java.lang.String,double,java.lang.String)
org.webrtc.WrappedVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
org.webrtc.RtpTransceiver: RtpTransceiver(long)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void endRearDisplaySession()
org.webrtc.FrameCryptorKeyProvider: boolean setKey(java.lang.String,int,byte[])
org.webrtc.Camera2Session$SessionState: org.webrtc.Camera2Session$SessionState[] $values()
org.webrtc.NetworkMonitor: void updateCurrentConnectionType(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.CameraVideoCapturer$CameraStatistics: void checkThread()
androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableImplicitRollback()
org.webrtc.GlRectDrawer: GlRectDrawer()
org.webrtc.CameraSession$CreateSessionCallback: void onDone(org.webrtc.CameraSession)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.audio.WebRtcAudioRecord: boolean isNoiseSuppressorSupported()
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
org.webrtc.RendererCommon$RendererEvents: void onFirstFrameRendered()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])
org.webrtc.Camera1Capturer: boolean isScreencast()
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$Builder builder()
org.webrtc.FrameCryptor: int nativeGetKeyIndex(long)
org.webrtc.VideoFrame: long getTimestampNs()
org.webrtc.Camera2Session$CaptureSessionCallback: void chooseStabilizationMode(android.hardware.camera2.CaptureRequest$Builder)
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Action$Builder setSemanticAction(android.app.Notification$Action$Builder,int)
org.webrtc.YuvHelper: void nativeI420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
org.webrtc.Histogram: org.webrtc.Histogram createEnumeration(java.lang.String,int)
org.webrtc.DynamicBitrateAdjuster: int getAdjustedBitrateBps()
org.webrtc.audio.WebRtcAudioTrack: void logMainParametersExtended()
org.webrtc.JavaI420Buffer: org.webrtc.VideoFrame$Buffer cropAndScaleI420(org.webrtc.VideoFrame$I420Buffer,int,int,int,int,int,int)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory nativeCreatePeerConnectionFactory(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long)
org.webrtc.VideoEncoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getImplementations(org.webrtc.VideoEncoderFactory)
org.webrtc.PeerConnection$PortPrunePolicy: org.webrtc.PeerConnection$PortPrunePolicy[] values()
com.google.crypto.tink.proto.HashType: com.google.crypto.tink.proto.HashType valueOf(java.lang.String)
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
com.google.firebase.datatransport.TransportRegistrar: java.util.List getComponents()
com.google.maps.android.ui.RotationLayout: void setViewRotation(int)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus valueOf(java.lang.String)
org.webrtc.VideoFrame$TextureBuffer$Type: org.webrtc.VideoFrame$TextureBuffer$Type[] $values()
org.webrtc.PeerConnectionFactory: long nativeGetNativePeerConnectionFactory(long)
org.webrtc.EglThread: void release()
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
org.webrtc.audio.WebRtcAudioTrack: void assertTrue(boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
org.webrtc.PeerConnection: void nativeSetAudioPlayout(boolean)
org.webrtc.PeerConnection$AdapterType: PeerConnection$AdapterType(java.lang.String,int,java.lang.Integer)
org.webrtc.CameraSession$Events: void onCameraOpening()
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
org.webrtc.PeerConnectionFactory: void checkInitializeHasBeenCalled()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
org.webrtc.MediaConstraints$KeyValuePair: MediaConstraints$KeyValuePair(java.lang.String,java.lang.String)
kotlin.collections.AbstractList: AbstractList()
org.webrtc.MediaStream: void checkMediaStreamExists()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setManageAudioFocus(java.lang.Boolean)
org.webrtc.GlShader: void setVertexAttribArray(java.lang.String,int,java.nio.FloatBuffer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void restartIce()
org.webrtc.PeerConnection$PeerConnectionState: PeerConnection$PeerConnectionState(java.lang.String,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.GlGenericDrawer: void drawYuv(int[],float[],int,int,int,int,int,int)
org.webrtc.VideoFileRenderer: void lambda$release$2(java.util.concurrent.CountDownLatch)
com.google.crypto.tink.shaded.protobuf.JavaType: com.google.crypto.tink.shaded.protobuf.JavaType valueOf(java.lang.String)
org.webrtc.Camera2Session$CameraStateCallback: void onOpened(android.hardware.camera2.CameraDevice)
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener getActiveFocusListener()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void play()
org.webrtc.ThreadUtils: void invokeAtFrontUninterruptibly(android.os.Handler,java.lang.Runnable)
org.webrtc.AudioTrack: void removeSink(org.webrtc.AudioTrackSink)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onEncoderBroken()
org.webrtc.PeerConnection$Observer: void onIceCandidate(org.webrtc.IceCandidate)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void endRearDisplayPresentationSession()
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)
androidx.core.view.WindowInsetsCompat$Impl21: boolean isConsumed()
org.webrtc.EglBase14Impl$EglConnection: void lambda$new$1()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: long createNative(long)
com.cloudwebrtc.webrtc.utils.EglUtils: EglUtils()
org.webrtc.MediaStream: java.lang.String nativeGetId(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeWaitOnFence(android.media.Image)
org.webrtc.PeerConnectionFactory: void nativeStopAecDump(long)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] $values()
com.google.firebase.messaging.FirebaseMessagingKtxRegistrar: FirebaseMessagingKtxRegistrar()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isH264HighProfileSupported(android.media.MediaCodecInfo)
org.webrtc.Camera1Enumerator: java.util.List convertSizes(java.util.List)
org.webrtc.RenderSynchronizer$Listener: void onRenderWindowClose()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State[] values()
org.webrtc.Camera2Session$CameraCaptureCallback: Camera2Session$CameraCaptureCallback()
org.webrtc.EglRenderer$1: void run()
org.webrtc.VideoEncoder$EncoderInfo: VideoEncoder$EncoderInfo(int,boolean)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableCpuOveruseDetection()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorSetKeyIndex(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpSender: void nativeSetFrameEncryptor(long,long)
org.webrtc.CameraVideoCapturer$CameraStatistics: CameraVideoCapturer$CameraStatistics(org.webrtc.SurfaceTextureHelper,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putMap(java.lang.String,java.util.Map)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(java.lang.Object)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
org.webrtc.EglThread: org.webrtc.EglBase createEglBaseWithSharedConnection()
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: int getPlaybackHeadPosition()
org.webrtc.RTCStatsReport: double getTimestampUs()
org.webrtc.RtpParameters$Encoding: int getNetworkPriority()
org.webrtc.PeerConnection$IceServer: java.lang.String getUsername()
io.flutter.plugin.platform.PlatformViewWrapper: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
org.webrtc.EglBase: int surfaceHeight()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase10Impl: void createSurfaceInternal(java.lang.Object)
org.webrtc.Camera2Session: void reportError(java.lang.String)
org.webrtc.DataChannel: void dispose()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.core.app.NotificationCompat$CallStyle$Api23Impl: void setLargeIcon(android.app.Notification$Builder,android.graphics.drawable.Icon)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$SdpSemantics getSdpSemantics()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $values()
org.webrtc.SurfaceEglRenderer: void pauseVideo()
com.cloudwebrtc.webrtc.utils.ObjectType: com.cloudwebrtc.webrtc.utils.ObjectType[] $values()
org.webrtc.Camera2Helper: org.webrtc.Size findClosestCaptureFormat(android.hardware.camera2.CameraManager,java.lang.String,int,int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStop(androidx.lifecycle.LifecycleOwner)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$release$2()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: SurfaceTextureRenderer(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onImage(android.media.ImageReader,android.media.Image)
org.webrtc.VideoFileRenderer: void lambda$renderFrameOnRenderThread$1(org.webrtc.VideoFrame$I420Buffer,org.webrtc.VideoFrame)
org.webrtc.audio.WebRtcAudioRecord: void setMicrophoneMute(boolean)
org.webrtc.Camera1Session: int getFrameOrientation()
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int frameSize(int,int,int)
org.webrtc.EglBase14Impl$EglConnection: void lambda$new$0()
io.flutter.view.TextureRegistry$ImageTextureEntry: long id()
org.webrtc.PeerConnection$Observer: void onAddStream(org.webrtc.MediaStream)
org.webrtc.CapturerObserver: void onCapturerStopped()
org.webrtc.GlShader: void release()
com.google.firebase.iid.FirebaseInstanceIdReceiver: FirebaseInstanceIdReceiver()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onRemoveTrack(org.webrtc.RtpReceiver)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.EglBase$Context)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverGetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.utils.EglUtils: org.webrtc.EglBase$Context getRootEglBaseContext()
org.webrtc.EglRenderer: void logE(java.lang.String,java.lang.Throwable)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: double getDouble(int)
org.webrtc.TextureBufferImpl: int getUnscaledWidth()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLedDetails(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
org.webrtc.CameraEnumerationAndroid: org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange getClosestSupportedFramerateRange(java.util.List,int)
org.webrtc.audio.WebRtcAudioTrack: void reportWebRtcAudioTrackInitError(java.lang.String)
org.webrtc.CameraCapturer$4: void onCameraOpening(java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
androidx.core.location.LocationCompat$Api26Impl: void setVerticalAccuracyMeters(android.location.Location,float)
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag valueOf(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setInputSampleRate(int)
org.webrtc.VideoEncoder$-CC: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] $default$getResolutionBitrateLimits(org.webrtc.VideoEncoder)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkMonitorAutoDetect$NetworkState getCurrentNetworkState()
androidx.browser.customtabs.CustomTabsIntent$Api24Impl: java.lang.String getDefaultLocale()
org.webrtc.SimulcastVideoEncoderFactory: SimulcastVideoEncoderFactory(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents valueOf(java.lang.String)
org.webrtc.TimestampAligner: void nativeReleaseTimestampAligner(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean sendNotificationPayloadMessage(android.content.Intent)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraDisconnected()
org.webrtc.MediaCodecVideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] values()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String)
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationAppLaunchDetails(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraEnumerator: boolean isFrontFacing(java.lang.String)
org.webrtc.NetworkChangeDetector$Observer: NetworkChangeDetector$Observer()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void reStartCamera(com.cloudwebrtc.webrtc.GetUserMediaImpl$IsCameraEnabled)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
org.webrtc.RtpParameters$Codec: int getPayloadType()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.Network)
org.webrtc.DataChannel: long bufferedAmount()
org.webrtc.EglRenderer: void swapBuffersOnRenderThread(org.webrtc.VideoFrame,long)
com.cloudwebrtc.webrtc.GetUserMediaImpl$3: GetUserMediaImpl$3(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: boolean lambda$registerWith$0(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.view.FlutterNativeView)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorDispose(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglRenderer: void removeFrameListener(org.webrtc.EglRenderer$FrameListener)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: void flush()
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onLost(android.net.Network)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
org.webrtc.CameraCapturer: CameraCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,org.webrtc.CameraEnumerator)
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities nativeGetRtpReceiverCapabilities(long,org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.AudioTrackSink: void onData(java.nio.ByteBuffer,int,int,int,int,long)
org.webrtc.AudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
org.webrtc.ThreadUtils$ThreadChecker: void detachThread()
org.webrtc.MediaCodecVideoDecoderFactory: boolean isCodecAllowed(android.media.MediaCodecInfo)
org.webrtc.SessionDescription$Type: java.lang.String canonicalForm()
org.webrtc.VideoCodecStatus: int getNumber()
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Action$Builder setAuthenticationRequired(android.app.Notification$Action$Builder,boolean)
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOp(android.app.AppOpsManager,java.lang.String,java.lang.String)
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
org.webrtc.Logging: void enableLogToDebugOutput(org.webrtc.Logging$Severity)
com.google.crypto.tink.proto.OutputPrefixType: com.google.crypto.tink.proto.OutputPrefixType[] values()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: java.lang.String getString(int)
org.webrtc.FrameDecryptor: long getNativeFrameDecryptor()
org.webrtc.RtpTransceiver: org.webrtc.MediaStreamTrack$MediaType nativeGetMediaType(long)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: int access$600(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.AudioTrack: AudioTrack(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getTransceivers(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
org.webrtc.GlShader: GlShader(java.lang.String,java.lang.String)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer)
org.webrtc.RendererCommon: float convertScalingTypeToVisibleFraction(org.webrtc.RendererCommon$ScalingType)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void pruneImageReaderQueue()
org.webrtc.VideoCapturer: void changeCaptureFormat(int,int,int)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
org.webrtc.LibvpxVp8Encoder: long createNative(long)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String audioSourceToString(int)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getAudioFormat()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String modeToString(int)
org.webrtc.NV21Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)
androidx.core.os.ConfigurationCompat$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)
org.webrtc.DataChannel: void nativeUnregisterObserver(long)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState[] values()
org.webrtc.TextureBufferImpl: int getTextureId()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onPause(androidx.lifecycle.LifecycleOwner)
com.it_nomads.fluttersecurestorage.ciphers.KeyCipherAlgorithm: com.it_nomads.fluttersecurestorage.ciphers.KeyCipherAlgorithm valueOf(java.lang.String)
org.webrtc.MediaCodecWrapper: android.media.MediaFormat getInputFormat()
org.webrtc.JavaI420Buffer: java.nio.ByteBuffer getDataU()
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void reset(int)
org.webrtc.ExternalAudioProcessingFactory: void nativeDestroy()
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle createMessagingStyle(java.lang.CharSequence)
org.webrtc.Metrics: void nativeEnable()
com.twilio.audioswitch.AbstractAudioSwitch$State: com.twilio.audioswitch.AbstractAudioSwitch$State valueOf(java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerPlugin: ImagePickerPlugin()
org.webrtc.CameraCapturer$2: CameraCapturer$2(org.webrtc.CameraCapturer)
org.webrtc.SoftwareVideoEncoderFactory$1: boolean isHardwareEncoder()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.MediaStream: boolean nativeAddAudioTrackToNativeStream(long,long)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
org.webrtc.CameraCapturer$5: CameraCapturer$5(org.webrtc.CameraCapturer)
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$or(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.ThreadUtils: void executeUninterruptibly(org.webrtc.ThreadUtils$BlockingOperation)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: MediaRecorderImpl(java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor)
org.webrtc.RtpSender: void dispose()
org.webrtc.Camera1Helper: org.webrtc.Size findClosestCaptureFormat(int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map transceiverToMap(java.lang.String,org.webrtc.RtpTransceiver)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setPassword(java.lang.String)
androidx.core.app.NotificationManagerCompat$Api26Impl: java.lang.String getId(android.app.NotificationChannel)
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies createPeerConnectionDependencies()
org.webrtc.EglBase14$Context: android.opengl.EGLContext getRawContext()
com.cloudwebrtc.webrtc.GetUserMediaImpl$4: void onReceiveResult(int,android.os.Bundle)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
org.webrtc.CameraCapturer: void createSessionInternal(int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void stopCapture()
com.cloudwebrtc.webrtc.GetUserMediaImpl$VideoCapturerInfo: GetUserMediaImpl$VideoCapturerInfo()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: WebRtcAudioRecord$AudioRecordThread(org.webrtc.audio.WebRtcAudioRecord,java.lang.String)
org.webrtc.PeerConnection$Observer: void onRemoveTrack(org.webrtc.RtpReceiver)
org.webrtc.PeerConnection$Observer: void onSignalingChange(org.webrtc.PeerConnection$SignalingState)
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
org.webrtc.VideoEncoder: java.lang.String getImplementationName()
org.webrtc.PeerConnection$Observer: void onIceCandidatesRemoved(org.webrtc.IceCandidate[])
org.webrtc.VideoTrack: void nativeAddSink(long,long)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void surfaceDestroyed()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback)
org.webrtc.EglBase: void detachCurrent()
org.webrtc.WebRtcClassLoader: java.lang.Object getClassLoader()
org.webrtc.audio.JavaAudioDeviceModule: void setMicrophoneMute(boolean)
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType[] values()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType valueOf(java.lang.String)
org.webrtc.VideoCapturer: void stopCapture()
org.webrtc.ScreenCapturerAndroid: void checkNotDisposed()
org.webrtc.LibaomAv1Encoder: long nativeCreate(long)
org.webrtc.HardwareVideoEncoder: void fillInputBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap capabilitiestoMap(org.webrtc.RtpCapabilities)
org.webrtc.Logging: void nativeLog(int,java.lang.String,java.lang.String)
org.webrtc.audio.WebRtcAudioManager: int getSampleRateForApiLevel(android.media.AudioManager)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioTrack: void logBufferCapacityInFrames()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioStreamType(java.lang.String)
org.webrtc.JavaI420Buffer: int getStrideY()
org.webrtc.RtpReceiver: void nativeSetFrameDecryptor(long,long)
androidx.core.location.LocationManagerCompat$Api19Impl: boolean tryRequestLocationUpdates(android.location.LocationManager,java.lang.String,androidx.core.location.LocationRequestCompat,androidx.core.location.LocationListenerCompat,android.os.Looper)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setEnableVolumeLogger(boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void mediaStreamTrackRelease(java.lang.String,java.lang.String)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getUserVideo(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.MediaStream)
org.webrtc.NetworkMonitor: void nativeNotifyOfNetworkConnect(long,org.webrtc.NetworkChangeDetector$NetworkInformation)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void listenRendererEvents()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPaused(android.app.Activity)
org.webrtc.CameraEnumerator: java.lang.String[] getDeviceNames()
org.webrtc.EglBase$-CC: org.webrtc.EglBase14 createEgl14(org.webrtc.EglBase14$Context,int[])
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: MethodCallHandlerImpl$4(com.cloudwebrtc.webrtc.MethodCallHandlerImpl,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.ActivityCompat$Api31Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
org.webrtc.video.CustomVideoDecoderFactory: void setForceSWCodecList(java.util.List)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannel(android.app.NotificationManager,android.app.NotificationChannel)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.webrtc.CandidatePairChangeEvent: CandidatePairChangeEvent(org.webrtc.IceCandidate,org.webrtc.IceCandidate,int,java.lang.String,int)
org.webrtc.RtpReceiver: long nativeSetObserver(long,org.webrtc.RtpReceiver$Observer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void stopForegroundService(io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpTransceiver: java.lang.String getMid()
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map candidateToMap(org.webrtc.IceCandidate)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelClose(java.lang.String)
org.webrtc.ThreadUtils$1: ThreadUtils$1(java.lang.Thread)
org.webrtc.audio.WebRtcAudioManager: int getLowLatencyFramesPerBuffer(android.media.AudioManager)
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: BigPictureStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Boolean)
org.webrtc.audio.WebRtcAudioUtils: void logDeviceInfo(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordStateCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioMode(java.lang.String)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$100(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay access$200(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoOutput(boolean)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event[] values()
com.google.crypto.tink.shaded.protobuf.WireFormat$JavaType: com.google.crypto.tink.shaded.protobuf.WireFormat$JavaType[] values()
org.webrtc.SurfaceTextureHelper: void lambda$forceFrame$3()
org.webrtc.SurfaceTextureHelper: void setFrameRotation(int)
org.webrtc.audio.JavaAudioDeviceModule$Builder: JavaAudioDeviceModule$Builder(android.content.Context)
org.webrtc.NetworkMonitor: int getNumObservers()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void release()
org.webrtc.FrameCryptorFactory: org.webrtc.FrameCryptor createFrameCryptorForRtpSender(org.webrtc.PeerConnectionFactory,org.webrtc.RtpSender,java.lang.String,org.webrtc.FrameCryptorAlgorithm,org.webrtc.FrameCryptorKeyProvider)
com.cloudwebrtc.webrtc.record.AudioChannel: AudioChannel(java.lang.String,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType valueOf(java.lang.String)
org.webrtc.MediaStreamTrack$State: MediaStreamTrack$State(java.lang.String,int)
org.webrtc.EglThread: void scheduleRenderUpdate(org.webrtc.EglThread$RenderUpdate)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
org.webrtc.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
org.webrtc.PeerConnection$RtcpMuxPolicy: org.webrtc.PeerConnection$RtcpMuxPolicy valueOf(java.lang.String)
org.webrtc.EglBase10Impl: org.webrtc.EglBase$Context getEglBaseContext()
org.webrtc.audio.WebRtcAudioRecord: boolean isAudioSourceMatchingRecordingSession()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder createBuilder(android.content.Context,java.lang.String)
org.webrtc.PeerConnectionFactory: long nativeCreateLocalMediaStream(long,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
org.webrtc.Predicate$1: Predicate$1(org.webrtc.Predicate,org.webrtc.Predicate)
org.webrtc.PeerConnection: java.util.List getReceivers()
org.webrtc.CameraEnumerationAndroid$1: int diff(org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String,java.lang.String,org.webrtc.PeerConnection$AdapterType)
org.webrtc.NativeLibrary$DefaultLoader: boolean load(java.lang.String)
org.webrtc.H264Utils: boolean isSameH264Profile(java.util.Map,java.util.Map)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setFocusMode(java.lang.String)
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters nativeAdaptFrame(long,int,int,int,long)
org.webrtc.DefaultVideoEncoderFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.CameraCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityDestroyed(android.app.Activity)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushString(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: void onCameraSwitchDone(boolean)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
org.webrtc.NativeAndroidVideoTrackSource: void setState(boolean)
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException: GetUserMediaImpl$NoSuchFieldWithNameException(com.cloudwebrtc.webrtc.GetUserMediaImpl,java.lang.String,java.lang.String,java.lang.NoSuchFieldException)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
org.webrtc.FrameCryptorKeyProvider: byte[] exportKey(java.lang.String,int)
org.webrtc.DtmfSender: void checkDtmfSenderExists()
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: PermissionUtils$RequestPermissionsFragment()
org.webrtc.BaseBitrateAdjuster: void reportEncodedFrame(int)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] $values()
org.webrtc.audio.WebRtcAudioTrack: void releaseAudioResources()
org.webrtc.audio.WebRtcAudioRecord: android.media.AudioRecord createAudioRecordOnMOrHigher(int,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeShouldDisableAHB()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpTransceiverStop(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.DefaultVideoDecoderFactory: DefaultVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void rtpSenderSetParameters(java.lang.String,java.lang.String,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder createBuilder(int,java.lang.CharSequence,android.app.PendingIntent)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setForceHandleAudioRouting(java.lang.Boolean)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
org.webrtc.RtpReceiver: org.webrtc.RtpParameters getParameters()
org.webrtc.EncodedImage: void retain()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
androidx.exifinterface.media.ExifInterfaceUtils$Api23Impl: void setDataSource(android.media.MediaMetadataRetriever,android.media.MediaDataSource)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
com.google.firebase.iid.FirebaseInstanceId: com.google.firebase.iid.FirebaseInstanceId getInstance(com.google.firebase.FirebaseApp)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
org.webrtc.NetworkMonitorAutoDetect: void setWifiManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getNumTemporalLayers()
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void renderFrameOnRenderThread(org.webrtc.VideoFrame)
org.webrtc.SurfaceEglRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread: WebRtcAudioTrack$AudioTrackThread(org.webrtc.audio.WebRtcAudioTrack,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onActivityResult(int,int,android.content.Intent)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioGroupId(android.media.AudioDeviceInfo)
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
org.webrtc.RtpTransceiver: org.webrtc.RtpSender getSender()
org.webrtc.FrameCryptorKeyProvider: void checkKeyProviderExists()
org.webrtc.JavaI420Buffer: org.webrtc.JavaI420Buffer allocate(int,int)
org.webrtc.NetworkMonitor: void updateObserverActiveNetworkList(long)
org.webrtc.CameraSession$CreateSessionCallback: void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String)
org.webrtc.PeerConnectionFactory: void printStackTrace(org.webrtc.PeerConnectionFactory$ThreadInfo,boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readPlatformSpecifics(java.util.Map,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.plugins.imagepicker.ImagePickerFileProvider: ImagePickerFileProvider()
org.webrtc.CameraCapturer$6: void run()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioSource(int)
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] $values()
org.webrtc.AudioProcessingFactory: long createNative()
org.webrtc.EncodedImage: void release()
org.webrtc.Camera2Capturer: void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDeviceModule(org.webrtc.audio.AudioDeviceModule)
com.google.firebase.messaging.FirebaseMessagingRegistrar: FirebaseMessagingRegistrar()
org.webrtc.TextureBufferImpl: int getWidth()
org.webrtc.ThreadUtils$ThreadChecker: void checkIsOnValidThread()
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void initialize(int,int)
com.it_nomads.fluttersecurestorage.FlutterSecureStoragePlugin: FlutterSecureStoragePlugin()
org.webrtc.SurfaceTextureHelper: void tryDeliverTextureFrame()
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType[] values()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getStunCandidateKeepaliveInterval()
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.WrappedNativeI420Buffer: org.webrtc.VideoFrame$I420Buffer toI420()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getIceUnwritableTimeout()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: boolean isNull(int)
org.webrtc.Camera2Session$SessionState: Camera2Session$SessionState(java.lang.String,int)
org.webrtc.MediaStreamTrack: java.lang.String id()
org.webrtc.audio.WebRtcAudioRecord: void scheduleLogRecordingConfigurationsTask(android.media.AudioRecord)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setAudioDecoderFactoryFactory(org.webrtc.AudioDecoderFactoryFactory)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode valueOf(java.lang.String)
org.webrtc.SurfaceTextureHelper$2: void onRelease(org.webrtc.TextureBufferImpl)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: JavaAudioDeviceModule$AudioSamples(int,int,int,byte[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
org.webrtc.DataChannel: java.lang.String nativeLabel()
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: void startRecording(java.io.File)
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding valueOf(java.lang.String)
org.webrtc.EncodedImage: EncodedImage(java.nio.ByteBuffer,java.lang.Runnable,int,int,long,org.webrtc.EncodedImage$FrameType,int,java.lang.Integer)
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.media.projection.MediaProjection$Callback access$400(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer)
org.webrtc.VideoSource: void adaptOutputFormat(int,int,int,int,int)
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioFormat(int)
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason valueOf(java.lang.String)
org.webrtc.FrameCryptorFactory: FrameCryptorFactory()
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters adaptFrame(org.webrtc.VideoFrame)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.models.NotificationDetails extractNotificationDetails(io.flutter.plugin.common.MethodChannel$Result,java.util.Map)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioAttributesUsageType(java.lang.String)
org.webrtc.GlGenericDrawer: org.webrtc.GlShader createShader(org.webrtc.GlGenericDrawer$ShaderType)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsCertPolicy(org.webrtc.PeerConnection$TlsCertPolicy)
org.webrtc.IceCandidate: IceCandidate(java.lang.String,int,java.lang.String)
org.webrtc.MediaSource: org.webrtc.MediaSource$State state()
org.webrtc.Camera2Capturer: void printStackTrace()
org.webrtc.Logging: void log(org.webrtc.Logging$Severity,java.lang.String,java.lang.String)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverGetCurrentDirection(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection: boolean setConfiguration(org.webrtc.PeerConnection$RTCConfiguration)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes getAudioAttributes(android.media.AudioAttributes)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)
org.webrtc.Camera2Session: void findCaptureFormat()
org.webrtc.ScreenCapturerAndroid: void updateVirtualDisplay()
org.webrtc.VideoFrameDrawer: org.webrtc.VideoFrame$Buffer prepareBufferForViewportSize(org.webrtc.VideoFrame$Buffer,int,int)
org.webrtc.VideoProcessor: void onFrameCaptured(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters)
org.webrtc.VideoFrame$TextureBuffer: int getUnscaledHeight()
org.webrtc.Camera2Session: void checkIsOnCameraThread()
org.webrtc.audio.JavaAudioDeviceModule: void setPreferredInputDevice(android.media.AudioDeviceInfo)
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType)
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: void onReceiveResult(int,android.os.Bundle)
org.webrtc.RTCStats: java.lang.String toString()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onSetFailure(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelAllNotifications(io.flutter.plugin.common.MethodChannel$Result)
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
org.webrtc.RtpParameters: java.lang.String getTransactionId()
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getChannelCount()
org.webrtc.Size: boolean equals(java.lang.Object)
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy[] values()
org.webrtc.PlatformSoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLContext getContext()
org.webrtc.DataChannel: DataChannel(long)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
org.webrtc.PeerConnection$IceServer: PeerConnection$IceServer(java.lang.String,java.lang.String,java.lang.String)
org.webrtc.YuvHelper: void nativeCopyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotifications(android.content.Context,java.util.ArrayList)
org.webrtc.EglBase: int surfaceWidth()
androidx.core.app.NotificationCompat$BigPictureStyle$Api23Impl: void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
org.webrtc.EglBase14Impl: void swapBuffers(long)
org.webrtc.SurfaceViewRenderer: void logD(java.lang.String)
androidx.security.crypto.EncryptedSharedPreferences$PrefKeyEncryptionScheme: androidx.security.crypto.EncryptedSharedPreferences$PrefKeyEncryptionScheme[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
org.webrtc.ScreenCapturerAndroid: boolean isScreencast()
com.cloudwebrtc.webrtc.utils.MediaConstraintsUtils: MediaConstraintsUtils()
org.webrtc.MediaStream: long getNativeMediaStream()
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getNetworkType()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setPlaybackSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void requestCapturePermission(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map rtpParametersToMap(org.webrtc.RtpParameters)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect$NetworkState: int getUnderlyingNetworkSubtypeForVpn()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: boolean handleMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.video.CustomVideoDecoderFactory: void setForceSWCodec(boolean)
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackBeforeOreo(int,int,int,android.media.AudioAttributes)
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: PeerConnectionObserver(org.webrtc.PeerConnection$RTCConfiguration,com.cloudwebrtc.webrtc.StateProvider,io.flutter.plugin.common.BinaryMessenger,java.lang.String)
com.cloudwebrtc.webrtc.StateProvider: io.flutter.plugin.common.BinaryMessenger getMessenger()
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
org.webrtc.audio.VolumeLogger: void stop()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void onWifiP2pStateChange(int)
org.webrtc.LibaomAv1Encoder: java.util.List scalabilityModes()
org.webrtc.SurfaceTextureHelper$3: SurfaceTextureHelper$3(org.webrtc.SurfaceTextureHelper)
com.google.firebase.datatransport.TransportRegistrar: TransportRegistrar()
org.webrtc.YuvHelper: YuvHelper()
org.webrtc.FrameCryptor: void checkFrameCryptorExists()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getConnectionType(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
org.webrtc.AndroidVideoDecoder: void releaseCodecOnOutputThread()
org.webrtc.PeerConnectionFactory$Builder: PeerConnectionFactory$Builder()
org.webrtc.LibvpxVp9Decoder: boolean nativeIsSupported()
org.webrtc.CameraVideoCapturer$-CC: void $default$removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
org.webrtc.PeerConnection: org.webrtc.SessionDescription getLocalDescription()
org.webrtc.CameraSession$FailureType: org.webrtc.CameraSession$FailureType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.RepeatInterval: com.dexterous.flutterlocalnotifications.models.RepeatInterval[] values()
org.webrtc.RtpCapabilities$CodecCapability: int getPreferredPayloadType()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void handleStatsReport(org.webrtc.RTCStatsReport,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void showNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: androidx.window.extensions.area.ExtensionWindowAreaPresentation getRearDisplayPresentation()
org.webrtc.HardwareVideoEncoder: void requestKeyFrame(long)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: void onFrameCryptionStateChanged(java.lang.String,org.webrtc.FrameCryptor$FrameCryptionState)
androidx.window.extensions.core.util.function.Function: java.lang.Object apply(java.lang.Object)
org.webrtc.Camera2Capturer: void dispose()
androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])
org.webrtc.RefCountDelegate: RefCountDelegate(java.lang.Runnable)
org.webrtc.VideoTrack: void removeSink(org.webrtc.VideoSink)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextRepeatingNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
org.webrtc.Loggable: void onLogMessage(java.lang.String,org.webrtc.Logging$Severity,java.lang.String)
org.webrtc.RtpTransceiver: void setCodecPreferences(java.util.List)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)
org.webrtc.MediaSource: void lambda$new$0(long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String peerConnectionInit(com.cloudwebrtc.webrtc.utils.ConstraintsMap,com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
org.webrtc.EglBase10Impl$Context: EglBase10Impl$Context(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLConfig)
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
org.webrtc.Metrics: org.webrtc.Metrics getAndReset()
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState[] values()
org.webrtc.Camera1Session: Camera1Session(org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,int,android.hardware.Camera,android.hardware.Camera$CameraInfo,org.webrtc.CameraEnumerationAndroid$CaptureFormat,long)
org.webrtc.PeerConnectionFactory: boolean nativeStartAecDump(long,int,int)
org.webrtc.VideoEncoder: long createNative(long)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: UrlLauncherPlugin()
org.webrtc.CameraCapturer$3: void run()
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy valueOf(java.lang.String)
org.webrtc.MediaStream: java.lang.String getId()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$4: void onCreateSuccess(org.webrtc.SessionDescription)
com.dexterous.flutterlocalnotifications.models.Time: com.dexterous.flutterlocalnotifications.models.Time from(java.util.Map)
org.webrtc.PeerConnection$Observer$-CC: void $default$onConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$PeerConnectionState)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
androidx.core.location.LocationCompat$Api26Impl: void removeBearingAccuracy(android.location.Location)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$RtcpMuxPolicy getRtcpMuxPolicy()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void success(java.lang.Object)
androidx.core.location.LocationCompat$Api26Impl: void removeSpeedAccuracy(android.location.Location)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxBitrateBps()
org.webrtc.PeerConnection$RTCConfiguration: boolean getPruneTurnPorts()
org.webrtc.SurfaceViewRenderer: void onMeasure(int,int)
org.webrtc.FrameCryptor: boolean nativeIsEnabled(long)
org.webrtc.MediaCodecUtils: boolean codecSupportsType(android.media.MediaCodecInfo,org.webrtc.VideoCodecMimeType)
org.webrtc.PeerConnection: void nativeFreeOwnedPeerConnection(long)
org.webrtc.Camera2Capturer: void stopCapture()
com.cloudwebrtc.webrtc.utils.AnyThreadResult: void lambda$success$0(java.lang.Object)
org.webrtc.YuvConverter: YuvConverter()
org.webrtc.NetworkMonitor: boolean isOnline()
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setEnableInternalTracer(boolean)
org.webrtc.MediaCodecWrapper: int dequeueInputBuffer(long)
org.webrtc.VideoFrame$TextureBuffer$-CC: int $default$getUnscaledWidth(org.webrtc.VideoFrame$TextureBuffer)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigTextStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.core.graphics.drawable.IconCompat: IconCompat()
org.webrtc.CameraCapturer: void printStackTrace()
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void markDirty()
org.webrtc.GlRectDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
androidx.core.view.ViewCompat$Api28Impl: void setAutofillId(android.view.View,androidx.core.view.autofill.AutofillIdCompat)
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: boolean startRecording()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider: FlutterFirebaseMessagingInitProvider()
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] values()
org.webrtc.NetworkChangeDetector$Observer: java.lang.String getFieldTrialsString()
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
org.webrtc.VideoEncoderWrapper: void lambda$createEncoderCallback$0(long,org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo)
org.webrtc.TextureBufferImpl: android.graphics.Matrix getTransformMatrix()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $values()
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkChangeDetector$IPAddress[] getIPAddresses(android.net.LinkProperties)
org.webrtc.DataChannel: boolean send(org.webrtc.DataChannel$Buffer)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
org.webrtc.NetworkChangeDetector$IPAddress: byte[] getAddress()
org.webrtc.NetworkMonitorAutoDetect: void onReceive(android.content.Context,android.content.Intent)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void onCancel(java.lang.Object)
org.webrtc.MediaStreamTrack$MediaType: MediaStreamTrack$MediaType(java.lang.String,int,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release$lambda$1(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeMs(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
org.webrtc.EglBase: void swapBuffers()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String channelMaskToString(int)
org.webrtc.PeerConnection$IceTransportsType: PeerConnection$IceTransportsType(java.lang.String,int)
androidx.core.app.NotificationCompat$Style$Api24Impl: void setChronometerCountDown(android.widget.RemoteViews,int,boolean)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus releaseInternal()
org.webrtc.EglBase14Impl: EglBase14Impl(android.opengl.EGLContext,int[])
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceCandidate(org.webrtc.IceCandidate)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
org.webrtc.PeerConnectionFactory: boolean nativeStartInternalTracingCapture(java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void removeVideoCapturer(java.lang.String)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void removeRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.GlUtil: java.nio.FloatBuffer createFloatBuffer(float[])
org.webrtc.Camera2Session: void openCamera()
org.webrtc.BuiltinAudioEncoderFactoryFactory: BuiltinAudioEncoderFactoryFactory()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
org.webrtc.RenderSynchronizer: void lambda$new$0()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: ConstraintsArray()
org.webrtc.VideoTrack: boolean nativeGetShouldReceive(long)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus release()
org.webrtc.DataChannel: void nativeClose()
org.webrtc.CryptoOptions: org.webrtc.CryptoOptions$SFrame getSFrame()
org.webrtc.CameraSession$FailureType: CameraSession$FailureType(java.lang.String,int)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus release()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.view.Surface getSurface()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl(android.media.MediaCodec)
org.webrtc.EncodedImage: java.nio.ByteBuffer getBuffer()
androidx.core.view.WindowInsetsCompat$Impl: boolean equals(java.lang.Object)
org.webrtc.NetworkChangeDetector$NetworkInformation: org.webrtc.NetworkChangeDetector$IPAddress[] getIpAddresses()
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$302(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,boolean)
org.webrtc.Camera1Session: void stopInternal()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
org.webrtc.NetworkMonitor$NetworkObserver: void onConnectionTypeChanged(org.webrtc.NetworkChangeDetector$ConnectionType)
org.webrtc.VideoCapturer: void startCapture(int,int,int)
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy valueOf(java.lang.String)
org.webrtc.Camera2Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.WrappedNativeVideoEncoder: boolean isHardwareEncoder()
org.webrtc.CameraCapturer$1: void onDone(org.webrtc.CameraSession)
org.webrtc.VideoEncoderWrapper: java.lang.Integer getScalingSettingsHigh(org.webrtc.VideoEncoder$ScalingSettings)
org.webrtc.VideoDecoder$Callback: void onDecodedFrame(org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype valueOf(java.lang.String)
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setHostname(java.lang.String)
org.webrtc.MediaCodecVideoDecoderFactory: MediaCodecVideoDecoderFactory(org.webrtc.EglBase$Context,org.webrtc.Predicate)
org.webrtc.EglThread: android.os.Handler getHandler()
org.webrtc.SoftwareVideoDecoderFactory: java.util.List nativeGetSupportedCodecs(long)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoInput(boolean)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$2: void run()
org.webrtc.WrappedNativeI420Buffer: int getWidth()
androidx.core.app.NotificationManagerCompat$Api24Impl: int getImportance(android.app.NotificationManager)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.NetworkInfo)
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor: void release()
org.webrtc.NativeAndroidVideoTrackSource: org.webrtc.VideoProcessor$FrameAdaptationParameters createFrameAdaptationParameters(int,int,int,int,int,int,long,boolean)
org.webrtc.NetworkChangeDetector$IPAddress: NetworkChangeDetector$IPAddress(byte[])
org.webrtc.PeerConnection: void nativeNewGetStatsSender(long,org.webrtc.RTCStatsCollectorCallback)
org.webrtc.ExternalAudioProcessingFactory: void destroy()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String deviceTypeToString(int)
org.webrtc.WrappedNativeVideoDecoder: WrappedNativeVideoDecoder()
org.webrtc.EglBase10$EglConnection: javax.microedition.khronos.egl.EGLDisplay getDisplay()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Camera2Session: void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
org.webrtc.EglBase10Impl: javax.microedition.khronos.egl.EGLConfig getEglConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[])
org.webrtc.VideoCodecInfo: java.util.List getScalabilityModes()
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
org.webrtc.RtpTransceiver: java.lang.String nativeGetMid(long)
org.webrtc.video.CustomVideoEncoderFactory: CustomVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)
org.webrtc.RendererCommon: android.graphics.Point getDisplaySize(float,float,int,int)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.SessionDescription: SessionDescription(org.webrtc.SessionDescription$Type,java.lang.String)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: ConstraintsMap()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioTrack createAudioTrackOnOreoOrHigher(int,int,int,android.media.AudioAttributes)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: OutputAudioSamplesInterceptor(org.webrtc.audio.JavaAudioDeviceModule)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
androidx.core.view.WindowInsetsCompat$Impl20: boolean isRound()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status valueOf(java.lang.String)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setFecControllerFactoryFactoryInterface(org.webrtc.FecControllerFactoryFactoryInterface)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void success(java.lang.Object)
com.google.crypto.tink.shaded.protobuf.Writer$FieldOrder: com.google.crypto.tink.shaded.protobuf.Writer$FieldOrder[] values()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setOptions(org.webrtc.PeerConnectionFactory$Options)
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor: void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback)
com.cloudwebrtc.webrtc.StateProvider: android.app.Activity getActivity()
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
org.webrtc.PeerConnection: boolean nativeSetBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer)
org.webrtc.PeerConnectionFactory: long nativeCreateVideoSource(long,boolean,boolean)
org.webrtc.RtpSender: org.webrtc.MediaStreamTrack track()
org.webrtc.audio.WebRtcAudioTrack: int initPlayout(int,int,double)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper: SimulcastVideoEncoderFactoryWrapper(org.webrtc.EglBase$Context,boolean,boolean)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraFreezed(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.text.Spanned fromHtml(java.lang.String)
org.webrtc.YuvConverter: void release()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onFirstFrameAvailable()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLargeIconInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.VideoSource$1: void onCapturerStopped()
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode[] values()
androidx.core.location.LocationCompat$Api26Impl: float getBearingAccuracyDegrees(android.location.Location)
org.webrtc.Histogram: void nativeAddSample(long,int)
org.webrtc.SessionDescription$Type: org.webrtc.SessionDescription$Type fromCanonicalForm(java.lang.String)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionCreateAnswer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraCapturer$4: CameraCapturer$4(org.webrtc.CameraCapturer)
org.webrtc.JniHelper: JniHelper()
org.webrtc.EglRenderer: void resetStatistics(long)
com.cloudwebrtc.webrtc.GetUserMediaImpl: com.cloudwebrtc.webrtc.utils.ConstraintsMap getUserAudio(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.MediaStream)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List)
org.webrtc.audio.WebRtcAudioTrack: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
org.webrtc.PeerConnection$KeyType: PeerConnection$KeyType(java.lang.String,int)
org.webrtc.DataChannel: int id()
androidx.core.location.LocationCompat$Api26Impl: void setBearingAccuracyDegrees(android.location.Location,float)
org.webrtc.CameraCapturer$1: CameraCapturer$1(org.webrtc.CameraCapturer)
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
org.webrtc.VideoFrame$TextureBuffer: android.graphics.Matrix getTransformMatrix()
androidx.core.app.NotificationCompat$CallStyle$Api21Impl: android.app.Notification$Builder setCategory(android.app.Notification$Builder,java.lang.String)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void switchCamera(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterView: void setVisibility(int)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
org.webrtc.PeerConnectionFactory: long getNativePeerConnectionFactory()
org.webrtc.CameraEnumerationAndroid$1: int progressivePenalty(int,int,int,int)
org.webrtc.FrameCryptorKeyProvider: boolean nativeSetKey(long,java.lang.String,int,byte[])
org.webrtc.Camera1Session: void checkIsOnCameraThread()
org.webrtc.Camera2Session$CameraStateCallback: void onError(android.hardware.camera2.CameraDevice,int)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void Dispose()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
org.webrtc.RtpParameters: java.util.List getEncodings()
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType[] values()
org.webrtc.PeerConnection$KeyType: org.webrtc.PeerConnection$KeyType[] values()
org.webrtc.Histogram: long nativeCreateEnumeration(java.lang.String,int)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderExportSharedKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.audio.JavaAudioDeviceModule$PlaybackSamplesReadyCallback: void onWebRtcAudioTrackSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(java.lang.String)
org.webrtc.NetworkMonitor: void assertIsTrue(boolean)
io.flutter.plugins.googlemaps.Messages$PlatformMapBitmapScaling: io.flutter.plugins.googlemaps.Messages$PlatformMapBitmapScaling valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage dequeueImage()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] values()
io.flutter.view.TextureRegistry$SurfaceProducer: void release()
org.webrtc.PeerConnection$RTCConfiguration: int getAudioJitterBufferMaxPackets()
org.webrtc.EglBase: void releaseSurface()
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel valueOf(java.lang.String)
org.webrtc.RtpTransceiver: void nativeStopInternal(long)
org.webrtc.VideoEncoder: boolean isHardwareEncoder()
org.webrtc.RtpSender: long nativeGetTrack(long)
org.webrtc.CameraEnumerationAndroid$1: CameraEnumerationAndroid$1(int)
org.webrtc.FecControllerFactoryFactoryInterface: long createNative()
org.webrtc.ExternalAudioProcessingFactory: void nativeSetBypassFlagForRenderPre(boolean)
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: FlutterFirebaseAppRegistrar()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void frameCryptorFactoryCreateFrameCryptor(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl20: boolean equals(java.lang.Object)
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
org.webrtc.NativeCapturerObserver: void onFrameCaptured(org.webrtc.VideoFrame)
org.webrtc.PeerConnection: void getStats(org.webrtc.RtpSender,org.webrtc.RTCStatsCollectorCallback)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void setAudioAttributesContentType(java.lang.String)
org.webrtc.Camera1Session: void listenForBytebufferFrames()
org.webrtc.GlShader: int compileShader(int,java.lang.String)
org.webrtc.TimestampAligner: long nativeCreateTimestampAligner()
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode: org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: float getScaledFontSize(float,int)
org.webrtc.PeerConnectionFactory$Options: boolean getDisableNetworkMonitor()
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void disableFpsReduction()
org.webrtc.SurfaceViewRenderer: void onFrame(org.webrtc.VideoFrame)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
org.webrtc.NetworkMonitor: void removeNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverInit mapToRtpTransceiverInit(java.util.Map)
org.webrtc.MediaCodecUtils: java.lang.Integer selectColorFormat(int[],android.media.MediaCodecInfo$CodecCapabilities)
org.webrtc.PeerConnection$IceConnectionState: org.webrtc.PeerConnection$IceConnectionState valueOf(java.lang.String)
org.webrtc.Camera1Enumerator: Camera1Enumerator(boolean)
org.webrtc.Camera1Enumerator: java.util.List enumerateFormats(int)
org.webrtc.PeerConnection$ContinualGatheringPolicy: PeerConnection$ContinualGatheringPolicy(java.lang.String,int)
org.webrtc.EglBase14Impl: void releaseSurface()
org.webrtc.PeerConnection: long nativeCreatePeerConnectionObserver(org.webrtc.PeerConnection$Observer)
org.webrtc.video.CustomVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)
org.webrtc.PeerConnection: boolean startRtcEventLog(int,int)
org.webrtc.Camera1Enumerator: int getCameraIndex(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: FlutterLocalNotificationsPlugin()
org.webrtc.FrameCryptor: FrameCryptor(long)
org.webrtc.FrameCryptorKeyProvider: byte[] exportSharedKey(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void reStartCamera()
org.webrtc.Camera1Session$2: void lambda$onPreviewFrame$0(byte[])
com.google.firebase.messaging.FirebaseMessaging: com.google.firebase.messaging.FirebaseMessaging getInstance(com.google.firebase.FirebaseApp)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setScheduler(java.util.concurrent.ScheduledExecutorService)
org.webrtc.RTCStatsReport: org.webrtc.RTCStatsReport create(long,java.util.Map)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] values()
org.webrtc.WrappedNativeVideoEncoder: long createNative(long)
org.webrtc.PeerConnectionFactory: void nativeInitializeAndroidGlobals()
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void showBigPictureWhenCollapsed(android.app.Notification$BigPictureStyle,boolean)
org.webrtc.FrameCryptorKeyProvider: void setSifTrailer(byte[])
org.webrtc.SoftwareVideoEncoderFactory: boolean nativeIsSupported(long,org.webrtc.VideoCodecInfo)
org.webrtc.CapturerObserver: void onCapturerStarted(boolean)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverStop(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.RtpTransceiver: boolean nativeStopped(long)
org.webrtc.NetworkMonitorAutoDetect: void connectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.ExternalAudioProcessingFactory$AudioProcessing: void process(int,int,java.nio.ByteBuffer)
org.webrtc.VideoSource: org.webrtc.CapturerObserver getCapturerObserver()
org.webrtc.RtpSender: RtpSender(long)
org.webrtc.VideoEncoderFactory$VideoEncoderSelector: org.webrtc.VideoCodecInfo onAvailableBitrate(int)
org.webrtc.VideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.RtpSender: java.lang.String nativeGetId(long)
org.webrtc.NativeCapturerObserver: void onCapturerStopped()
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void createVirtualDisplay()
com.dexterous.flutterlocalnotifications.models.ScheduleMode: com.dexterous.flutterlocalnotifications.models.ScheduleMode[] $values()
androidx.core.app.ActivityCompat$Api32Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
com.cloudwebrtc.webrtc.StateProvider: org.webrtc.PeerConnectionFactory getPeerConnectionFactory()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$502(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
com.google.crypto.tink.shaded.protobuf.FieldType: com.google.crypto.tink.shaded.protobuf.FieldType[] values()
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
org.webrtc.FrameCryptor$Observer: void onFrameCryptionStateChanged(java.lang.String,org.webrtc.FrameCryptor$FrameCryptionState)
org.webrtc.PeerConnection$SignalingState: org.webrtc.PeerConnection$SignalingState[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void startRecordingToFile(java.lang.String,java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioChannel)
org.webrtc.AndroidVideoDecoder: void deliverTextureFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer)
androidx.core.app.AlarmManagerCompat$Api23Impl: void setAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent)
org.webrtc.VideoFrame: int getRotatedWidth()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetRemoteDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EglBase14Impl$EglConnection: android.opengl.EGLDisplay getDisplay()
org.webrtc.SoftwareVideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderRatchetKey(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.CameraSession$Events: void onCameraClosed(org.webrtc.CameraSession)
org.webrtc.CallSessionFileRotatingLogSink: byte[] nativeGetLogData(java.lang.String)
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void getStatsForTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.ExternalAudioProcessingFactory: void setRenderPreProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStateCallback: void onWebRtcAudioTrackStop()
org.webrtc.PeerConnection$Observer: void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
org.webrtc.PeerConnectionFactory$Options: PeerConnectionFactory$Options()
org.webrtc.VideoFrame: void release()
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,android.media.AudioManager)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress: com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin$PermissionRequestProgress[] values()
org.webrtc.CameraEnumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionDispose(java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: boolean getEnableIceGatheringOnAnyAddressPorts()
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: java.util.List getComponents()
org.webrtc.YuvHelper: void nativeI420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: java.nio.ByteBuffer getInputBuffer(int)
org.webrtc.Camera1Session$SessionState: org.webrtc.Camera1Session$SessionState valueOf(java.lang.String)
org.webrtc.ApplicationContextProvider: android.content.Context getApplicationContext()
org.webrtc.VideoEncoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.Camera1Capturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
org.webrtc.RendererCommon$VideoLayoutMeasure: android.graphics.Point measure(int,int,int,int)
org.webrtc.MediaStream: boolean addPreservedTrack(org.webrtc.VideoTrack)
org.webrtc.SurfaceTextureHelper: void dispose()
org.webrtc.FrameCryptor: void nativeSetEnabled(long,boolean)
org.webrtc.AndroidVideoDecoder: org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback)
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoEncoder$EncoderInfo getEncoderInfo()
org.webrtc.WrappedNativeVideoDecoder: long createNative(long)
org.webrtc.CameraEnumerationAndroid$2: int diff(org.webrtc.Size)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void startForegroundService(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setEncodedWidth(int)
org.webrtc.PeerConnection$RTCConfiguration: boolean getOfferExtmapAllowMixed()
org.webrtc.PeerConnection: void nativeClose()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.AlarmManager getAlarmManager(android.content.Context)
org.webrtc.SurfaceTextureHelper: android.os.Handler getHandler()
org.webrtc.PeerConnection: boolean nativeOldGetStats(org.webrtc.StatsObserver,long)
com.cloudwebrtc.webrtc.DataChannelObserver: void onMessage(org.webrtc.DataChannel$Buffer)
org.webrtc.audio.VolumeLogger: VolumeLogger(android.media.AudioManager)
org.webrtc.EglBase10Impl$1FakeSurfaceHolder: EglBase10Impl$1FakeSurfaceHolder(org.webrtc.EglBase10Impl,android.view.Surface)
org.webrtc.WrappedNativeI420Buffer: int getStrideU()
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier valueOf(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[])
androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.MediaConstraints$KeyValuePair: java.lang.String getKey()
org.webrtc.PeerConnectionFactory: org.webrtc.AudioSource createAudioSource(org.webrtc.MediaConstraints)
androidx.core.app.ActivityCompat$Api31Impl: boolean isLaunchedFromBubble(android.app.Activity)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
org.webrtc.PeerConnection: org.webrtc.RtpSender nativeCreateSender(java.lang.String,java.lang.String)
org.webrtc.RtpParameters$Encoding: RtpParameters$Encoding(java.lang.String,boolean,java.lang.Double)
org.webrtc.SurfaceEglRenderer: SurfaceEglRenderer(java.lang.String)
org.webrtc.HardwareVideoEncoder: void releaseCodecOnOutputThread()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id()
org.webrtc.CameraCapturer$2: void onCameraOpening()
org.webrtc.MediaCodecWrapper: java.nio.ByteBuffer getInputBuffer(int)
org.webrtc.PeerConnection: org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack,java.util.List)
org.webrtc.ThreadUtils$1Result: ThreadUtils$1Result()
org.webrtc.VideoEncoder$BitrateAllocation: VideoEncoder$BitrateAllocation(int[][])
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
org.webrtc.VideoFrame$I420Buffer: int getBufferType()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.webrtc.Camera1Capturer: void changeCaptureFormat(int,int,int)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
androidx.core.app.RemoteInput$Api29Impl: int getEditChoicesBeforeSending(java.lang.Object)
androidx.browser.customtabs.CustomTabsIntent$Api34Impl: void setShareIdentityEnabled(android.app.ActivityOptions,boolean)
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
org.webrtc.ExternalAudioProcessingFactory: long nativeGetDefaultApm()
org.webrtc.TextureBufferImpl$2: void onRelease(org.webrtc.TextureBufferImpl)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples: int getSampleRate()
org.webrtc.PeerConnectionFactory: boolean startInternalTracingCapture(java.lang.String)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: SimulcastVideoEncoderFactoryWrapper$FallbackFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.VideoFrameDrawer: void calculateTransformedRenderSize(int,int,android.graphics.Matrix)
androidx.core.app.RemoteInput$Api26Impl: android.app.RemoteInput$Builder setAllowDataType(android.app.RemoteInput$Builder,java.lang.String,boolean)
com.cloudwebrtc.webrtc.record.MediaRecorderImpl: java.io.File getRecordFile()
org.webrtc.EglBase14$EglConnection: android.opengl.EGLConfig getConfig()
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.EglBase$Context,boolean,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson buildGson()
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform valueOf(java.lang.String)
org.webrtc.Camera1Enumerator: android.hardware.Camera$CameraInfo getCameraInfo(int)
org.webrtc.NetworkChangeDetector: void destroy()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroupSummary(android.app.Notification$Builder,boolean)
org.webrtc.CameraSession$Events: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
org.webrtc.EglBase$-CC: org.webrtc.EglBase create(org.webrtc.EglBase$Context)
com.google.crypto.tink.proto.KeyStatusType: com.google.crypto.tink.proto.KeyStatusType[] values()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTrack(org.webrtc.MediaStreamTrack,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void removeRendererFromVideoTrack()
org.webrtc.audio.WebRtcAudioUtils: void logAudioStateBasic(java.lang.String,android.content.Context,android.media.AudioManager)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void onFrame(org.webrtc.VideoFrame)
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
org.webrtc.RtpCapabilities$CodecCapability: java.lang.String getName()
androidx.core.content.ContextCompat$Api26Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
androidx.core.app.ActivityCompat$Api23Impl: void onSharedElementsReady(java.lang.Object)
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushDouble(double)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: android.net.Network[] getAllNetworks()
org.webrtc.RtpReceiver: void nativeUnsetObserver(long,long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver$RtpTransceiverDirection stringToTransceiverDirection(java.lang.String)
org.webrtc.PlatformSoftwareVideoDecoderFactory$1: boolean test(android.media.MediaCodecInfo)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void scheduleFrame()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader access$800(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.EglRenderer$EglSurfaceCreation: EglRenderer$EglSurfaceCreation(org.webrtc.EglRenderer)
org.webrtc.VideoDecoder$DecodeInfo: VideoDecoder$DecodeInfo(boolean,long)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$1: void onSetFailure(java.lang.String)
org.webrtc.audio.WebRtcAudioRecord: WebRtcAudioRecord(android.content.Context,java.util.concurrent.ScheduledExecutorService,android.media.AudioManager,int,int,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,boolean,boolean)
org.webrtc.FrameCryptorKeyProvider: FrameCryptorKeyProvider(long)
org.webrtc.NetworkMonitor$1: org.webrtc.NetworkChangeDetector create(org.webrtc.NetworkChangeDetector$Observer,android.content.Context)
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState fromNativeIndex(int)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: boolean canApplyTheme(android.graphics.drawable.Drawable)
org.webrtc.WrappedNativeI420Buffer: int getHeight()
org.webrtc.RtpTransceiver$RtpTransceiverDirection: org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $values()
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment: void onResume()
org.webrtc.TextureBufferImpl$1: void onRetain(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void dispose()
org.webrtc.RtcCertificatePem: java.lang.String getCertificate()
com.cloudwebrtc.webrtc.audio.AudioDeviceKind: com.cloudwebrtc.webrtc.audio.AudioDeviceKind[] $values()
org.webrtc.DtmfSender: boolean insertDtmf(java.lang.String,int,int)
com.google.android.datatransport.cct.CctBackendFactory: CctBackendFactory()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: boolean isNull(java.lang.String)
org.webrtc.PeerConnectionFactory: void printStackTraces()
org.webrtc.PeerConnection$TlsCertPolicy: PeerConnection$TlsCertPolicy(java.lang.String,int)
com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState: com.google.firebase.concurrent.SequentialExecutor$WorkerRunningState valueOf(java.lang.String)
org.webrtc.RtcCertificatePem: org.webrtc.RtcCertificatePem generateCertificate(long)
org.webrtc.SoftwareVideoEncoderFactory$1: SoftwareVideoEncoderFactory$1(org.webrtc.SoftwareVideoEncoderFactory,org.webrtc.VideoCodecInfo)
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType valueOf(java.lang.String)
org.webrtc.NetworkMonitorAutoDetect: boolean supportNetworkCallback()
org.webrtc.MediaStreamTrack$MediaType: org.webrtc.MediaStreamTrack$MediaType fromNativeIndex(int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$FallbackFactory: org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo)
org.webrtc.VideoEncoder: org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo)
org.webrtc.YuvHelper: void nativeI420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
org.webrtc.Camera2Session$CameraStateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(org.webrtc.EglBase10$Context,int[])
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeByteBuffer(org.webrtc.VideoFrame,long)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$enableSpeakerphone$7()
org.webrtc.Logging$TraceLevel: Logging$TraceLevel(java.lang.String,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getDisplayMedia(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,android.content.Intent)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStateCallback: void onWebRtcAudioRecordStop()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onDestroy(androidx.lifecycle.LifecycleOwner)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readProgressInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void close()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
org.webrtc.RtpParameters: RtpParameters(java.lang.String,org.webrtc.RtpParameters$DegradationPreference,org.webrtc.RtpParameters$Rtcp,java.util.List,java.util.List,java.util.List)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)
org.webrtc.audio.WebRtcAudioTrack: void nativeGetPlayoutData(long,int)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: boolean hasInternetCapability(android.net.Network)
org.webrtc.StatsReport$Value: StatsReport$Value(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
org.webrtc.RtpParameters$HeaderExtension: java.lang.String getUri()
org.webrtc.ContextUtils: void initialize(android.content.Context)
org.webrtc.EglBase: void swapBuffers(long)
org.webrtc.BuiltinAudioEncoderFactoryFactory: long createNativeAudioEncoderFactory()
org.webrtc.AndroidVideoDecoder$1: AndroidVideoDecoder$1(org.webrtc.AndroidVideoDecoder,java.lang.String)
org.webrtc.EglRenderer: void setMirror(boolean)
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: java.lang.String frameCryptorErrorStateToString(org.webrtc.FrameCryptor$FrameCryptionState)
org.webrtc.Camera2Session: Camera2Session(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int)
org.webrtc.MediaCodecWrapper: void setParameters(android.os.Bundle)
org.webrtc.PeerConnection$IceTransportsType: org.webrtc.PeerConnection$IceTransportsType valueOf(java.lang.String)
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onReleaseBuffer(org.webrtc.VideoFrame$TextureBuffer)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl()
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1: FlutterRTCVideoRenderer$1(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer)
org.webrtc.RtpReceiver: long getNativeRtpReceiver()
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setUsername(java.lang.String)
org.webrtc.EglBase14Impl$EglConnection: void makeCurrent(android.opengl.EGLSurface)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$Builder,android.app.Notification$BubbleMetadata)
org.webrtc.CameraCapturer$2: void onCameraDisconnected(org.webrtc.CameraSession)
org.webrtc.audio.WebRtcAudioUtils: WebRtcAudioUtils()
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setCaptureTimeNs(long)
org.webrtc.audio.WebRtcAudioRecord: void releaseAudioResources()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onSelectedCandidatePairChanged(org.webrtc.CandidatePairChangeEvent)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onActivityPaused(android.app.Activity)
org.webrtc.AndroidVideoDecoder: void releaseSurface()
org.webrtc.EglThread: void lambda$onRenderWindowClose$3()
com.cloudwebrtc.webrtc.GetUserMediaImpl$6: GetUserMediaImpl$6(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)
org.webrtc.PeerConnection: org.webrtc.DataChannel nativeCreateDataChannel(java.lang.String,org.webrtc.DataChannel$Init)
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason[] values()
org.webrtc.IceCandidate: java.lang.String getSdp()
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getFacingMode(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setPublicVersion(android.app.Notification$Builder,android.app.Notification)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
org.webrtc.VideoEncoder: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
org.webrtc.NetworkChangeDetector$ConnectionType: org.webrtc.NetworkChangeDetector$ConnectionType valueOf(java.lang.String)
org.webrtc.EglBase10Impl: int surfaceHeight()
org.webrtc.MediaCodecUtils: boolean isHardwareAccelerated(android.media.MediaCodecInfo)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void post(java.lang.Runnable)
org.webrtc.Logging: void nativeEnableLogThreads()
org.webrtc.VideoSource: void lambda$setVideoProcessor$1(org.webrtc.VideoFrame)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void addTransceiver(org.webrtc.MediaStreamTrack,java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.VideoFrame$Buffer: int getHeight()
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.PeerConnection$CandidateNetworkPolicy getCandidateNetworkPolicy()
org.webrtc.audio.WebRtcAudioRecord: int initRecording(int,int)
org.webrtc.SurfaceTextureHelper: void startListening(org.webrtc.VideoSink)
org.webrtc.SurfaceViewRenderer: void addFrameListener(org.webrtc.EglRenderer$FrameListener,float)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setCategory(android.app.Notification$Builder,java.lang.String)
org.webrtc.PeerConnection$RTCConfiguration: org.webrtc.RtcCertificatePem getCertificate()
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] $values()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
org.webrtc.audio.WebRtcAudioManager: boolean isLowLatencyInputSupported(android.content.Context)
com.cloudwebrtc.webrtc.GetUserMediaImpl: boolean access$502(com.cloudwebrtc.webrtc.GetUserMediaImpl,boolean)
org.webrtc.VideoFrame$TextureBuffer$-CC: int $default$getUnscaledHeight(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.DataChannel: void close()
org.webrtc.ExternalAudioProcessingFactory: long nativeSetRenderPreProcessing(org.webrtc.ExternalAudioProcessingFactory$AudioProcessing)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkH264(android.media.MediaCodecInfo)
org.webrtc.MediaCodecUtils: boolean isSoftwareOnly(android.media.MediaCodecInfo)
org.webrtc.audio.WebRtcAudioRecord: boolean verifyAudioConfig(int,int,android.media.AudioFormat,android.media.AudioDeviceInfo,java.util.List)
com.cloudwebrtc.webrtc.utils.AnyThreadSink: void error(java.lang.String,java.lang.String,java.lang.Object)
com.cloudwebrtc.webrtc.record.VideoFileRenderer: void lambda$initVideoEncoder$0()
org.webrtc.NetworkMonitor: org.webrtc.NetworkMonitor getInstance()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeat(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotificationMessagingStyle(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.TextureRegistry$ImageTextureEntry: void release()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setSettingsText(android.app.Notification$Builder,java.lang.CharSequence)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: int getInt(java.lang.String)
org.webrtc.SurfaceTextureHelper: void forceFrame()
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setOutputSampleRate(int)
org.webrtc.YuvConverter$ShaderCallbacks: void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: java.lang.String getSourceIdConstraint(com.cloudwebrtc.webrtc.utils.ConstraintsMap)
org.webrtc.EglBase$ConfigBuilder: int[] createConfigAttributes()
org.webrtc.PeerConnection$Observer$-CC: void $default$onStandardizedIceConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$IceConnectionState)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void dataChannelSend(java.lang.String,java.nio.ByteBuffer,java.lang.Boolean)
org.webrtc.NV21Buffer: int getWidth()
androidx.core.content.FileProvider$Api21Impl: java.io.File[] getExternalMediaDirs(android.content.Context)
org.webrtc.EglRenderer: void setErrorCallback(org.webrtc.EglRenderer$ErrorCallback)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
org.webrtc.VideoFrame$Buffer: org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int)
io.flutter.plugins.googlemaps.Messages$PlatformCapType: io.flutter.plugins.googlemaps.Messages$PlatformCapType[] values()
org.webrtc.PeerConnection$RTCConfiguration: boolean getPresumeWritableWhenFullyRelayed()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpSender getRtpSenderById(java.lang.String)
org.webrtc.AudioTrack: long nativeWrapSink(org.webrtc.AudioTrackSink)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onIceConnectionReceivingChange(boolean)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
org.webrtc.MediaSource$State: org.webrtc.MediaSource$State fromNativeIndex(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.util.Map dtmfSenderToMap(org.webrtc.DtmfSender,java.lang.String)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: void dispose()
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
org.webrtc.audio.WebRtcAudioRecord: boolean isAcousticEchoCancelerSupported()
org.webrtc.PeerConnection$IceGatheringState: org.webrtc.PeerConnection$IceGatheringState[] values()
org.webrtc.audio.AudioDeviceModule: boolean setNoiseSuppressorEnabled(boolean)
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.util.List getComponents()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
org.webrtc.WrappedNativeVideoDecoder: java.lang.String getImplementationName()
org.webrtc.Camera1Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
org.webrtc.GlGenericDrawer$ShaderCallbacks: void onNewShader(org.webrtc.GlShader)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.PendingIntent getBroadcastPendingIntent(android.content.Context,int,android.content.Intent)
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
org.webrtc.NativeLibraryLoader: boolean load(java.lang.String)
com.google.crypto.tink.shaded.protobuf.ProtoSyntax: com.google.crypto.tink.shaded.protobuf.ProtoSyntax[] values()
org.webrtc.Predicate$-CC: org.webrtc.Predicate $default$and(org.webrtc.Predicate,org.webrtc.Predicate)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: android.hardware.display.VirtualDisplay access$202(com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer,android.hardware.display.VirtualDisplay)
org.webrtc.VideoFrame$I420Buffer: java.nio.ByteBuffer getDataY()
org.webrtc.SurfaceViewRenderer: void lambda$onFrameResolutionChanged$0(int,int)
org.webrtc.RtpTransceiver: void dispose()
org.webrtc.PeerConnection$IceServer$Builder: org.webrtc.PeerConnection$IceServer$Builder setTlsAlpnProtocols(java.util.List)
org.webrtc.PeerConnection$SdpSemantics: org.webrtc.PeerConnection$SdpSemantics[] $values()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushNull()
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Camera1Session: void stop()
org.webrtc.audio.WebRtcAudioTrack: android.media.AudioAttributes$Builder applyAttributesOnQOrHigher(android.media.AudioAttributes$Builder,android.media.AudioAttributes)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void streamDispose(java.lang.String)
org.webrtc.MediaCodecWrapper: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
org.webrtc.PeerConnectionFactory: void checkPeerConnectionFactoryExists()
org.webrtc.audio.WebRtcAudioTrackUtils: void attachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,org.webrtc.audio.JavaAudioDeviceModule)
org.webrtc.PeerConnection$CandidateNetworkPolicy: PeerConnection$CandidateNetworkPolicy(java.lang.String,int)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useExactAlarm()
org.webrtc.SdpObserver: void onCreateFailure(java.lang.String)
org.webrtc.MediaStream: boolean addTrack(org.webrtc.VideoTrack)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status valueOf(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: java.lang.String getNextTrackUUID()
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setSound(android.app.Notification$Builder,android.net.Uri,java.lang.Object)
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate: void registerNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
org.webrtc.NativeLibrary: void initialize(org.webrtc.NativeLibraryLoader,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])
org.webrtc.VideoCodecInfo: java.lang.String getName()
org.webrtc.ThreadUtils: void checkIsOnMainThread()
org.webrtc.CameraCapturer: void startCapture(int,int,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
org.webrtc.VideoFrame: int getRotatedHeight()
io.flutter.embedding.engine.FlutterJNI: boolean ShouldDisableAHB()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
org.webrtc.Camera2Enumerator: java.lang.String[] getDeviceNames()
org.webrtc.CameraVideoCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
org.webrtc.Camera2Capturer: void startCapture(int,int,int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
org.webrtc.NetworkMonitor$2: void onNetworkPreference(java.util.List,int)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: FlutterWebRTCPlugin$LifeCycleObserver(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange)
com.dexterous.flutterlocalnotifications.models.ScheduleMode: boolean useAllowWhileIdle()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivity()
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder createBuilder()
org.webrtc.NetworkChangeDetector: java.util.List getActiveNetworkList()
org.webrtc.VideoFrame$Buffer: int getBufferType()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setLights(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.DataChannel$Observer: void onMessage(org.webrtc.DataChannel$Buffer)
org.webrtc.EncodedImage: org.webrtc.EncodedImage$Builder builder()
com.cloudwebrtc.webrtc.GetUserMediaImpl$1: void onReceiveResult(int,android.os.Bundle)
io.flutter.plugins.googlemaps.Messages$PlatformJointType: io.flutter.plugins.googlemaps.Messages$PlatformJointType[] values()
org.webrtc.EglBase14Impl$Context: EglBase14Impl$Context(android.opengl.EGLContext)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: FlutterRenderer$ImageReaderSurfaceProducer(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
org.webrtc.EglThread: boolean lambda$create$1(org.webrtc.EglThread)
org.webrtc.audio.VolumeLogger: void start()
org.webrtc.CameraCapturer$5: void run()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
org.webrtc.RtpCapabilities$CodecCapability: org.webrtc.MediaStreamTrack$MediaType getKind()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
org.webrtc.RtpParameters$Encoding: java.lang.Integer getMaxFramerate()
org.webrtc.PeerConnection$RTCConfiguration: boolean getAudioJitterBufferFastAccelerate()
org.webrtc.WrappedNativeVideoEncoder: org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int)
org.webrtc.DtmfSender: boolean canInsertDtmf()
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVisibility(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.TextureBufferImpl$2: void onDestroy(org.webrtc.TextureBufferImpl)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.Image acquireLatestImage()
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] values()
com.cloudwebrtc.webrtc.utils.PermissionUtils: void access$000(android.os.ResultReceiver,int,java.lang.String[],int[])
org.webrtc.Camera1Session: void startCapturing()
org.webrtc.PeerConnection$RTCConfiguration: java.lang.Integer getScreencastMinBitrate()
org.webrtc.EglBase14Impl: void createPbufferSurface(int,int)
org.webrtc.VideoEncoder$CodecSpecificInfoAV1: VideoEncoder$CodecSpecificInfoAV1()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType fromNativeIndex(int)
org.webrtc.PeerConnection$Observer: void onIceCandidateError(org.webrtc.IceCandidateErrorEvent)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: void onReceive(android.content.Context,android.content.Intent)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails readPersonDetails(java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void areNotificationsEnabled(io.flutter.plugin.common.MethodChannel$Result)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.webrtc.VideoFrame$TextureBuffer$Type: int getGlTarget()
org.webrtc.AddIceObserver: void onAddSuccess()
org.webrtc.PeerConnectionFactory: void stopAecDump()
androidx.fragment.app.FragmentContainerView: androidx.fragment.app.Fragment getFragment()
com.cloudwebrtc.webrtc.utils.ConstraintsArray: void pushArray(com.cloudwebrtc.webrtc.utils.ConstraintsArray)
org.webrtc.EglRenderer: void lambda$clearImage$4(float,float,float,float)
org.webrtc.VideoDecoderFallback: long nativeCreate(long,org.webrtc.VideoDecoder,org.webrtc.VideoDecoder)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Action$Builder setContextual(android.app.Notification$Action$Builder,boolean)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
com.cloudwebrtc.webrtc.utils.PermissionUtils$1: PermissionUtils$1(android.os.Handler,com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback)
org.webrtc.R: R()
org.webrtc.audio.WebRtcAudioTrack: boolean stopPlayout()
org.webrtc.CameraCapturer$9: void run()
org.webrtc.CryptoOptions$Builder: org.webrtc.CryptoOptions$Builder setRequireFrameEncryption(boolean)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraClosed()
com.google.maps.android.ui.RotationLayout: RotationLayout(android.content.Context,android.util.AttributeSet)
androidx.core.app.AlarmManagerCompat$Api21Impl: android.app.AlarmManager$AlarmClockInfo createAlarmClockInfo(long,android.app.PendingIntent)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: CameraEnumerationAndroid$CaptureFormat(int,int,int,int)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
org.webrtc.PeerConnection$ContinualGatheringPolicy: org.webrtc.PeerConnection$ContinualGatheringPolicy[] $values()
org.webrtc.RtpParameters$Rtcp: boolean getReducedSize()
org.webrtc.CameraCapturer$SwitchState: org.webrtc.CameraCapturer$SwitchState valueOf(java.lang.String)
org.webrtc.EglRenderer: void lambda$removeFrameListener$2(java.util.concurrent.CountDownLatch,org.webrtc.EglRenderer$FrameListener)
org.webrtc.Camera2Capturer: void changeCaptureFormat(int,int,int)
org.webrtc.CameraEnumerationAndroid$CaptureFormat: int hashCode()
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoEncoder$ResolutionBitrateLimits[] getResolutionBitrateLimits()
org.webrtc.CameraCapturer$2: void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame)
org.webrtc.PeerConnection: void addIceCandidate(org.webrtc.IceCandidate,org.webrtc.AddIceObserver)
org.webrtc.Camera1Enumerator: java.util.List getSupportedFormats(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
org.webrtc.Metrics$HistogramInfo: void addSample(int,int)
org.webrtc.VideoFrame: int getRotation()
org.webrtc.NetworkMonitorAutoDetect: org.webrtc.NetworkChangeDetector$ConnectionType getUnderlyingConnectionTypeForVpn(org.webrtc.NetworkMonitorAutoDetect$NetworkState)
org.webrtc.HardwareVideoEncoderFactory: boolean isMediaCodecAllowed(android.media.MediaCodecInfo)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery: TransportBackendDiscovery()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingPlugin: FlutterFirebaseMessagingPlugin()
org.webrtc.EglThread: org.webrtc.EglThread create(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglBase$Context,int[],org.webrtc.RenderSynchronizer)
com.cloudwebrtc.webrtc.PeerConnectionObserver: java.lang.String transceiverDirectionString(org.webrtc.RtpTransceiver$RtpTransceiverDirection)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setTimeoutAfter(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
org.webrtc.NV21Buffer: void release()
org.webrtc.VideoSource: VideoSource(long)
org.webrtc.EglRenderer: void lambda$swapBuffersOnRenderThread$5(org.webrtc.VideoFrame,long,boolean)
org.webrtc.audio.AudioDeviceModule$-CC: boolean $default$setPreferredMicrophoneFieldDimension(org.webrtc.audio.AudioDeviceModule,float)
org.webrtc.PeerConnectionFactory$InitializationOptions: PeerConnectionFactory$InitializationOptions(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity)
org.webrtc.PeerConnection$IceServer: org.webrtc.PeerConnection$IceServer$Builder builder(java.util.List)
org.webrtc.RtpReceiver$Observer: void onFirstPacketReceived(org.webrtc.MediaStreamTrack$MediaType)
org.webrtc.RtpTransceiver: org.webrtc.RtpReceiver nativeGetReceiver(long)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void lambda$getStats$2(io.flutter.plugin.common.MethodChannel$Result,org.webrtc.RTCStatsReport)
org.webrtc.PeerConnectionFactory: void nativeInjectLoggable(org.webrtc.JNILogging,int)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
org.webrtc.VideoDecoderWrapper: org.webrtc.VideoDecoder$Callback createDecoderCallback(long)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
org.webrtc.CameraEnumerator: boolean isBackFacing(java.lang.String)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
org.webrtc.StatsReport$Value: java.lang.String toString()
org.webrtc.EglThread: org.webrtc.EglBase$EglConnection lambda$create$0(org.webrtc.EglBase$Context,int[])
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void removeStreamForRendererById(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$2: void onSetFailure(java.lang.String)
org.webrtc.PeerConnectionFactory: void onWorkerThreadReady()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
org.webrtc.GlTextureFrameBuffer: void release()
org.webrtc.FrameCryptor: void nativeUnSetObserver(long)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
androidx.core.app.NotificationManagerCompat$Api26Impl: void createNotificationChannelGroup(android.app.NotificationManager,android.app.NotificationChannelGroup)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void stopListening()
org.webrtc.PeerConnection$PeerConnectionState: org.webrtc.PeerConnection$PeerConnectionState[] $values()
com.it_nomads.fluttersecurestorage.ciphers.KeyCipherAlgorithm: com.it_nomads.fluttersecurestorage.ciphers.KeyCipherAlgorithm[] values()
org.webrtc.audio.WebRtcAudioUtils: java.lang.String getThreadInfo()
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
org.webrtc.EncodedImage: int getFrameType()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
org.webrtc.MediaSource: void runWithReference(java.lang.Runnable)
org.webrtc.Logging: java.util.logging.Logger createFallbackLogger()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putDouble(java.lang.String,double)
org.webrtc.ExternalAudioProcessingFactory: void setBypassFlagForRenderPre(boolean)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
org.webrtc.GlGenericDrawer: void drawRgb(int,float[],int,int,int,int,int,int)
com.google.crypto.tink.proto.KeyData$KeyMaterialType: com.google.crypto.tink.proto.KeyData$KeyMaterialType valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: MessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean,java.lang.Boolean)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpParameters updateRtpParameters(org.webrtc.RtpParameters,java.util.Map)
org.webrtc.Logging$TraceLevel: org.webrtc.Logging$TraceLevel[] $values()
org.webrtc.NetworkMonitorAutoDetect: long getDefaultNetId()
androidx.lifecycle.SavedStateHandlesVM: SavedStateHandlesVM()
org.webrtc.NativeAndroidVideoTrackSource: void setIsScreencast(boolean)
org.webrtc.PeerConnectionFactory$Options: boolean getDisableEncryption()
org.webrtc.ThreadUtils: void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
org.webrtc.VideoTrack: boolean shouldReceive()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotificationMatchingDateComponents(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.security.crypto.EncryptedSharedPreferences$PrefKeyEncryptionScheme: androidx.security.crypto.EncryptedSharedPreferences$PrefKeyEncryptionScheme valueOf(java.lang.String)
org.webrtc.PeerConnection: void nativeCreateAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.TurnCustomizer: void checkTurnCustomizerExists()
org.webrtc.Camera1Helper: Camera1Helper()
org.webrtc.NV12Buffer: void release()
org.webrtc.Predicate$2: Predicate$2(org.webrtc.Predicate,org.webrtc.Predicate)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: NotificationChannelGroupDetails()
com.cloudwebrtc.webrtc.GetUserMediaImpl: void lambda$requestPermissions$0(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback,java.lang.String[],int[])
org.webrtc.RTCStats: java.lang.String getId()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService: FlutterFirebaseMessagingBackgroundService()
org.webrtc.SurfaceViewRenderer: void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents)
org.webrtc.PeerConnectionDependencies: org.webrtc.PeerConnection$Observer getObserver()
org.webrtc.Camera2Enumerator: java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void waitOnFence(android.media.Image)
org.webrtc.audio.WebRtcAudioRecord: void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer)
androidx.core.app.ActivityCompat$Api23Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
org.webrtc.Logging: void e(java.lang.String,java.lang.String,java.lang.Throwable)
org.webrtc.EglBase10Impl: void detachCurrent()
org.webrtc.NetEqFactoryFactory: long createNativeNetEqFactory()
org.webrtc.EncodedImage: int getEncodedWidth()
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void dispatchMessage(android.os.Message)
org.webrtc.FileVideoCapturer$1: FileVideoCapturer$1(org.webrtc.FileVideoCapturer)
org.webrtc.VideoEncoder$EncoderInfo: boolean getApplyAlignmentToAllSimulcastLayers()
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setNetEqFactoryFactory(org.webrtc.NetEqFactoryFactory)
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
com.google.crypto.tink.config.internal.TinkFipsUtil$AlgorithmFipsCompatibility: com.google.crypto.tink.config.internal.TinkFipsUtil$AlgorithmFipsCompatibility[] values()
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate: NetworkMonitorAutoDetect$WifiManagerDelegate()
org.webrtc.DtmfSender: boolean nativeCanInsertDtmf(long)
org.webrtc.DefaultVideoEncoderFactory: DefaultVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.VideoFrame$TextureBuffer: int getUnscaledWidth()
org.webrtc.WrappedNativeVideoEncoder: java.lang.String getImplementationName()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$LifeCycleObserver: void onStart(androidx.lifecycle.LifecycleOwner)
org.webrtc.PeerConnection$TlsCertPolicy: org.webrtc.PeerConnection$TlsCertPolicy valueOf(java.lang.String)
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata: AndroidVideoDecoder$DecodedTextureMetadata(long,java.lang.Integer)
org.webrtc.EglBase14Impl$EglConnection: void detachCurrent()
org.webrtc.Camera2Enumerator: org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler)
org.webrtc.SurfaceTextureHelper$2: void onRetain(org.webrtc.TextureBufferImpl)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.MediaStreamTrack getTransceiversTrack(java.lang.String)
org.webrtc.PeerConnection: void nativeNewGetStats(org.webrtc.RTCStatsCollectorCallback)
androidx.fragment.app.FragmentContainerView: void setLayoutTransition(android.animation.LayoutTransition)
org.webrtc.EglRenderer: void setLayoutAspectRatio(float)
com.cloudwebrtc.webrtc.SurfaceTextureRenderer: void pauseVideo()
org.webrtc.NetworkMonitor: int androidSdkInt()
androidx.core.app.NotificationManagerCompat$Api26Impl: void deleteNotificationChannel(android.app.NotificationManager,java.lang.String)
org.webrtc.NetworkMonitor: org.webrtc.NetworkChangeDetector getNetworkChangeDetector()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpSenderSetStreams(java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NV12Buffer: int getHeight()
org.webrtc.audio.WebRtcAudioRecord: java.util.concurrent.ScheduledExecutorService newDefaultScheduler()
org.webrtc.PeerConnection: org.webrtc.PeerConnection$IceConnectionState nativeIceConnectionState()
org.webrtc.VideoFrame$Buffer: void retain()
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
org.webrtc.NetworkMonitor: void init(android.content.Context)
org.webrtc.EglBase: boolean hasSurface()
org.webrtc.PeerConnection$AdapterType: org.webrtc.PeerConnection$AdapterType[] $values()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
androidx.core.app.NotificationCompat$BubbleMetadata$Api29Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
com.cloudwebrtc.webrtc.GetUserMediaImpl$2: GetUserMediaImpl$2(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
org.webrtc.EglRenderer$EglSurfaceCreation: void run()
org.webrtc.BuiltinAudioDecoderFactoryFactory: long createNativeAudioDecoderFactory()
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void lambda$stop$4()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderDispose(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType[] values()
org.webrtc.PeerConnection$CandidateNetworkPolicy: org.webrtc.PeerConnection$CandidateNetworkPolicy valueOf(java.lang.String)
org.webrtc.GlShader: int getAttribLocation(java.lang.String)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void updatePreferredDeviceList(boolean)
com.cloudwebrtc.webrtc.DataChannelObserver: DataChannelObserver(io.flutter.plugin.common.BinaryMessenger,java.lang.String,java.lang.String,org.webrtc.DataChannel)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
org.webrtc.FrameCryptorKeyProvider: long getNativeKeyProvider()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver: io.flutter.plugin.common.EventChannel$EventSink access$002(com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor$FrameCryptorStateObserver,io.flutter.plugin.common.EventChannel$EventSink)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: android.util.DisplayMetrics getRearDisplayMetrics()
org.webrtc.YuvHelper: void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
org.webrtc.SimulcastVideoEncoder: SimulcastVideoEncoder(org.webrtc.VideoEncoderFactory,org.webrtc.VideoEncoderFactory,org.webrtc.VideoCodecInfo)
org.webrtc.Histogram: long nativeCreateCounts(java.lang.String,int,int,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: org.webrtc.VideoCodecStatus setRateAllocation$lambda$3(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,org.webrtc.VideoEncoder$BitrateAllocation,int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaStream getStreamForId(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: BooleanUtils()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: org.webrtc.MediaConstraints defaultConstraints()
org.webrtc.VideoCodecStatus: org.webrtc.VideoCodecStatus[] $values()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void addTrack(java.lang.String,java.lang.String,java.util.List,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
org.webrtc.RtpTransceiver: org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeDirection(long)
org.webrtc.VideoTrack: void dispose()
org.webrtc.GlGenericDrawer: GlGenericDrawer(java.lang.String,java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
org.webrtc.FrameCryptorKeyProvider: void nativeSetSifTrailer(long,byte[])
org.webrtc.PeerConnection: boolean nativeRemoveTrack(long)
com.cloudwebrtc.webrtc.utils.ConstraintsMap: void putString(java.lang.String,java.lang.String)
org.webrtc.VideoTrack: void setShouldReceive(boolean)
com.dexterous.flutterlocalnotifications.models.SoundSource: SoundSource(java.lang.String,int)
com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper: java.lang.Long createNative$lambda$6(com.cloudwebrtc.webrtc.SimulcastVideoEncoderFactoryWrapper$StreamEncoderWrapper,long)
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: BigTextStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.SurfaceViewRenderer: void onFirstFrameRendered()
org.webrtc.AndroidVideoDecoder: java.lang.String getImplementationName()
androidx.profileinstaller.ProfileInstallerInitializer: ProfileInstallerInitializer()
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate: void lambda$new$0(android.net.wifi.p2p.WifiP2pGroup)
org.webrtc.RtpParameters: java.util.List getCodecs()
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnectionFactory$Builder builder()
org.webrtc.YuvConverter: void lambda$convertInternal$0(java.nio.ByteBuffer)
com.dexterous.flutterlocalnotifications.models.NotificationStyle: com.dexterous.flutterlocalnotifications.models.NotificationStyle[] $values()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: FlutterWebRTCPlugin()
org.webrtc.PeerConnectionFactory: void initialize(org.webrtc.PeerConnectionFactory$InitializationOptions)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setUsage(android.media.AudioAttributes$Builder,int)
org.webrtc.MediaCodecWrapperFactory: org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails from(java.util.Map)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority[] values()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: boolean getPreferredEncrypted()
org.webrtc.FrameCryptorKeyProvider: byte[] ratchetSharedKey(int)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
org.webrtc.TextureBufferImpl: int getHeight()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: FlutterRTCVideoRenderer(android.graphics.SurfaceTexture,io.flutter.view.TextureRegistry$SurfaceTextureEntry)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setId(int)
com.cloudwebrtc.webrtc.GetUserMediaImpl: void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigPictureStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.cloudwebrtc.webrtc.PeerConnectionObserver: void removeTrack(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.MediaStreamTrack: boolean setEnabled(boolean)
org.webrtc.VideoDecoderFactory: org.webrtc.VideoCodecInfo[] getSupportedCodecs()
org.webrtc.ScreenCapturerAndroid: void createVirtualDisplay()
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
androidx.fragment.app.DialogFragment: DialogFragment()
org.webrtc.VideoCapturer: void dispose()
org.webrtc.TimestampAligner: void dispose()
org.webrtc.Camera2Session$CameraCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)
org.webrtc.PeerConnection: void setAudioPlayout(boolean)
org.webrtc.FileVideoCapturer$VideoReaderY4M: FileVideoCapturer$VideoReaderY4M(java.lang.String)
org.webrtc.VideoEncoder$EncoderInfo: int getRequestedResolutionAlignment()
io.flutter.embedding.engine.FlutterJNI: void scheduleFrame()
androidx.security.crypto.MasterKey$Builder$Api23Impl$Api30Impl: void setUserAuthenticationParameters(android.security.keystore.KeyGenParameterSpec$Builder,int,int)
org.webrtc.PeerConnectionDependencies$Builder: org.webrtc.PeerConnectionDependencies$Builder setSSLCertificateVerifier(org.webrtc.SSLCertificateVerifier)
org.webrtc.PeerConnection: boolean removeTrack(org.webrtc.RtpSender)
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType valueOf(java.lang.String)
org.webrtc.YuvHelper: void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
org.webrtc.WrappedNativeI420Buffer: int getStrideY()
org.webrtc.CameraSession$-CC: int getDeviceOrientation(android.content.Context)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer$3: void run()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver: AlarmManagerSchedulerBroadcastReceiver()
org.webrtc.ScreenCapturerAndroid: long getNumCapturedFrames()
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onCreateFailure(java.lang.String)
org.webrtc.SurfaceTextureHelper: org.webrtc.VideoFrame$I420Buffer textureToYuv(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.WrappedNativeVideoDecoder: org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo)
org.webrtc.FileVideoCapturer: void changeCaptureFormat(int,int,int)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setLocalOnly(android.app.Notification$Builder,boolean)
org.webrtc.audio.WebRtcAudioEffects: WebRtcAudioEffects()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback)
org.webrtc.JNILogging: JNILogging(org.webrtc.Loggable)
org.webrtc.VideoSource: void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer)
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder: org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setFieldTrials(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setSampleRate(int)
org.webrtc.SurfaceEglRenderer: void surfaceDestroyed(android.view.SurfaceHolder)
org.webrtc.FrameCryptor: int getKeyIndex()
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setLargeIcon(android.app.Notification$Builder,android.graphics.drawable.Icon)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: LifecycleDispatcher$DispatcherActivityCallback()
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl: android.media.MediaFormat getOutputFormat()
org.webrtc.SurfaceEglRenderer: void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer)
com.cloudwebrtc.webrtc.StateProvider: android.content.Context getApplicationContext()
org.webrtc.audio.WebRtcAudioTrack: WebRtcAudioTrack(android.content.Context,android.media.AudioManager)
com.cloudwebrtc.webrtc.record.FrameCapturer: void onFrame(org.webrtc.VideoFrame)
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
org.webrtc.BaseBitrateAdjuster: int getAdjustedBitrateBps()
org.webrtc.MediaStreamTrack: MediaStreamTrack(long)
com.cloudwebrtc.webrtc.CameraEventsHandler: void onCameraDisconnected()
org.webrtc.audio.WebRtcAudioEffects: boolean setAEC(boolean)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void onResume()
org.webrtc.VideoCodecMimeType: org.webrtc.VideoCodecMimeType[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$300(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
org.webrtc.EglBase14Impl: android.opengl.EGLContext createEglContext(android.opengl.EGLContext,android.opengl.EGLDisplay,android.opengl.EGLConfig,int)
org.webrtc.audio.WebRtcAudioManager: int getMinOutputFrameSize(int,int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readInboxStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
org.webrtc.RtpParameters$DegradationPreference: org.webrtc.RtpParameters$DegradationPreference valueOf(java.lang.String)
com.google.firebase.iid.Registrar: java.util.List getComponents()
androidx.startup.InitializationProvider: InitializationProvider()
org.webrtc.CameraVideoCapturer$CameraEventsHandler: void onCameraError(java.lang.String)
com.example.kivou_app.MainActivity: MainActivity()
com.google.firebase.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread: void run()
com.cloudwebrtc.webrtc.FlutterRTCFrameCryptor: void keyProviderSetSifTrailer(java.util.Map,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void release()
org.webrtc.DataChannel$Observer: void onBufferedAmountChange(long)
org.webrtc.audio.WebRtcAudioRecord: void assertTrue(boolean)
androidx.browser.browseractions.BrowserActionsFallbackMenuView: BrowserActionsFallbackMenuView(android.content.Context,android.util.AttributeSet)
org.webrtc.PeerConnectionFactory: org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnection$Observer)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
org.webrtc.CameraCapturer: void changeCaptureFormat(int,int,int)
org.webrtc.JavaI420Buffer: void release()
org.webrtc.BitrateAdjuster: void reportEncodedFrame(int)
com.cloudwebrtc.webrtc.PeerConnectionObserver: org.webrtc.RtpTransceiver getRtpTransceiverById(java.lang.String)
org.webrtc.PeerConnection: void nativeSetLocalDescriptionAutomatically(org.webrtc.SdpObserver)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void addRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
org.webrtc.GlUtil: void checkNoGLES2Error(java.lang.String)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl$3: void onSetFailure(java.lang.String)
org.webrtc.RtpTransceiver$RtpTransceiverInit: RtpTransceiver$RtpTransceiverInit(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
org.webrtc.EglRenderer: void notifyCallbacks(org.webrtc.VideoFrame,boolean)
org.webrtc.FileVideoCapturer: void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setLocusId(android.app.Notification$Builder,java.lang.Object)
org.webrtc.MediaStreamTrack: void checkMediaStreamTrackExists()
org.webrtc.PeerConnection: void createOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule createAudioDeviceModule()
org.webrtc.audio.WebRtcAudioRecord: void setNativeAudioRecord(long)
org.webrtc.EglThread: org.webrtc.EglThread create(org.webrtc.EglThread$ReleaseMonitor,org.webrtc.EglBase$Context,int[])
org.webrtc.DataChannel$Init: java.lang.String getProtocol()
org.webrtc.MediaStreamTrack: long getNativeMediaStreamTrack()
org.webrtc.FileVideoCapturer$1: void run()
org.webrtc.NV12Buffer: void retain()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
org.webrtc.HardwareVideoEncoder: org.webrtc.VideoCodecStatus encodeTextureBuffer(org.webrtc.VideoFrame,long)
org.webrtc.RtpParameters$Codec: java.lang.Integer getClockRate()
com.dexterous.flutterlocalnotifications.models.NotificationAction: NotificationAction(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
com.cloudwebrtc.webrtc.utils.PermissionUtils: void requestPermissions(android.content.Context,android.app.Activity,java.lang.String[],android.os.ResultReceiver)
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: DefaultStyleInformation(java.lang.Boolean,java.lang.Boolean)
org.webrtc.HardwareVideoEncoder: java.lang.Thread createOutputThread()
androidx.core.app.NotificationCompatBuilder$Api20Impl: java.lang.String getGroup(android.app.Notification)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State valueOf(java.lang.String)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setVerificationText(android.app.Notification$CallStyle,java.lang.CharSequence)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$Action$Builder setAuthenticationRequired(android.app.Notification$Action$Builder,boolean)
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
org.webrtc.audio.WebRtcAudioManager: WebRtcAudioManager()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onTrack(org.webrtc.RtpTransceiver)
androidx.core.location.LocationManagerCompat$Api31Impl: boolean registerGnssMeasurementsCallback(android.location.LocationManager,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)
org.webrtc.RtpSender: java.util.List nativeGetStreams(long)
org.webrtc.PeerConnectionFactory: org.webrtc.RtpCapabilities getRtpSenderCapabilities(org.webrtc.MediaStreamTrack$MediaType)
androidx.core.app.NotificationCompat$CallStyle$Api21Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,java.lang.String)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback: void onWebRtcAudioRecordError(java.lang.String)
org.webrtc.audio.JavaAudioDeviceModule$Builder: org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareAcousticEchoCanceler(boolean)
org.webrtc.LibvpxVp9Encoder: long createNative(long)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void enableSpeakerButPreferBluetooth()
org.webrtc.ScreenCapturerAndroid: void dispose()
org.webrtc.PeerConnectionFactory: void nativeStopInternalTracingCapture()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
org.webrtc.DataChannel$Init: DataChannel$Init()
org.webrtc.BaseBitrateAdjuster: BaseBitrateAdjuster()
org.webrtc.DataChannel: void unregisterObserver()
org.webrtc.SurfaceTextureHelper$FrameRefMonitor: void onNewBuffer(org.webrtc.VideoFrame$TextureBuffer)
org.webrtc.PeerConnection$TcpCandidatePolicy: org.webrtc.PeerConnection$TcpCandidatePolicy[] values()
org.webrtc.audio.WebRtcAudioRecord: void nativeDataIsRecorded(long,int,long)
org.webrtc.LibaomAv1Encoder: LibaomAv1Encoder()
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
org.webrtc.CameraCapturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus[] values()
org.webrtc.video.CustomVideoEncoderFactory: void setForceSWCodec(boolean)
io.flutter.view.TextureRegistry$SurfaceProducer: void setSize(int,int)
org.webrtc.SoftwareVideoDecoderFactory: org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo)
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback: void onNetworkChanged(android.net.Network)
androidx.core.location.LocationCompat$Api26Impl: float getSpeedAccuracyMetersPerSecond(android.location.Location)
androidx.core.app.NotificationCompat$CallStyle$Api31Impl: android.app.Notification$CallStyle setVerificationIcon(android.app.Notification$CallStyle,android.graphics.drawable.Icon)
io.flutter.plugin.platform.PlatformViewWrapper: void setTouchProcessor(io.flutter.embedding.android.AndroidTouchProcessor)
com.cloudwebrtc.webrtc.CameraEventsHandler: void waitForCameraClosed()
org.webrtc.SurfaceViewRenderer: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
org.webrtc.EglThread: void onRenderWindowOpen()
org.webrtc.RtpCapabilities$HeaderExtensionCapability: int getPreferredId()
org.webrtc.SurfaceEglRenderer: void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame)
org.webrtc.EncodedImage$Builder: org.webrtc.EncodedImage$Builder setBuffer(java.nio.ByteBuffer,java.lang.Runnable)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver: FlutterFirebaseMessagingReceiver()
org.webrtc.IceCandidate: boolean objectEquals(java.lang.Object,java.lang.Object)
androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)
org.webrtc.HardwareVideoEncoderFactory: boolean isHardwareSupportedInCurrentSdkVp9(android.media.MediaCodecInfo)
org.webrtc.FrameCryptor$FrameCryptionState: org.webrtc.FrameCryptor$FrameCryptionState[] values()
org.webrtc.CameraCapturer$7: CameraCapturer$7(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler)
org.webrtc.ExternalAudioProcessingFactory: void nativeSetBypassFlagForCapturePost(boolean)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings()
org.webrtc.HardwareVideoEncoder: boolean isEncodingStatisticsSupported()
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(android.app.Notification$Builder,boolean)
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.cloudwebrtc.webrtc.audio.AudioSwitchManager: void clearCommunicationDevice()
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
org.webrtc.WrappedNativeI420Buffer: void release()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.google.firebase.messaging.ktx.FirebaseMessagingKtxRegistrar: FirebaseMessagingKtxRegistrar()
org.webrtc.FrameCryptorAlgorithm: org.webrtc.FrameCryptorAlgorithm valueOf(java.lang.String)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)
org.webrtc.VideoFrameDrawer: void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix)
org.webrtc.NetworkChangeDetector: org.webrtc.NetworkChangeDetector$ConnectionType getCurrentConnectionType()
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar: FirebaseCommonLegacyRegistrar()
org.webrtc.audio.WebRtcAudioTrack: void doAudioTrackStateCallback(int)
com.cloudwebrtc.webrtc.OrientationAwareScreenCapturer: boolean isScreencast()
org.webrtc.RtpReceiver: long nativeGetTrack(long)
org.webrtc.CameraEnumerationAndroid$1: int diff(java.lang.Object)
org.webrtc.EglThread$HandlerWithExceptionCallbacks: void addExceptionCallback(java.lang.Runnable)
org.webrtc.TextureBufferImpl: void retain()
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] $values()
org.webrtc.PeerConnection: org.webrtc.RtcCertificatePem getCertificate()
org.webrtc.SurfaceViewRenderer: void release()
org.webrtc.PeerConnection: org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack,org.webrtc.RtpTransceiver$RtpTransceiverInit)
org.webrtc.CameraEnumerationAndroid: org.webrtc.Size getClosestSupportedSize(java.util.List,int,int)
org.webrtc.audio.WebRtcAudioTrack: int getStreamVolume()
org.webrtc.EglBase10Impl$Context: javax.microedition.khronos.egl.EGLContext getRawContext()
org.webrtc.YuvConverter: YuvConverter(org.webrtc.VideoFrameDrawer)
com.cloudwebrtc.webrtc.audio.AudioUtils: java.lang.String getAudioDeviceLabel(android.media.AudioDeviceInfo)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoEncoderFactory(org.webrtc.VideoEncoderFactory)
org.webrtc.Camera1Enumerator: Camera1Enumerator()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void onCancel(java.lang.Object)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void peerConnectionSetLocalDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.TextureBufferImpl: org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
org.webrtc.MediaCodecWrapper: void releaseOutputBuffer(int,boolean)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addExtras(android.app.Notification$Action$Builder,android.os.Bundle)
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera[] values()
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomContentView(android.app.Notification$Builder,android.widget.RemoteViews)
org.webrtc.VideoFrameDrawer: void release()
org.webrtc.NV21Buffer: void nativeCropAndScale(int,int,int,int,int,int,byte[],int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onDetachedFromActivityForConfigChanges()
org.webrtc.RtcCertificatePem: java.lang.String getPrivateKey()
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
org.webrtc.VideoEncoder$ScalingSettings: VideoEncoder$ScalingSettings(boolean,int,int)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
org.webrtc.MediaConstraints: MediaConstraints()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id()
androidx.core.view.WindowInsetsCompat$Impl: void setRootViewData(androidx.core.graphics.Insets)
org.webrtc.audio.WebRtcAudioUtils: java.lang.String streamTypeToString(int)
com.cloudwebrtc.webrtc.MethodCallHandlerImpl: void getSenders(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.NetworkChangeDetector$Observer: void onNetworkDisconnect(long)
org.webrtc.PeerConnectionFactory$Builder: org.webrtc.PeerConnectionFactory$Builder setVideoDecoderFactory(org.webrtc.VideoDecoderFactory)
org.webrtc.VideoFileRenderer$1: void run()
org.webrtc.CameraCapturer: void dispose()
org.webrtc.audio.WebRtcAudioRecord: void logMainParameters()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState: com.cloudwebrtc.webrtc.CameraEventsHandler$CameraState[] values()
org.webrtc.EglBase$-CC: org.webrtc.EglBase10 createEgl10(int[])
org.webrtc.PeerConnectionFactory: void stopInternalTracingCapture()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims()
com.google.firebase.installations.FirebaseInstallationsRegistrar: com.google.firebase.installations.FirebaseInstallationsApi lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment: void checkSelfPermissions(boolean)
org.webrtc.RtpReceiver: java.lang.String nativeGetId(long)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
org.webrtc.CameraCapturer$2: void onCameraError(org.webrtc.CameraSession,java.lang.String)
com.baseflow.permissionhandler.PermissionHandlerPlugin: PermissionHandlerPlugin()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $values()
com.cloudwebrtc.webrtc.PeerConnectionObserver: void rtpTransceiverSetDirection(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
org.webrtc.Camera2Enumerator: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)
org.webrtc.Camera2Capturer: void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: byte[] castObjectToByteArray(java.lang.Object)
org.webrtc.MediaCodecWrapper: android.view.Surface createInputSurface()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readSoundInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
org.webrtc.BitrateAdjuster: void setTargets(int,double)
org.webrtc.FramerateBitrateAdjuster: FramerateBitrateAdjuster()
androidx.core.app.Person$Api28Impl: android.app.Person toAndroidPerson(androidx.core.app.Person)
org.webrtc.BitrateAdjuster: double getAdjustedFramerateFps()
org.webrtc.YuvHelper: void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int)
androidx.security.crypto.MasterKey$Builder$Api23Impl: java.lang.String getKeystoreAlias(android.security.keystore.KeyGenParameterSpec)
org.webrtc.VideoFrame$Buffer: int getWidth()
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin: void onCancel(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
org.webrtc.RtpParameters$Codec: RtpParameters$Codec(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.util.Map)
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer: void setStream(org.webrtc.MediaStream,java.lang.String,java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
org.webrtc.HardwareVideoEncoder: HardwareVideoEncoder(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecMimeType,java.lang.Integer,java.lang.Integer,java.util.Map,int,int,org.webrtc.BitrateAdjuster,org.webrtc.EglBase14$Context)
org.webrtc.PeerConnection: void removeStream(org.webrtc.MediaStream)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
org.webrtc.CameraVideoCapturer$-CC: void $default$addMediaRecorderToCamera(org.webrtc.CameraVideoCapturer,android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()
org.webrtc.VideoDecoderFactory$-CC: org.webrtc.VideoCodecInfo[] $default$getSupportedCodecs(org.webrtc.VideoDecoderFactory)
